{
  "reflection": [
    {
      "type": "[B"
    },
    {
      "type": "[C"
    },
    {
      "type": "[Ljava.lang.String;"
    },
    {
      "type": "[Ljava.lang.constant.ClassDesc;"
    },
    {
      "type": "[Ljava.lang.constant.ConstantDesc;"
    },
    {
      "type": "com.google.i18n.phonenumbers.PhoneNumberUtil",
      "methods": [
        {
          "name": "getMetadataForRegion",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "com.intellij.junit5.JUnit5IdeaTestRunner",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.intellij.rt.execution.application.AppMainV2$Agent",
      "methods": [
        {
          "name": "premain",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.instrument.Instrumentation"
          ]
        }
      ]
    },
    {
      "type": "com.sun.tools.attach.VirtualMachine"
    },
    {
      "type": "java.beans.Introspector"
    },
    {
      "type": "java.io.Serializable"
    },
    {
      "type": "java.lang.Class",
      "methods": [
        {
          "name": "getModule",
          "parameterTypes": []
        },
        {
          "name": "getNestHost",
          "parameterTypes": []
        },
        {
          "name": "getNestMembers",
          "parameterTypes": []
        },
        {
          "name": "getRecordComponents",
          "parameterTypes": []
        },
        {
          "name": "isRecord",
          "parameterTypes": []
        },
        {
          "name": "isSealed",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.ClassLoader"
    },
    {
      "type": "java.lang.Comparable"
    },
    {
      "type": "java.lang.Enum"
    },
    {
      "type": "java.lang.Module",
      "methods": [
        {
          "name": "canRead",
          "parameterTypes": [
            "java.lang.Module"
          ]
        },
        {
          "name": "isExported",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.lang.Object",
      "allDeclaredFields": true
    },
    {
      "type": "java.lang.ProcessHandle",
      "methods": [
        {
          "name": "current",
          "parameterTypes": []
        },
        {
          "name": "pid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.Record"
    },
    {
      "type": "java.lang.Runtime",
      "methods": [
        {
          "name": "version",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.Runtime$Version",
      "methods": [
        {
          "name": "feature",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.StackWalker"
    },
    {
      "type": "java.lang.StackWalker$Option"
    },
    {
      "type": "java.lang.StackWalker$StackFrame"
    },
    {
      "type": "java.lang.String",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.lang.StringBuilder"
    },
    {
      "type": "java.lang.System",
      "methods": [
        {
          "name": "getSecurityManager",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.WeakPairMap"
    },
    {
      "type": "java.lang.WeakPairMap$Pair"
    },
    {
      "type": "java.lang.WeakPairMap$Pair$Weak"
    },
    {
      "type": "java.lang.annotation.Retention"
    },
    {
      "type": "java.lang.annotation.Target"
    },
    {
      "type": "java.lang.constant.ClassDesc"
    },
    {
      "type": "java.lang.constant.Constable"
    },
    {
      "type": "java.lang.constant.ConstantDesc"
    },
    {
      "type": "java.lang.constant.DirectMethodHandleDesc"
    },
    {
      "type": "java.lang.constant.DirectMethodHandleDesc$Kind"
    },
    {
      "type": "java.lang.constant.DynamicConstantDesc"
    },
    {
      "type": "java.lang.constant.MethodHandleDesc"
    },
    {
      "type": "java.lang.constant.MethodTypeDesc"
    },
    {
      "type": "java.lang.instrument.Instrumentation",
      "methods": [
        {
          "name": "redefineModule",
          "parameterTypes": [
            "java.lang.Module",
            "java.util.Set",
            "java.util.Map",
            "java.util.Map",
            "java.util.Set",
            "java.util.Map"
          ]
        }
      ]
    },
    {
      "type": "java.lang.invoke.CallSite"
    },
    {
      "type": "java.lang.invoke.MethodHandle"
    },
    {
      "type": "java.lang.invoke.MethodHandles"
    },
    {
      "type": "java.lang.management.ManagementFactory",
      "methods": [
        {
          "name": "getRuntimeMXBean",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.management.RuntimeMXBean",
      "methods": [
        {
          "name": "getInputArguments",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.reflect.AccessibleObject"
    },
    {
      "type": "java.lang.reflect.AnnotatedArrayType"
    },
    {
      "type": "java.lang.reflect.AnnotatedParameterizedType"
    },
    {
      "type": "java.lang.reflect.AnnotatedType",
      "methods": [
        {
          "name": "getType",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.reflect.AnnotatedTypeVariable"
    },
    {
      "type": "java.lang.reflect.AnnotatedWildcardType"
    },
    {
      "type": "java.lang.reflect.Executable",
      "methods": [
        {
          "name": "getAnnotatedReceiverType",
          "parameterTypes": []
        },
        {
          "name": "getParameterCount",
          "parameterTypes": []
        },
        {
          "name": "getParameters",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.reflect.Field"
    },
    {
      "type": "java.lang.reflect.Method"
    },
    {
      "type": "java.lang.reflect.Parameter",
      "methods": [
        {
          "name": "getModifiers",
          "parameterTypes": []
        },
        {
          "name": "isNamePresent",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.reflect.TypeVariable"
    },
    {
      "type": "java.security.AccessController",
      "methods": [
        {
          "name": "doPrivileged",
          "parameterTypes": [
            "java.security.PrivilegedAction"
          ]
        }
      ]
    },
    {
      "type": "java.sql.Date"
    },
    {
      "type": "java.sql.Timestamp"
    },
    {
      "type": "java.util.Date",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.util.List"
    },
    {
      "type": "java.util.Map"
    },
    {
      "type": "java.util.Optional"
    },
    {
      "type": "java.util.concurrent.ForkJoinPool",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "int",
            "java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory",
            "java.lang.Thread$UncaughtExceptionHandler",
            "boolean",
            "int",
            "int",
            "int",
            "java.util.function.Predicate",
            "long",
            "java.util.concurrent.TimeUnit"
          ]
        }
      ]
    },
    {
      "type": "java.util.concurrent.ForkJoinTask",
      "fields": [
        {
          "name": "aux"
        },
        {
          "name": "status"
        }
      ]
    },
    {
      "type": "java.util.concurrent.TimeUnit",
      "methods": [
        {
          "name": "valueOf",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.util.concurrent.atomic.AtomicBoolean",
      "fields": [
        {
          "name": "value"
        }
      ]
    },
    {
      "type": "java.util.function.Consumer"
    },
    {
      "type": "java.util.function.Function"
    },
    {
      "type": "java.util.logging.Formatter"
    },
    {
      "type": "java.util.logging.Handler"
    },
    {
      "type": "java.util.logging.SimpleFormatter"
    },
    {
      "type": "java.util.zip.DeflaterInputStream"
    },
    {
      "type": "javax.imageio.spi.ImageReaderSpi"
    },
    {
      "type": "javax.imageio.spi.ImageWriterSpi"
    },
    {
      "type": "jdk.internal.misc.Unsafe"
    },
    {
      "type": "kotlin.jvm.JvmInline"
    },
    {
      "type": "net.bytebuddy.agent.Installer",
      "methods": [
        {
          "name": "agentmain",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.instrument.Instrumentation"
          ]
        },
        {
          "name": "getInstrumentation",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$AllArguments",
      "methods": [
        {
          "name": "includeSelf",
          "parameterTypes": []
        },
        {
          "name": "nullIfEmpty",
          "parameterTypes": []
        },
        {
          "name": "readOnly",
          "parameterTypes": []
        },
        {
          "name": "typing",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$Argument",
      "methods": [
        {
          "name": "optional",
          "parameterTypes": []
        },
        {
          "name": "readOnly",
          "parameterTypes": []
        },
        {
          "name": "typing",
          "parameterTypes": []
        },
        {
          "name": "value",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$Enter",
      "methods": [
        {
          "name": "readOnly",
          "parameterTypes": []
        },
        {
          "name": "typing",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$Exit"
    },
    {
      "type": "net.bytebuddy.asm.Advice$FieldGetterHandle"
    },
    {
      "type": "net.bytebuddy.asm.Advice$FieldSetterHandle"
    },
    {
      "type": "net.bytebuddy.asm.Advice$Local"
    },
    {
      "type": "net.bytebuddy.asm.Advice$OnMethodEnter",
      "methods": [
        {
          "name": "inline",
          "parameterTypes": []
        },
        {
          "name": "prependLineNumber",
          "parameterTypes": []
        },
        {
          "name": "skipOn",
          "parameterTypes": []
        },
        {
          "name": "skipOnIndex",
          "parameterTypes": []
        },
        {
          "name": "suppress",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$OnMethodExit",
      "methods": [
        {
          "name": "backupArguments",
          "parameterTypes": []
        },
        {
          "name": "inline",
          "parameterTypes": []
        },
        {
          "name": "onThrowable",
          "parameterTypes": []
        },
        {
          "name": "repeatOn",
          "parameterTypes": []
        },
        {
          "name": "repeatOnIndex",
          "parameterTypes": []
        },
        {
          "name": "suppress",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$Origin"
    },
    {
      "type": "net.bytebuddy.asm.Advice$Return",
      "methods": [
        {
          "name": "readOnly",
          "parameterTypes": []
        },
        {
          "name": "typing",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$SelfCallHandle"
    },
    {
      "type": "net.bytebuddy.asm.Advice$This",
      "methods": [
        {
          "name": "optional",
          "parameterTypes": []
        },
        {
          "name": "readOnly",
          "parameterTypes": []
        },
        {
          "name": "typing",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.asm.Advice$Thrown"
    },
    {
      "type": "net.bytebuddy.description.method.MethodDescription$InDefinedShape$AbstractBase$Executable"
    },
    {
      "type": "net.bytebuddy.description.method.ParameterDescription$ForLoadedParameter$Parameter"
    },
    {
      "type": "net.bytebuddy.description.method.ParameterList$ForLoadedExecutable$Executable"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDefinition$Sort$AnnotatedType"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$ForLoadedType$Dispatcher"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedExecutableExceptionType$Dispatcher"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedExecutableParameterType$Dispatcher"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedField$Dispatcher"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedMethodReturnType$Dispatcher"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForComponentType$AnnotatedParameterizedType"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForOwnerType$AnnotatedType"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeArgument$AnnotatedParameterizedType"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeVariableBoundType$AnnotatedTypeVariable"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeVariableBoundType$OfFormalTypeVariable$FormalTypeVariable"
    },
    {
      "type": "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForWildcardUpperBoundType$AnnotatedWildcardType"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.AllArguments"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.Argument"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.BindingPriority"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.Default"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.DefaultCall"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.DefaultCallHandle"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.DefaultMethod"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.DefaultMethodHandle"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.FieldGetterHandle"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.FieldSetterHandle"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.FieldValue"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.Origin"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.Super"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.SuperCall"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.SuperCallHandle"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.SuperMethod"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.SuperMethodHandle"
    },
    {
      "type": "net.bytebuddy.implementation.bind.annotation.This"
    },
    {
      "type": "net.bytebuddy.utility.Invoker"
    },
    {
      "type": "net.bytebuddy.utility.Invoker$Dispatcher",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher"
    },
    {
      "type": "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfClassDesc"
    },
    {
      "type": "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfDirectMethodHandleDesc"
    },
    {
      "type": "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfDirectMethodHandleDesc$ForKind"
    },
    {
      "type": "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfDynamicConstantDesc"
    },
    {
      "type": "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfMethodHandleDesc"
    },
    {
      "type": "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfMethodTypeDesc"
    },
    {
      "type": "net.datafaker.AbstractFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.Faker"
    },
    {
      "type": "net.datafaker.FakerConcurrencyModificationExceptionTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "test1",
          "parameterTypes": []
        },
        {
          "name": "test2",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.FakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "badExpressionCouldntCoerce",
          "parameterTypes": []
        },
        {
          "name": "badExpressionTooFewArgs",
          "parameterTypes": []
        },
        {
          "name": "badExpressionTooManyArgs",
          "parameterTypes": []
        },
        {
          "name": "bothifyShouldGenerateLettersAndNumbers",
          "parameterTypes": []
        },
        {
          "name": "datafaker87",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "differentLocalesTest",
          "parameterTypes": []
        },
        {
          "name": "differentSeeds",
          "parameterTypes": []
        },
        {
          "name": "doWithLocaleExceptionTest",
          "parameterTypes": []
        },
        {
          "name": "examplifyLowercaseLetters",
          "parameterTypes": []
        },
        {
          "name": "examplifyMixed",
          "parameterTypes": []
        },
        {
          "name": "examplifyNumbers",
          "parameterTypes": []
        },
        {
          "name": "examplifyUppercaseLetters",
          "parameterTypes": []
        },
        {
          "name": "examplifyWithSpacesAndSpecialCharacters",
          "parameterTypes": []
        },
        {
          "name": "expression",
          "parameterTypes": []
        },
        {
          "name": "fakerInstanceCanBeAcquiredViaUtilityMethods",
          "parameterTypes": []
        },
        {
          "name": "issue883Test",
          "parameterTypes": []
        },
        {
          "name": "jsonExpressionTest",
          "parameterTypes": []
        },
        {
          "name": "letterifyShouldGenerateLetters",
          "parameterTypes": []
        },
        {
          "name": "letterifyShouldGenerateUpperCaseLetters",
          "parameterTypes": []
        },
        {
          "name": "letterifyShouldLeaveNonSpecialCharactersAlone",
          "parameterTypes": []
        },
        {
          "name": "numberBetweenRepeated",
          "parameterTypes": []
        },
        {
          "name": "numerifyShouldGenerateNonZeroNumbers",
          "parameterTypes": []
        },
        {
          "name": "numerifyShouldGenerateNumbers",
          "parameterTypes": []
        },
        {
          "name": "numerifyShouldGenerateNumbersNotStartingWithZero",
          "parameterTypes": []
        },
        {
          "name": "numerifyShouldLeaveNonSpecialCharactersAlone",
          "parameterTypes": []
        },
        {
          "name": "regexifyShouldGenerateSameValueForFakerWithSameSeed",
          "parameterTypes": []
        },
        {
          "name": "resolveShouldReturnValueThatExists",
          "parameterTypes": []
        },
        {
          "name": "resolveShouldThrowExceptionWhenPropertyDoesntExist",
          "parameterTypes": []
        },
        {
          "name": "shouldNotApplyCachingToMethodsWithParameters",
          "parameterTypes": []
        },
        {
          "name": "templatify",
          "parameterTypes": []
        },
        {
          "name": "testDeterministicAndNonDeterministicProvidersReturnValues",
          "parameterTypes": []
        },
        {
          "name": "testLimitForCsvExpression",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "testRegexify",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.Issue1178Test",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testExpressionAUWorks",
          "parameterTypes": []
        },
        {
          "name": "testExpressionEnglishFails",
          "parameterTypes": []
        },
        {
          "name": "testExpressionFails",
          "parameterTypes": []
        },
        {
          "name": "testExpressionNLWithCity",
          "parameterTypes": []
        },
        {
          "name": "testExpressionNLWithFullAddress",
          "parameterTypes": []
        },
        {
          "name": "testExpressionNLWithMiddleWorks",
          "parameterTypes": []
        },
        {
          "name": "testExpressionNLWorks",
          "parameterTypes": []
        },
        {
          "name": "testExpressionUsFails",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.Issue759Test",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "issue759Test",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.Issue759Test$WorkerThread"
    },
    {
      "type": "net.datafaker.LogFormatter"
    },
    {
      "type": "net.datafaker.TestSetupExtension"
    },
    {
      "type": "net.datafaker.ThreadLocalLogHandler"
    },
    {
      "type": "net.datafaker.annotations.FakeAnnotationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "defaultSchema",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityFromJavaRecordWithComplexSchemaWhenClassTemplateWithoutAnnotation",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityFromJavaRecordWithCustomSchema",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityFromJavaRecordWithCustomSchemaWhenClassTemplateWithoutAnnotation",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityFromJavaRecordWithDefaultSchema",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityFromJavaRecordWithDefaultSchemaAndInDefaultSchemaInCurrentClass",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityWithCustomSchema",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityWithCustomSchemaWhenClassTemplateWithoutAnnotation",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityWithDefaultSchema",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass2",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.annotations.FakeAnnotationTest$DefaultPerson",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.annotations.FakeAnnotationTest$DefaultPersonJavaRecord",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.annotations.FakeAnnotationTest$SimplePerson",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.annotations.FakeAnnotationTest$SimplePersonJavaRecord",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.annotations.dto.ComplexPersonJavaRecord",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.annotations.dto.Person",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.annotations.dto.PersonJavaRecord",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.formats.CsvTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "csvTestNew",
          "parameterTypes": []
        },
        {
          "name": "csvTestWithQuotesNew",
          "parameterTypes": []
        },
        {
          "name": "supplierShouldBeDefinedInCaseOfNullInput",
          "parameterTypes": []
        },
        {
          "name": "testCsvWithCommaNew",
          "parameterTypes": []
        },
        {
          "name": "testCsvWithDifferentObjects",
          "parameterTypes": []
        },
        {
          "name": "testCsvWithDifferentObjectsFunction",
          "parameterTypes": []
        },
        {
          "name": "testCsvWithDifferentObjectsFunctionStream",
          "parameterTypes": []
        },
        {
          "name": "testCsvWithInfiniteSequence",
          "parameterTypes": []
        },
        {
          "name": "testInfiniteCsv",
          "parameterTypes": []
        },
        {
          "name": "testInfiniteCsvWithLimit",
          "parameterTypes": []
        },
        {
          "name": "testLimitForCollection",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "testLimitForCollectionNew",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "testLimitForCsv",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "testLimitForCsvNew",
          "parameterTypes": [
            "int"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.formats.JsonTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchema",
          "parameterTypes": []
        },
        {
          "name": "jsonCollectionOfCollectionsTest",
          "parameterTypes": []
        },
        {
          "name": "jsonObjectCollectionTest",
          "parameterTypes": []
        },
        {
          "name": "jsonWithDifferentFieldFormatsInOneObjectTest",
          "parameterTypes": []
        },
        {
          "name": "outputArrayJsonTestForJsonTransformer",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String"
          ]
        },
        {
          "name": "outputWithoutCommaForJsonTransformer",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String"
          ]
        },
        {
          "name": "simpleJsonTestForJsonTransformer",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String"
          ]
        },
        {
          "name": "testGenerateFromFakeSequenceCollection",
          "parameterTypes": []
        },
        {
          "name": "testGenerateFromFakeSequenceCollectionWithoutComma",
          "parameterTypes": []
        },
        {
          "name": "testGenerateFromFakeSequenceStream",
          "parameterTypes": []
        },
        {
          "name": "testGenerateFromInfiniteFakeSequence",
          "parameterTypes": []
        },
        {
          "name": "testGenerateFromSchemaWithLimit",
          "parameterTypes": []
        },
        {
          "name": "testJsonStream",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.formats.SqlTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "arrayAndMultisetSqlTestForSqlTransformerCalcite",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "batchSizeSqlTestForSqlTransformerOracle",
          "parameterTypes": []
        },
        {
          "name": "batchSizeSqlTestForSqlTransformerPostgres",
          "parameterTypes": []
        },
        {
          "name": "batchSqlTestForSqlTransformerOracle",
          "parameterTypes": []
        },
        {
          "name": "batchSqlTestForSqlTransformerPostgres",
          "parameterTypes": []
        },
        {
          "name": "batchTestForSqlTransformerSparkSql",
          "parameterTypes": []
        },
        {
          "name": "generateFromEmptySchema",
          "parameterTypes": []
        },
        {
          "name": "generateFromFakeSequenceBatch",
          "parameterTypes": []
        },
        {
          "name": "generateFromFakeSequenceSeparated",
          "parameterTypes": []
        },
        {
          "name": "generateFromInfiniteFakeSequenceBatch",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchema",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchemaForCalcite",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchemaForMSSQL",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchemaForMySQL",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchemaForOracle",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchemaForPostgres",
          "parameterTypes": []
        },
        {
          "name": "generateTestSchemaForSparkSql",
          "parameterTypes": []
        },
        {
          "name": "simpleSqlTestForSqlTransformer",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "simpleSqlTestForSqlTransformerMSSQL",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "simpleSqlTestForSqlTransformerMySQL",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "simpleSqlTestForSqlTransformerOracle",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "simpleSqlTestForSqlTransformerPostgres",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "simpleSqlTestForSqlTransformerSparkSql",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "simpleStreamTestForSqlTransformerSparkSql",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "sqlKeywordCapitalCaseCheck",
          "parameterTypes": []
        },
        {
          "name": "sqlKeywordCaseCheck",
          "parameterTypes": []
        },
        {
          "name": "testForceQuotedWithSqlIdentifiers",
          "parameterTypes": []
        },
        {
          "name": "testGenerateFromSchemaWithLimitBatchModeStatements",
          "parameterTypes": []
        },
        {
          "name": "testGenerateFromSchemaWithLimitSeparatedStatements",
          "parameterTypes": []
        },
        {
          "name": "testSqlBatch",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.formats.XmlTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "generateFromFakeSequence",
          "parameterTypes": []
        },
        {
          "name": "generateTestXmlPrettySchema",
          "parameterTypes": []
        },
        {
          "name": "generateTestXmlSchema",
          "parameterTypes": []
        },
        {
          "name": "generateXMLWithThreeNestedLevels",
          "parameterTypes": []
        },
        {
          "name": "generateXMLWithThreeNestedLevelsAndAttributes",
          "parameterTypes": []
        },
        {
          "name": "xmlPrettySchemaTest",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String"
          ]
        },
        {
          "name": "xmlSchemaTest",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.formats.YamlTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "generateFromFakeSequence",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "generateFromFakeSequenceWithCollection",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "generateTestSchema",
          "parameterTypes": []
        },
        {
          "name": "simpleYamlTest",
          "parameterTypes": [
            "net.datafaker.transformations.Schema",
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.AlbanianIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.AlbanianIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checksum",
          "parameterTypes": []
        },
        {
          "name": "checksumOfFirstChar",
          "parameterTypes": []
        },
        {
          "name": "dd",
          "parameterTypes": []
        },
        {
          "name": "invalid",
          "parameterTypes": []
        },
        {
          "name": "mm",
          "parameterTypes": []
        },
        {
          "name": "valid",
          "parameterTypes": []
        },
        {
          "name": "yy",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.AmericanIdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.BulgarianIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.BulgarianIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checksum",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.ChineseIdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.ChineseIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testChecksumOfChineseIdNumber",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "testValidChineseIdNumber",
          "parameterTypes": []
        },
        {
          "name": "testValidZhCnIdNumber",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.EstonianIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.EstonianIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checksum",
          "parameterTypes": []
        },
        {
          "name": "firstDigit_18xx",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "firstDigit_19xx",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "firstDigit_20xx",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "firstDigit_21xx",
          "parameterTypes": [
            "int"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.GeorgianIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.MacedonianIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.MacedonianIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checksum",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.MexicanIdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.MexicanIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "invalid",
          "parameterTypes": []
        },
        {
          "name": "invalidEsMXSsn",
          "parameterTypes": []
        },
        {
          "name": "valid",
          "parameterTypes": []
        },
        {
          "name": "validEsMXSsn",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.MoldovanIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.MoldovanIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checksum",
          "parameterTypes": []
        },
        {
          "name": "valid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.PolishIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.PolishIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testCenturiesPesel",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "testGenderedPesel",
          "parameterTypes": [
            "net.datafaker.idnumbers.PolishIdNumber$Gender"
          ]
        },
        {
          "name": "testInvalidCenturiesPesel",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "testNullGender",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.PortugueseIdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.PortugueseIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testInvalid",
          "parameterTypes": []
        },
        {
          "name": "testValid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.RomanianIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.RomanianIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checksum",
          "parameterTypes": []
        },
        {
          "name": "countyCode",
          "parameterTypes": []
        },
        {
          "name": "dateOfBirth",
          "parameterTypes": []
        },
        {
          "name": "firstDigit_18xx",
          "parameterTypes": []
        },
        {
          "name": "firstDigit_19xx",
          "parameterTypes": []
        },
        {
          "name": "firstDigit_20xx",
          "parameterTypes": []
        },
        {
          "name": "sample",
          "parameterTypes": []
        },
        {
          "name": "sequenceNumber",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.SingaporeIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.SingaporeIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "centuryPrefix_forCitizens",
          "parameterTypes": []
        },
        {
          "name": "centuryPrefix_forForeigner",
          "parameterTypes": []
        },
        {
          "name": "randomBirthDate_20th_century",
          "parameterTypes": []
        },
        {
          "name": "randomBirthDate_21th_century",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.SouthAfricanIdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.SouthAfricanIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "sequentialNumber_forFemales",
          "parameterTypes": []
        },
        {
          "name": "sequentialNumber_forMales",
          "parameterTypes": []
        },
        {
          "name": "testExistSsn",
          "parameterTypes": []
        },
        {
          "name": "testFakerSsn",
          "parameterTypes": []
        },
        {
          "name": "testSsnFormat",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.SouthKoreanIdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.SouthKoreanIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testValidKoKrRrn",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.SwedenIdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.SwedishIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "invalidSwedishSsn",
          "parameterTypes": []
        },
        {
          "name": "validSwedishSsn",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.UkrainianIdNumber"
    },
    {
      "type": "net.datafaker.idnumbers.UkrainianIdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "invalid",
          "parameterTypes": []
        },
        {
          "name": "valid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.idnumbers.UtilsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "digitAt_parsesGivenCharToNumber",
          "parameterTypes": []
        },
        {
          "name": "digit_parsesGivenCharToNumber",
          "parameterTypes": []
        },
        {
          "name": "multiply_digits",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.integration.FakerIntegrationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "dataParameters",
          "parameterTypes": []
        },
        {
          "name": "testAllFakerMethodsThatReturnStrings",
          "parameterTypes": [
            "java.util.Locale",
            "java.util.Random"
          ]
        },
        {
          "name": "testExceptionsNotCoveredInAboveTest",
          "parameterTypes": [
            "java.util.Locale",
            "java.util.Random"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.integration.FakerIntegrationTest$SkippedMethods"
    },
    {
      "type": "net.datafaker.integration.FakerRepeatabilityIntegrationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "shouldCreateRepeatableValues",
          "parameterTypes": []
        },
        {
          "name": "shouldCreateUniqueValues",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.integration.Issue194SlashFormatRegexTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "enCAZipCodeReturnsProperRegexifiedValue",
          "parameterTypes": []
        },
        {
          "name": "enGBZipCodeReturnsProperRegexifiedValue",
          "parameterTypes": []
        },
        {
          "name": "viZipCodeReturnsProperRegexifiedValue",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.integration.MostSpecificLocaleTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "resolvesTheMostSpecificLocale",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.integration.UkLocalDirectivesTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "resolvesDirectivesOnlyInYmlFile",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.internal.helper.FakerIDNTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "toASCIINoError",
          "parameterTypes": []
        },
        {
          "name": "toASCIIResultIsEmptyException",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.internal.helper.JavaNamesTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "emptyString",
          "parameterTypes": []
        },
        {
          "name": "endingWithUnderscore",
          "parameterTypes": []
        },
        {
          "name": "multipleUnderscoresInRow",
          "parameterTypes": []
        },
        {
          "name": "multipleWordsSeparatedByUnderscores",
          "parameterTypes": []
        },
        {
          "name": "nullString",
          "parameterTypes": []
        },
        {
          "name": "onlyUnderscores",
          "parameterTypes": []
        },
        {
          "name": "singleCharacter",
          "parameterTypes": []
        },
        {
          "name": "singleCharacterUnderscore",
          "parameterTypes": []
        },
        {
          "name": "singleWord",
          "parameterTypes": []
        },
        {
          "name": "upperFirstCharacterWithUnderscores",
          "parameterTypes": []
        },
        {
          "name": "upperFirstCharacterWithoutUnderscores",
          "parameterTypes": []
        },
        {
          "name": "wordStartingWithDigit",
          "parameterTypes": []
        },
        {
          "name": "wordWithDigit",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.internal.helper.SingletonLocale",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "getLocale",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.internal.helper.WordUtilsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "capitalizeNull",
          "parameterTypes": []
        },
        {
          "name": "capitalizeWord",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AbstractProvider",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "resolve",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Address",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "buildingNumber",
          "parameterTypes": []
        },
        {
          "name": "city",
          "parameterTypes": []
        },
        {
          "name": "cityName",
          "parameterTypes": []
        },
        {
          "name": "cityPrefix",
          "parameterTypes": []
        },
        {
          "name": "citySuffix",
          "parameterTypes": []
        },
        {
          "name": "country",
          "parameterTypes": []
        },
        {
          "name": "countryCode",
          "parameterTypes": []
        },
        {
          "name": "fullAddress",
          "parameterTypes": []
        },
        {
          "name": "latLon",
          "parameterTypes": []
        },
        {
          "name": "latitude",
          "parameterTypes": []
        },
        {
          "name": "lonLat",
          "parameterTypes": []
        },
        {
          "name": "longitude",
          "parameterTypes": []
        },
        {
          "name": "mailBox",
          "parameterTypes": []
        },
        {
          "name": "postcode",
          "parameterTypes": []
        },
        {
          "name": "secondaryAddress",
          "parameterTypes": []
        },
        {
          "name": "state",
          "parameterTypes": []
        },
        {
          "name": "stateAbbr",
          "parameterTypes": []
        },
        {
          "name": "streetAddress",
          "parameterTypes": []
        },
        {
          "name": "streetAddressNumber",
          "parameterTypes": []
        },
        {
          "name": "streetName",
          "parameterTypes": []
        },
        {
          "name": "streetPrefix",
          "parameterTypes": []
        },
        {
          "name": "streetSuffix",
          "parameterTypes": []
        },
        {
          "name": "timeZone",
          "parameterTypes": []
        },
        {
          "name": "zipCode",
          "parameterTypes": []
        },
        {
          "name": "zipCodePlus4",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AddressTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "australiaAddress",
          "parameterTypes": []
        },
        {
          "name": "belgianSAddress",
          "parameterTypes": []
        },
        {
          "name": "belgianZipcode",
          "parameterTypes": []
        },
        {
          "name": "cyrillicStreetName",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "dutchAddress",
          "parameterTypes": []
        },
        {
          "name": "fullAddress_estonia",
          "parameterTypes": []
        },
        {
          "name": "testCity",
          "parameterTypes": []
        },
        {
          "name": "testCityCnSuffix",
          "parameterTypes": []
        },
        {
          "name": "testCityName",
          "parameterTypes": []
        },
        {
          "name": "testCityPrefix",
          "parameterTypes": []
        },
        {
          "name": "testCitySuffix",
          "parameterTypes": []
        },
        {
          "name": "testCityWithLocaleFranceAndSeed",
          "parameterTypes": []
        },
        {
          "name": "testCountry",
          "parameterTypes": []
        },
        {
          "name": "testCountryCode",
          "parameterTypes": []
        },
        {
          "name": "testCountyByZipCode",
          "parameterTypes": []
        },
        {
          "name": "testCountyForWrongZipCode",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "testCyrillicStreetName",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "testFullAddress",
          "parameterTypes": []
        },
        {
          "name": "testHungarianZipCodeByState",
          "parameterTypes": []
        },
        {
          "name": "testLatLonEnUs",
          "parameterTypes": []
        },
        {
          "name": "testLatLonNl",
          "parameterTypes": []
        },
        {
          "name": "testLatLonRU",
          "parameterTypes": []
        },
        {
          "name": "testLatinStreetName",
          "parameterTypes": []
        },
        {
          "name": "testLatitude",
          "parameterTypes": []
        },
        {
          "name": "testLocaleLatitude",
          "parameterTypes": []
        },
        {
          "name": "testLocaleLongitude",
          "parameterTypes": []
        },
        {
          "name": "testLonLatEnUs",
          "parameterTypes": []
        },
        {
          "name": "testLonLatNl",
          "parameterTypes": []
        },
        {
          "name": "testLonLatRU",
          "parameterTypes": []
        },
        {
          "name": "testLongitude",
          "parameterTypes": []
        },
        {
          "name": "testMailbox",
          "parameterTypes": []
        },
        {
          "name": "testState",
          "parameterTypes": []
        },
        {
          "name": "testStreetAddressIncludeSecondary",
          "parameterTypes": []
        },
        {
          "name": "testStreetAddressIsANumber",
          "parameterTypes": []
        },
        {
          "name": "testStreetAddressStartsWithNumber",
          "parameterTypes": []
        },
        {
          "name": "testStreetPrefix",
          "parameterTypes": []
        },
        {
          "name": "testStreetSuffix",
          "parameterTypes": []
        },
        {
          "name": "testTimeZone",
          "parameterTypes": []
        },
        {
          "name": "testZipCodeByState",
          "parameterTypes": []
        },
        {
          "name": "testZipIsFiveChars",
          "parameterTypes": []
        },
        {
          "name": "testZipPlus4IsNineDigits",
          "parameterTypes": []
        },
        {
          "name": "testZipPlus4IsTenChars",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Ancient",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "god",
          "parameterTypes": []
        },
        {
          "name": "hero",
          "parameterTypes": []
        },
        {
          "name": "primordial",
          "parameterTypes": []
        },
        {
          "name": "titan",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AncientTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Animal",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "genus",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "scientificName",
          "parameterTypes": []
        },
        {
          "name": "species",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AnimalTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "genus",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "scientificName",
          "parameterTypes": []
        },
        {
          "name": "species",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.App",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "author",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "version",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AppTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testAuthor",
          "parameterTypes": []
        },
        {
          "name": "testVersion",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Appliance",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "brand",
          "parameterTypes": []
        },
        {
          "name": "equipment",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ApplianceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Artist",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ArtistTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Australia",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "animals",
          "parameterTypes": []
        },
        {
          "name": "locations",
          "parameterTypes": []
        },
        {
          "name": "states",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AustraliaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Aviation",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "METAR",
          "parameterTypes": []
        },
        {
          "name": "aircraft",
          "parameterTypes": []
        },
        {
          "name": "airline",
          "parameterTypes": []
        },
        {
          "name": "airplane",
          "parameterTypes": []
        },
        {
          "name": "airport",
          "parameterTypes": []
        },
        {
          "name": "airportName",
          "parameterTypes": []
        },
        {
          "name": "armyHelicopter",
          "parameterTypes": []
        },
        {
          "name": "cargo",
          "parameterTypes": []
        },
        {
          "name": "civilHelicopter",
          "parameterTypes": []
        },
        {
          "name": "engineType",
          "parameterTypes": []
        },
        {
          "name": "flight",
          "parameterTypes": []
        },
        {
          "name": "flight",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "flightStatus",
          "parameterTypes": []
        },
        {
          "name": "gate",
          "parameterTypes": []
        },
        {
          "name": "general",
          "parameterTypes": []
        },
        {
          "name": "manufacturer",
          "parameterTypes": []
        },
        {
          "name": "specialTypeDesignator",
          "parameterTypes": []
        },
        {
          "name": "warplane",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AviationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "aircraft",
          "parameterTypes": []
        },
        {
          "name": "flight_IATA",
          "parameterTypes": []
        },
        {
          "name": "flight_ICAO",
          "parameterTypes": []
        },
        {
          "name": "flight_default",
          "parameterTypes": []
        },
        {
          "name": "gate",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Aws",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "accountId",
          "parameterTypes": []
        },
        {
          "name": "acmARN",
          "parameterTypes": []
        },
        {
          "name": "albARN",
          "parameterTypes": []
        },
        {
          "name": "albTargetGroupARN",
          "parameterTypes": []
        },
        {
          "name": "region",
          "parameterTypes": []
        },
        {
          "name": "route53ZoneId",
          "parameterTypes": []
        },
        {
          "name": "securityGroupId",
          "parameterTypes": []
        },
        {
          "name": "service",
          "parameterTypes": []
        },
        {
          "name": "subnetId",
          "parameterTypes": []
        },
        {
          "name": "vpcId",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AwsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testAccountId",
          "parameterTypes": []
        },
        {
          "name": "testAcmARN",
          "parameterTypes": []
        },
        {
          "name": "testAlbARN",
          "parameterTypes": []
        },
        {
          "name": "testAlbTargetGroupARN",
          "parameterTypes": []
        },
        {
          "name": "testRegion",
          "parameterTypes": []
        },
        {
          "name": "testRoute53ZoneId",
          "parameterTypes": []
        },
        {
          "name": "testSecurityGroupId",
          "parameterTypes": []
        },
        {
          "name": "testSubnetId",
          "parameterTypes": []
        },
        {
          "name": "testVpcId",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Azure",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "appServiceEnvironment",
          "parameterTypes": []
        },
        {
          "name": "appServicePlan",
          "parameterTypes": []
        },
        {
          "name": "applicationGateway",
          "parameterTypes": []
        },
        {
          "name": "bastionHost",
          "parameterTypes": []
        },
        {
          "name": "containerApps",
          "parameterTypes": []
        },
        {
          "name": "containerAppsEnvironment",
          "parameterTypes": []
        },
        {
          "name": "containerInstance",
          "parameterTypes": []
        },
        {
          "name": "containerRegistry",
          "parameterTypes": []
        },
        {
          "name": "cosmosDBDatabase",
          "parameterTypes": []
        },
        {
          "name": "firewall",
          "parameterTypes": []
        },
        {
          "name": "keyVault",
          "parameterTypes": []
        },
        {
          "name": "loadBalancer",
          "parameterTypes": []
        },
        {
          "name": "loadTesting",
          "parameterTypes": []
        },
        {
          "name": "logAnalytics",
          "parameterTypes": []
        },
        {
          "name": "managementGroup",
          "parameterTypes": []
        },
        {
          "name": "mysqlDatabase",
          "parameterTypes": []
        },
        {
          "name": "networkSecurityGroup",
          "parameterTypes": []
        },
        {
          "name": "postgreSQLDatabase",
          "parameterTypes": []
        },
        {
          "name": "region",
          "parameterTypes": []
        },
        {
          "name": "resourceGroup",
          "parameterTypes": []
        },
        {
          "name": "serviceBus",
          "parameterTypes": []
        },
        {
          "name": "serviceBusQueue",
          "parameterTypes": []
        },
        {
          "name": "serviceBusTopic",
          "parameterTypes": []
        },
        {
          "name": "springApps",
          "parameterTypes": []
        },
        {
          "name": "sqlDatabase",
          "parameterTypes": []
        },
        {
          "name": "staticWebApp",
          "parameterTypes": []
        },
        {
          "name": "storageAccount",
          "parameterTypes": []
        },
        {
          "name": "subscriptionId",
          "parameterTypes": []
        },
        {
          "name": "tenantId",
          "parameterTypes": []
        },
        {
          "name": "virtualMachine",
          "parameterTypes": []
        },
        {
          "name": "virtualNetwork",
          "parameterTypes": []
        },
        {
          "name": "virtualWan",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.AzureTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testAccountId",
          "parameterTypes": []
        },
        {
          "name": "testAppServiceEnvironment",
          "parameterTypes": []
        },
        {
          "name": "testAppServicePlan",
          "parameterTypes": []
        },
        {
          "name": "testApplicationGateway",
          "parameterTypes": []
        },
        {
          "name": "testBastionHost",
          "parameterTypes": []
        },
        {
          "name": "testContainerApps",
          "parameterTypes": []
        },
        {
          "name": "testContainerAppsEnvironment",
          "parameterTypes": []
        },
        {
          "name": "testContainerInstance",
          "parameterTypes": []
        },
        {
          "name": "testContainerRegistry",
          "parameterTypes": []
        },
        {
          "name": "testCosmosDBDatabase",
          "parameterTypes": []
        },
        {
          "name": "testFirewall",
          "parameterTypes": []
        },
        {
          "name": "testKeyVault",
          "parameterTypes": []
        },
        {
          "name": "testLoadBalancer",
          "parameterTypes": []
        },
        {
          "name": "testLoadTesting",
          "parameterTypes": []
        },
        {
          "name": "testLogAnalytics",
          "parameterTypes": []
        },
        {
          "name": "testManagementGroup",
          "parameterTypes": []
        },
        {
          "name": "testMysqlDatabase",
          "parameterTypes": []
        },
        {
          "name": "testNetworkSecurityGroup",
          "parameterTypes": []
        },
        {
          "name": "testPostgreSQLDatabase",
          "parameterTypes": []
        },
        {
          "name": "testRegion",
          "parameterTypes": []
        },
        {
          "name": "testResourceGroup",
          "parameterTypes": []
        },
        {
          "name": "testServiceBus",
          "parameterTypes": []
        },
        {
          "name": "testServiceBusQueue",
          "parameterTypes": []
        },
        {
          "name": "testServiceBusTopic",
          "parameterTypes": []
        },
        {
          "name": "testSpringApps",
          "parameterTypes": []
        },
        {
          "name": "testSqlDatabase",
          "parameterTypes": []
        },
        {
          "name": "testStaticWebApp",
          "parameterTypes": []
        },
        {
          "name": "testStorageAccount",
          "parameterTypes": []
        },
        {
          "name": "testTenantId",
          "parameterTypes": []
        },
        {
          "name": "testVirtualMachine",
          "parameterTypes": []
        },
        {
          "name": "testVirtualNetwork",
          "parameterTypes": []
        },
        {
          "name": "testVirtualWan",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Barcode",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "ean13",
          "parameterTypes": []
        },
        {
          "name": "ean8",
          "parameterTypes": []
        },
        {
          "name": "gtin12",
          "parameterTypes": []
        },
        {
          "name": "gtin13",
          "parameterTypes": []
        },
        {
          "name": "gtin14",
          "parameterTypes": []
        },
        {
          "name": "gtin8",
          "parameterTypes": []
        },
        {
          "name": "type",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BarcodeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testEan13",
          "parameterTypes": []
        },
        {
          "name": "testEan13CheckSum",
          "parameterTypes": []
        },
        {
          "name": "testEan8",
          "parameterTypes": []
        },
        {
          "name": "testEan8CheckSum",
          "parameterTypes": []
        },
        {
          "name": "testGtin12CheckSum",
          "parameterTypes": []
        },
        {
          "name": "testGtin12Length",
          "parameterTypes": []
        },
        {
          "name": "testGtin13",
          "parameterTypes": []
        },
        {
          "name": "testGtin14CheckSum",
          "parameterTypes": []
        },
        {
          "name": "testGtin14Length",
          "parameterTypes": []
        },
        {
          "name": "testGtin8",
          "parameterTypes": []
        },
        {
          "name": "type",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BaseFaker",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.service.FakeValuesService",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "bothify",
          "parameterTypes": [
            "java.lang.String",
            "boolean"
          ]
        },
        {
          "name": "csv",
          "parameterTypes": [
            "int",
            "java.lang.String[]"
          ]
        },
        {
          "name": "csv",
          "parameterTypes": [
            "java.lang.String",
            "char",
            "boolean",
            "int",
            "java.lang.String[]"
          ]
        },
        {
          "name": "fakeValuesService",
          "parameterTypes": []
        },
        {
          "name": "getContext",
          "parameterTypes": []
        },
        {
          "name": "getFaker",
          "parameterTypes": []
        },
        {
          "name": "getProvider",
          "parameterTypes": [
            "java.lang.Class",
            "java.util.function.Function"
          ]
        },
        {
          "name": "json",
          "parameterTypes": [
            "java.lang.String[]"
          ]
        },
        {
          "name": "jsona",
          "parameterTypes": [
            "java.lang.String[]"
          ]
        },
        {
          "name": "letterify",
          "parameterTypes": [
            "java.lang.String",
            "boolean"
          ]
        },
        {
          "name": "numerify",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "random",
          "parameterTypes": []
        },
        {
          "name": "regexify",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "templatify",
          "parameterTypes": [
            "java.lang.String",
            "char",
            "java.lang.String[]"
          ]
        },
        {
          "name": "toString",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BaseFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "resetMocks",
          "parameterTypes": []
        },
        {
          "name": "testNoDuplications",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseFakerTest$TestSpec"
          ]
        },
        {
          "name": "testProviderList",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseFakerTest$TestSpec",
            "org.junit.jupiter.api.TestInfo"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BaseFakerTest$TestSpec"
    },
    {
      "type": "net.datafaker.providers.base.BaseProviders",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "address",
          "parameterTypes": []
        },
        {
          "name": "ancient",
          "parameterTypes": []
        },
        {
          "name": "animal",
          "parameterTypes": []
        },
        {
          "name": "app",
          "parameterTypes": []
        },
        {
          "name": "appliance",
          "parameterTypes": []
        },
        {
          "name": "artist",
          "parameterTypes": []
        },
        {
          "name": "australia",
          "parameterTypes": []
        },
        {
          "name": "aviation",
          "parameterTypes": []
        },
        {
          "name": "aws",
          "parameterTypes": []
        },
        {
          "name": "azure",
          "parameterTypes": []
        },
        {
          "name": "barcode",
          "parameterTypes": []
        },
        {
          "name": "bloodtype",
          "parameterTypes": []
        },
        {
          "name": "book",
          "parameterTypes": []
        },
        {
          "name": "bool",
          "parameterTypes": []
        },
        {
          "name": "brand",
          "parameterTypes": []
        },
        {
          "name": "business",
          "parameterTypes": []
        },
        {
          "name": "camera",
          "parameterTypes": []
        },
        {
          "name": "cannabis",
          "parameterTypes": []
        },
        {
          "name": "cat",
          "parameterTypes": []
        },
        {
          "name": "chiquito",
          "parameterTypes": []
        },
        {
          "name": "cnpj",
          "parameterTypes": []
        },
        {
          "name": "code",
          "parameterTypes": []
        },
        {
          "name": "coin",
          "parameterTypes": []
        },
        {
          "name": "color",
          "parameterTypes": []
        },
        {
          "name": "commerce",
          "parameterTypes": []
        },
        {
          "name": "community",
          "parameterTypes": []
        },
        {
          "name": "company",
          "parameterTypes": []
        },
        {
          "name": "compass",
          "parameterTypes": []
        },
        {
          "name": "computer",
          "parameterTypes": []
        },
        {
          "name": "construction",
          "parameterTypes": []
        },
        {
          "name": "cosmere",
          "parameterTypes": []
        },
        {
          "name": "country",
          "parameterTypes": []
        },
        {
          "name": "cpf",
          "parameterTypes": []
        },
        {
          "name": "cryptoCoin",
          "parameterTypes": []
        },
        {
          "name": "cultureSeries",
          "parameterTypes": []
        },
        {
          "name": "currency",
          "parameterTypes": []
        },
        {
          "name": "date",
          "parameterTypes": []
        },
        {
          "name": "dcComics",
          "parameterTypes": []
        },
        {
          "name": "demographic",
          "parameterTypes": []
        },
        {
          "name": "device",
          "parameterTypes": []
        },
        {
          "name": "dog",
          "parameterTypes": []
        },
        {
          "name": "domain",
          "parameterTypes": []
        },
        {
          "name": "drivingLicense",
          "parameterTypes": []
        },
        {
          "name": "drone",
          "parameterTypes": []
        },
        {
          "name": "dungeonsAndDragons",
          "parameterTypes": []
        },
        {
          "name": "duration",
          "parameterTypes": []
        },
        {
          "name": "educator",
          "parameterTypes": []
        },
        {
          "name": "electricalComponents",
          "parameterTypes": []
        },
        {
          "name": "emoji",
          "parameterTypes": []
        },
        {
          "name": "famousLastWords",
          "parameterTypes": []
        },
        {
          "name": "file",
          "parameterTypes": []
        },
        {
          "name": "finance",
          "parameterTypes": []
        },
        {
          "name": "financialTerms",
          "parameterTypes": []
        },
        {
          "name": "funnyName",
          "parameterTypes": []
        },
        {
          "name": "garmentSize",
          "parameterTypes": []
        },
        {
          "name": "gender",
          "parameterTypes": []
        },
        {
          "name": "greekPhilosopher",
          "parameterTypes": []
        },
        {
          "name": "hacker",
          "parameterTypes": []
        },
        {
          "name": "hashing",
          "parameterTypes": []
        },
        {
          "name": "hipster",
          "parameterTypes": []
        },
        {
          "name": "hobby",
          "parameterTypes": []
        },
        {
          "name": "hololive",
          "parameterTypes": []
        },
        {
          "name": "horse",
          "parameterTypes": []
        },
        {
          "name": "house",
          "parameterTypes": []
        },
        {
          "name": "idNumber",
          "parameterTypes": []
        },
        {
          "name": "image",
          "parameterTypes": []
        },
        {
          "name": "industrySegments",
          "parameterTypes": []
        },
        {
          "name": "internet",
          "parameterTypes": []
        },
        {
          "name": "job",
          "parameterTypes": []
        },
        {
          "name": "kpop",
          "parameterTypes": []
        },
        {
          "name": "languageCode",
          "parameterTypes": []
        },
        {
          "name": "largeLanguageModel",
          "parameterTypes": []
        },
        {
          "name": "locality",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "lorem",
          "parameterTypes": []
        },
        {
          "name": "marketing",
          "parameterTypes": []
        },
        {
          "name": "matz",
          "parameterTypes": []
        },
        {
          "name": "mbti",
          "parameterTypes": []
        },
        {
          "name": "measurement",
          "parameterTypes": []
        },
        {
          "name": "medical",
          "parameterTypes": []
        },
        {
          "name": "military",
          "parameterTypes": []
        },
        {
          "name": "money",
          "parameterTypes": []
        },
        {
          "name": "mood",
          "parameterTypes": []
        },
        {
          "name": "mountain",
          "parameterTypes": []
        },
        {
          "name": "mountaineering",
          "parameterTypes": []
        },
        {
          "name": "music",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "nation",
          "parameterTypes": []
        },
        {
          "name": "natoPhoneticAlphabet",
          "parameterTypes": []
        },
        {
          "name": "nigeria",
          "parameterTypes": []
        },
        {
          "name": "number",
          "parameterTypes": []
        },
        {
          "name": "olympicSport",
          "parameterTypes": []
        },
        {
          "name": "passport",
          "parameterTypes": []
        },
        {
          "name": "phoneNumber",
          "parameterTypes": []
        },
        {
          "name": "photography",
          "parameterTypes": []
        },
        {
          "name": "planet",
          "parameterTypes": []
        },
        {
          "name": "programmingLanguage",
          "parameterTypes": []
        },
        {
          "name": "pronouns",
          "parameterTypes": []
        },
        {
          "name": "relationships",
          "parameterTypes": []
        },
        {
          "name": "restaurant",
          "parameterTypes": []
        },
        {
          "name": "robin",
          "parameterTypes": []
        },
        {
          "name": "rockBand",
          "parameterTypes": []
        },
        {
          "name": "science",
          "parameterTypes": []
        },
        {
          "name": "shakespeare",
          "parameterTypes": []
        },
        {
          "name": "sip",
          "parameterTypes": []
        },
        {
          "name": "size",
          "parameterTypes": []
        },
        {
          "name": "slackEmoji",
          "parameterTypes": []
        },
        {
          "name": "space",
          "parameterTypes": []
        },
        {
          "name": "stock",
          "parameterTypes": []
        },
        {
          "name": "subscription",
          "parameterTypes": []
        },
        {
          "name": "superhero",
          "parameterTypes": []
        },
        {
          "name": "team",
          "parameterTypes": []
        },
        {
          "name": "text",
          "parameterTypes": []
        },
        {
          "name": "time",
          "parameterTypes": []
        },
        {
          "name": "timeAndDate",
          "parameterTypes": []
        },
        {
          "name": "tire",
          "parameterTypes": []
        },
        {
          "name": "transport",
          "parameterTypes": []
        },
        {
          "name": "twitter",
          "parameterTypes": []
        },
        {
          "name": "unique",
          "parameterTypes": []
        },
        {
          "name": "university",
          "parameterTypes": []
        },
        {
          "name": "vehicle",
          "parameterTypes": []
        },
        {
          "name": "verb",
          "parameterTypes": []
        },
        {
          "name": "weather",
          "parameterTypes": []
        },
        {
          "name": "word",
          "parameterTypes": []
        },
        {
          "name": "yoda",
          "parameterTypes": []
        },
        {
          "name": "zodiac",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BloodType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "aboTypes",
          "parameterTypes": []
        },
        {
          "name": "bloodGroup",
          "parameterTypes": []
        },
        {
          "name": "pTypes",
          "parameterTypes": []
        },
        {
          "name": "rhTypes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BloodTypeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Book",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "author",
          "parameterTypes": []
        },
        {
          "name": "genre",
          "parameterTypes": []
        },
        {
          "name": "publisher",
          "parameterTypes": []
        },
        {
          "name": "title",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BookTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testAuthor",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Bool",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "bool",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BoolTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testBool",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Brand",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "car",
          "parameterTypes": []
        },
        {
          "name": "sport",
          "parameterTypes": []
        },
        {
          "name": "watch",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BrandTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Business",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "creditCardExpiry",
          "parameterTypes": []
        },
        {
          "name": "creditCardNumber",
          "parameterTypes": []
        },
        {
          "name": "creditCardType",
          "parameterTypes": []
        },
        {
          "name": "securityCode",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.BusinessTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "creditCardExpiry",
          "parameterTypes": []
        },
        {
          "name": "creditCardNumber",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "securityCode",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CNPJ",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "invalid",
          "parameterTypes": []
        },
        {
          "name": "valid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CNPJTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "bug",
          "parameterTypes": []
        },
        {
          "name": "formattedCNPJ",
          "parameterTypes": []
        },
        {
          "name": "invalid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001",
          "parameterTypes": []
        },
        {
          "name": "isInvalidCNPJ",
          "parameterTypes": []
        },
        {
          "name": "isValidCNPJ",
          "parameterTypes": []
        },
        {
          "name": "valid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CPF",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "invalid",
          "parameterTypes": []
        },
        {
          "name": "valid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CPFTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "formattedCPF",
          "parameterTypes": []
        },
        {
          "name": "isInvalidCPF",
          "parameterTypes": []
        },
        {
          "name": "isValidCPF",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Camera",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "brand",
          "parameterTypes": []
        },
        {
          "name": "brandWithModel",
          "parameterTypes": []
        },
        {
          "name": "model",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CameraTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Cannabis",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "brands",
          "parameterTypes": []
        },
        {
          "name": "buzzwords",
          "parameterTypes": []
        },
        {
          "name": "cannabinoidAbbreviations",
          "parameterTypes": []
        },
        {
          "name": "cannabinoids",
          "parameterTypes": []
        },
        {
          "name": "categories",
          "parameterTypes": []
        },
        {
          "name": "healthBenefits",
          "parameterTypes": []
        },
        {
          "name": "medicalUses",
          "parameterTypes": []
        },
        {
          "name": "strains",
          "parameterTypes": []
        },
        {
          "name": "terpenes",
          "parameterTypes": []
        },
        {
          "name": "types",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CannabisTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Cat",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "breed",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "registry",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CatTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Chiquito",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "expressions",
          "parameterTypes": []
        },
        {
          "name": "jokes",
          "parameterTypes": []
        },
        {
          "name": "sentences",
          "parameterTypes": []
        },
        {
          "name": "terms",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ChiquitoTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Code",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "asin",
          "parameterTypes": []
        },
        {
          "name": "ean13",
          "parameterTypes": []
        },
        {
          "name": "ean8",
          "parameterTypes": []
        },
        {
          "name": "gtin13",
          "parameterTypes": []
        },
        {
          "name": "gtin8",
          "parameterTypes": []
        },
        {
          "name": "imei",
          "parameterTypes": []
        },
        {
          "name": "isbn10",
          "parameterTypes": []
        },
        {
          "name": "isbn13",
          "parameterTypes": []
        },
        {
          "name": "isbnGroup",
          "parameterTypes": []
        },
        {
          "name": "isbnGs1",
          "parameterTypes": []
        },
        {
          "name": "isbnRegistrant",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CodeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "asin",
          "parameterTypes": []
        },
        {
          "name": "ean13",
          "parameterTypes": []
        },
        {
          "name": "ean8",
          "parameterTypes": []
        },
        {
          "name": "gtin13",
          "parameterTypes": []
        },
        {
          "name": "gtin8",
          "parameterTypes": []
        },
        {
          "name": "imei",
          "parameterTypes": []
        },
        {
          "name": "isbn10DefaultIsNoSeparator",
          "parameterTypes": []
        },
        {
          "name": "isbn13DefaultIsNoSeparator",
          "parameterTypes": []
        },
        {
          "name": "isbnGroup",
          "parameterTypes": []
        },
        {
          "name": "isbnGs1",
          "parameterTypes": []
        },
        {
          "name": "isbnRegistrant",
          "parameterTypes": []
        },
        {
          "name": "testIsbn10",
          "parameterTypes": []
        },
        {
          "name": "testIsbn13",
          "parameterTypes": []
        },
        {
          "name": "testOverrides",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Coin",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "flip",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CoinTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Color",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "hex",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ColorTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testHex",
          "parameterTypes": []
        },
        {
          "name": "testHexNoHashSign",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Commerce",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "brand",
          "parameterTypes": []
        },
        {
          "name": "department",
          "parameterTypes": []
        },
        {
          "name": "material",
          "parameterTypes": []
        },
        {
          "name": "price",
          "parameterTypes": []
        },
        {
          "name": "productName",
          "parameterTypes": []
        },
        {
          "name": "promotionCode",
          "parameterTypes": []
        },
        {
          "name": "vendor",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CommerceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testDepartment",
          "parameterTypes": []
        },
        {
          "name": "testPrice",
          "parameterTypes": []
        },
        {
          "name": "testPriceMinMax",
          "parameterTypes": []
        },
        {
          "name": "testProductName",
          "parameterTypes": []
        },
        {
          "name": "testPromotionCode",
          "parameterTypes": []
        },
        {
          "name": "testPromotionCodeDigits",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Community",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CommunityTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Company",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "bs",
          "parameterTypes": []
        },
        {
          "name": "buzzword",
          "parameterTypes": []
        },
        {
          "name": "catchPhrase",
          "parameterTypes": []
        },
        {
          "name": "industry",
          "parameterTypes": []
        },
        {
          "name": "logo",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "profession",
          "parameterTypes": []
        },
        {
          "name": "suffix",
          "parameterTypes": []
        },
        {
          "name": "url",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CompanyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testBs",
          "parameterTypes": []
        },
        {
          "name": "testBuzzword",
          "parameterTypes": []
        },
        {
          "name": "testCatchPhrase",
          "parameterTypes": []
        },
        {
          "name": "testLogo",
          "parameterTypes": []
        },
        {
          "name": "testName",
          "parameterTypes": []
        },
        {
          "name": "testUrl",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Compass",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "abbreviation",
          "parameterTypes": []
        },
        {
          "name": "azimuth",
          "parameterTypes": []
        },
        {
          "name": "word",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CompassTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "compassAzimuthWithCompassPoint",
          "parameterTypes": [
            "net.datafaker.providers.base.Compass$CompassPoint"
          ]
        },
        {
          "name": "compassAzimuthWithoutCompassPoint",
          "parameterTypes": []
        },
        {
          "name": "compassDirectionAbbreviationWithCompassPoint",
          "parameterTypes": [
            "net.datafaker.providers.base.Compass$CompassPoint"
          ]
        },
        {
          "name": "compassDirectionAbbreviationWithoutCompassPoint",
          "parameterTypes": []
        },
        {
          "name": "compassDirectionWordWithCompassPoint",
          "parameterTypes": [
            "net.datafaker.providers.base.Compass$CompassPoint"
          ]
        },
        {
          "name": "compassDirectionWordWithoutCompassPoint",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Computer",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "brand",
          "parameterTypes": []
        },
        {
          "name": "linux",
          "parameterTypes": []
        },
        {
          "name": "macos",
          "parameterTypes": []
        },
        {
          "name": "operatingSystem",
          "parameterTypes": []
        },
        {
          "name": "platform",
          "parameterTypes": []
        },
        {
          "name": "type",
          "parameterTypes": []
        },
        {
          "name": "windows",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ComputerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testOperatingSystem",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Construction",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "heavyEquipment",
          "parameterTypes": []
        },
        {
          "name": "materials",
          "parameterTypes": []
        },
        {
          "name": "roles",
          "parameterTypes": []
        },
        {
          "name": "standardCostCodes",
          "parameterTypes": []
        },
        {
          "name": "subcontractCategories",
          "parameterTypes": []
        },
        {
          "name": "trades",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ConstructionTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Cosmere",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "allomancers",
          "parameterTypes": []
        },
        {
          "name": "aons",
          "parameterTypes": []
        },
        {
          "name": "feruchemists",
          "parameterTypes": []
        },
        {
          "name": "heralds",
          "parameterTypes": []
        },
        {
          "name": "knightsRadiant",
          "parameterTypes": []
        },
        {
          "name": "metals",
          "parameterTypes": []
        },
        {
          "name": "shardWorlds",
          "parameterTypes": []
        },
        {
          "name": "shards",
          "parameterTypes": []
        },
        {
          "name": "sprens",
          "parameterTypes": []
        },
        {
          "name": "surges",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CosmereTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Country",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "capital",
          "parameterTypes": []
        },
        {
          "name": "countryCode2",
          "parameterTypes": []
        },
        {
          "name": "countryCode3",
          "parameterTypes": []
        },
        {
          "name": "currency",
          "parameterTypes": []
        },
        {
          "name": "currencyCode",
          "parameterTypes": []
        },
        {
          "name": "flag",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CountryTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testCurrency",
          "parameterTypes": []
        },
        {
          "name": "testCurrencyCode",
          "parameterTypes": []
        },
        {
          "name": "testFlag",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CryptoCoin",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "coin",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CryptoCoinTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CultureSeries",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "books",
          "parameterTypes": []
        },
        {
          "name": "civs",
          "parameterTypes": []
        },
        {
          "name": "cultureShipClassAbvs",
          "parameterTypes": []
        },
        {
          "name": "cultureShipClasses",
          "parameterTypes": []
        },
        {
          "name": "cultureShips",
          "parameterTypes": []
        },
        {
          "name": "planets",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CultureSeriesTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Currency",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "code",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CurrencyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CustomFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "addNonExistingPath",
          "parameterTypes": []
        },
        {
          "name": "addNullExistingPath",
          "parameterTypes": []
        },
        {
          "name": "insectAntTestExpressionFromFile",
          "parameterTypes": []
        },
        {
          "name": "insectBeeTestExpressionFromFile",
          "parameterTypes": []
        },
        {
          "name": "insectBeeTestExpressionFromFileWithoutExtraFaker",
          "parameterTypes": []
        },
        {
          "name": "insectTest",
          "parameterTypes": []
        },
        {
          "name": "insectTestExpression",
          "parameterTypes": []
        },
        {
          "name": "insectTestWithoutExtraFaker",
          "parameterTypes": []
        },
        {
          "name": "testMultipleFakerContextsPerOneClassName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CustomFakerTest$1InsectFaker",
      "methods": [
        {
          "name": "insect",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CustomFakerTest$Insect",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "nextInsectName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CustomFakerTest$InsectFromFile",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "ant",
          "parameterTypes": []
        },
        {
          "name": "bee",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.CustomFakerTest$MyCustomFaker",
      "methods": [
        {
          "name": "insect",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DateAndTime",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "birthday",
          "parameterTypes": []
        },
        {
          "name": "birthday",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "birthdayLocalDate",
          "parameterTypes": []
        },
        {
          "name": "future",
          "parameterTypes": [
            "int",
            "java.util.concurrent.TimeUnit"
          ]
        },
        {
          "name": "past",
          "parameterTypes": [
            "int",
            "java.util.concurrent.TimeUnit"
          ]
        },
        {
          "name": "past",
          "parameterTypes": [
            "int",
            "java.util.concurrent.TimeUnit",
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DateAndTimeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "birthdayWithMask",
          "parameterTypes": []
        },
        {
          "name": "durationTest",
          "parameterTypes": [
            "long",
            "long",
            "java.lang.String"
          ]
        },
        {
          "name": "durationTest",
          "parameterTypes": [
            "long",
            "long",
            "java.time.temporal.ChronoUnit"
          ]
        },
        {
          "name": "durationTest",
          "parameterTypes": [
            "long",
            "java.lang.String"
          ]
        },
        {
          "name": "durationTest",
          "parameterTypes": [
            "long",
            "java.time.temporal.ChronoUnit"
          ]
        },
        {
          "name": "futureWithMask",
          "parameterTypes": []
        },
        {
          "name": "generateDurationsFromStringWithMaxOnly",
          "parameterTypes": []
        },
        {
          "name": "generateDurationsFromStringWithMinMax",
          "parameterTypes": []
        },
        {
          "name": "generateDurationsWithMaxOnly",
          "parameterTypes": []
        },
        {
          "name": "generateDurationsWithMinMax",
          "parameterTypes": []
        },
        {
          "name": "generatePeriod",
          "parameterTypes": []
        },
        {
          "name": "invalidDuration",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "maxLessThanMinPeriod",
          "parameterTypes": [
            "java.time.Period",
            "java.time.Period"
          ]
        },
        {
          "name": "pastWithMask",
          "parameterTypes": []
        },
        {
          "name": "periodTest",
          "parameterTypes": []
        },
        {
          "name": "testBetween",
          "parameterTypes": []
        },
        {
          "name": "testBetweenDateAsArgument",
          "parameterTypes": []
        },
        {
          "name": "testBetweenThenLargerThanNow",
          "parameterTypes": []
        },
        {
          "name": "testBetweenWithMaskReturningString",
          "parameterTypes": []
        },
        {
          "name": "testBirthday",
          "parameterTypes": []
        },
        {
          "name": "testBirthdayWithAges",
          "parameterTypes": []
        },
        {
          "name": "testFutureDate",
          "parameterTypes": []
        },
        {
          "name": "testFutureDateWithMinimum",
          "parameterTypes": []
        },
        {
          "name": "testPastDate",
          "parameterTypes": []
        },
        {
          "name": "testPastDateWithMinimum",
          "parameterTypes": []
        },
        {
          "name": "testPastDateWithReferenceDate",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DcComics",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "hero",
          "parameterTypes": []
        },
        {
          "name": "heroine",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "title",
          "parameterTypes": []
        },
        {
          "name": "villain",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DcComicsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Demographic",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "demonym",
          "parameterTypes": []
        },
        {
          "name": "educationalAttainment",
          "parameterTypes": []
        },
        {
          "name": "maritalStatus",
          "parameterTypes": []
        },
        {
          "name": "race",
          "parameterTypes": []
        },
        {
          "name": "sex",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DemographicTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Device",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "manufacturer",
          "parameterTypes": []
        },
        {
          "name": "modelName",
          "parameterTypes": []
        },
        {
          "name": "platform",
          "parameterTypes": []
        },
        {
          "name": "serial",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DeviceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Dog",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "age",
          "parameterTypes": []
        },
        {
          "name": "breed",
          "parameterTypes": []
        },
        {
          "name": "coatLength",
          "parameterTypes": []
        },
        {
          "name": "gender",
          "parameterTypes": []
        },
        {
          "name": "memePhrase",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "size",
          "parameterTypes": []
        },
        {
          "name": "sound",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DogTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Domain"
    },
    {
      "type": "net.datafaker.providers.base.DomainTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testFirstLevelDomain",
          "parameterTypes": []
        },
        {
          "name": "testFirstLevelDomainNotNull",
          "parameterTypes": []
        },
        {
          "name": "testFullDomain",
          "parameterTypes": []
        },
        {
          "name": "testFullDomainNotNull",
          "parameterTypes": []
        },
        {
          "name": "testSecondLevelDomain",
          "parameterTypes": []
        },
        {
          "name": "testSecondLevelDomainNotNull",
          "parameterTypes": []
        },
        {
          "name": "testValidDomain",
          "parameterTypes": []
        },
        {
          "name": "testValidDomainNotNull",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DrivingLicense"
    },
    {
      "type": "net.datafaker.providers.base.DrivingLicenseTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "drivingLicense",
          "parameterTypes": [
            "net.datafaker.providers.base.DrivingLicenseTest$LicensePattern"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DrivingLicenseTest$LicensePattern"
    },
    {
      "type": "net.datafaker.providers.base.Drone",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "batteryCapacity",
          "parameterTypes": []
        },
        {
          "name": "batteryType",
          "parameterTypes": []
        },
        {
          "name": "batteryVoltage",
          "parameterTypes": []
        },
        {
          "name": "batteryWeight",
          "parameterTypes": []
        },
        {
          "name": "chargingTemperature",
          "parameterTypes": []
        },
        {
          "name": "flightTime",
          "parameterTypes": []
        },
        {
          "name": "iso",
          "parameterTypes": []
        },
        {
          "name": "maxAltitude",
          "parameterTypes": []
        },
        {
          "name": "maxAngularVelocity",
          "parameterTypes": []
        },
        {
          "name": "maxAscentSpeed",
          "parameterTypes": []
        },
        {
          "name": "maxChargingPower",
          "parameterTypes": []
        },
        {
          "name": "maxDescentSpeed",
          "parameterTypes": []
        },
        {
          "name": "maxFlightDistance",
          "parameterTypes": []
        },
        {
          "name": "maxResolution",
          "parameterTypes": []
        },
        {
          "name": "maxShutterSpeed",
          "parameterTypes": []
        },
        {
          "name": "maxSpeed",
          "parameterTypes": []
        },
        {
          "name": "maxTiltAngle",
          "parameterTypes": []
        },
        {
          "name": "maxWindResistance",
          "parameterTypes": []
        },
        {
          "name": "minShutterSpeed",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "operatingTemperature",
          "parameterTypes": []
        },
        {
          "name": "photoFormat",
          "parameterTypes": []
        },
        {
          "name": "shutterSpeedUnits",
          "parameterTypes": []
        },
        {
          "name": "videoFormat",
          "parameterTypes": []
        },
        {
          "name": "weight",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DroneTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "batteryCapacity",
          "parameterTypes": []
        },
        {
          "name": "batteryVoltage",
          "parameterTypes": []
        },
        {
          "name": "batteryWeight",
          "parameterTypes": []
        },
        {
          "name": "chargingTemperature",
          "parameterTypes": []
        },
        {
          "name": "flightTime",
          "parameterTypes": []
        },
        {
          "name": "maxAltitude",
          "parameterTypes": []
        },
        {
          "name": "maxAngularVelocity",
          "parameterTypes": []
        },
        {
          "name": "maxAscentSpeed",
          "parameterTypes": []
        },
        {
          "name": "maxChargingPower",
          "parameterTypes": []
        },
        {
          "name": "maxDescentSpeed",
          "parameterTypes": []
        },
        {
          "name": "maxFlightDistance",
          "parameterTypes": []
        },
        {
          "name": "maxResolution",
          "parameterTypes": []
        },
        {
          "name": "maxSpeed",
          "parameterTypes": []
        },
        {
          "name": "maxTiltAngle",
          "parameterTypes": []
        },
        {
          "name": "maxWindResistance",
          "parameterTypes": []
        },
        {
          "name": "operatingTemperature",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "weight",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DungeonsAndDragons",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "alignments",
          "parameterTypes": []
        },
        {
          "name": "backgrounds",
          "parameterTypes": []
        },
        {
          "name": "cities",
          "parameterTypes": []
        },
        {
          "name": "klasses",
          "parameterTypes": []
        },
        {
          "name": "languages",
          "parameterTypes": []
        },
        {
          "name": "meleeWeapons",
          "parameterTypes": []
        },
        {
          "name": "monsters",
          "parameterTypes": []
        },
        {
          "name": "races",
          "parameterTypes": []
        },
        {
          "name": "rangedWeapons",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DungeonsAndDragonsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.DurationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testDurationDays",
          "parameterTypes": []
        },
        {
          "name": "testDurationHours",
          "parameterTypes": []
        },
        {
          "name": "testDurationMinutes",
          "parameterTypes": []
        },
        {
          "name": "testDurationSeconds",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Educator",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "campus",
          "parameterTypes": []
        },
        {
          "name": "course",
          "parameterTypes": []
        },
        {
          "name": "secondarySchool",
          "parameterTypes": []
        },
        {
          "name": "subjectWithNumber",
          "parameterTypes": []
        },
        {
          "name": "university",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.EducatorTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testCampus",
          "parameterTypes": []
        },
        {
          "name": "testCourse",
          "parameterTypes": []
        },
        {
          "name": "testSecondarySchool",
          "parameterTypes": []
        },
        {
          "name": "testSubjectWithNumber",
          "parameterTypes": []
        },
        {
          "name": "testUniversity",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ElectricalComponents",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "active",
          "parameterTypes": []
        },
        {
          "name": "electromechanical",
          "parameterTypes": []
        },
        {
          "name": "passive",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ElectricalComponentsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Emoji",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "cat",
          "parameterTypes": []
        },
        {
          "name": "smiley",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.EmojiTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FakeDuration"
    },
    {
      "type": "net.datafaker.providers.base.FamousLastWords",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "lastWords",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FamousLastWordsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testLastWords",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.File",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "extension",
          "parameterTypes": []
        },
        {
          "name": "fileName",
          "parameterTypes": []
        },
        {
          "name": "mimeType",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FileTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testExtension",
          "parameterTypes": []
        },
        {
          "name": "testFileName",
          "parameterTypes": []
        },
        {
          "name": "testFileNameSpecifyDir",
          "parameterTypes": []
        },
        {
          "name": "testFileNameSpecifyExtension",
          "parameterTypes": []
        },
        {
          "name": "testFileNameSpecifyName",
          "parameterTypes": []
        },
        {
          "name": "testFileNameSpecifySeparator",
          "parameterTypes": []
        },
        {
          "name": "testMimeTypeFormat",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Finance",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "bic",
          "parameterTypes": []
        },
        {
          "name": "creditCard",
          "parameterTypes": []
        },
        {
          "name": "creditCard",
          "parameterTypes": [
            "net.datafaker.providers.base.Finance$CreditCardType"
          ]
        },
        {
          "name": "iban",
          "parameterTypes": []
        },
        {
          "name": "ibanSupportedCountries",
          "parameterTypes": []
        },
        {
          "name": "nasdaqTicker",
          "parameterTypes": []
        },
        {
          "name": "nyseTicker",
          "parameterTypes": []
        },
        {
          "name": "stockMarket",
          "parameterTypes": []
        },
        {
          "name": "usRoutingNumber",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Finance$CreditCardType",
      "methods": [
        {
          "name": "valueOf",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FinanceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "bic",
          "parameterTypes": []
        },
        {
          "name": "costaRicaIbanMustBeValid",
          "parameterTypes": []
        },
        {
          "name": "creditCard",
          "parameterTypes": []
        },
        {
          "name": "creditCardWithType",
          "parameterTypes": []
        },
        {
          "name": "discoverCard",
          "parameterTypes": []
        },
        {
          "name": "iban",
          "parameterTypes": []
        },
        {
          "name": "ibanCountryCodes",
          "parameterTypes": []
        },
        {
          "name": "ibanWithAllCountryCodes",
          "parameterTypes": []
        },
        {
          "name": "ibanWithCountryCode",
          "parameterTypes": []
        },
        {
          "name": "nasdaqTicker",
          "parameterTypes": []
        },
        {
          "name": "nyseTicker",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "usRoutingNumber",
          "parameterTypes": []
        },
        {
          "name": "visaCard",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FinancialTerms",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "adjective",
          "parameterTypes": []
        },
        {
          "name": "noun",
          "parameterTypes": []
        },
        {
          "name": "verb",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FinancialTermsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "category",
          "parameterTypes": [
            "net.datafaker.providers.base.FinancialTerms$Category"
          ]
        },
        {
          "name": "defaults",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FunnyName",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.FunnyNameTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.GarmentSize",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "size",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.GarmentSizeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Gender",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "binaryTypes",
          "parameterTypes": []
        },
        {
          "name": "shortBinaryTypes",
          "parameterTypes": []
        },
        {
          "name": "types",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.GenderTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.GreekPhilosopher",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.GreekPhilosopherTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testName",
          "parameterTypes": []
        },
        {
          "name": "testQuote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Hacker",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "abbreviation",
          "parameterTypes": []
        },
        {
          "name": "adjective",
          "parameterTypes": []
        },
        {
          "name": "ingverb",
          "parameterTypes": []
        },
        {
          "name": "noun",
          "parameterTypes": []
        },
        {
          "name": "verb",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.HackerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Hashing",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "md2",
          "parameterTypes": []
        },
        {
          "name": "md5",
          "parameterTypes": []
        },
        {
          "name": "sha1",
          "parameterTypes": []
        },
        {
          "name": "sha256",
          "parameterTypes": []
        },
        {
          "name": "sha384",
          "parameterTypes": []
        },
        {
          "name": "sha512",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.HashingTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testMd2",
          "parameterTypes": []
        },
        {
          "name": "testMd5",
          "parameterTypes": []
        },
        {
          "name": "testSha1",
          "parameterTypes": []
        },
        {
          "name": "testSha256",
          "parameterTypes": []
        },
        {
          "name": "testSha384",
          "parameterTypes": []
        },
        {
          "name": "testSha512",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Hipster",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "word",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.HipsterTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Hobby",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "activity",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.HobbyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Hololive",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "talent",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.HololiveTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "talent_jaLocale",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Horse",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "breed",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.HorseTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.House",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "furniture",
          "parameterTypes": []
        },
        {
          "name": "room",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.HouseTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.IdNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "inValidEnZaSsn",
          "parameterTypes": []
        },
        {
          "name": "invalid",
          "parameterTypes": []
        },
        {
          "name": "invalidEsMXSsn",
          "parameterTypes": []
        },
        {
          "name": "invalidPtNif",
          "parameterTypes": []
        },
        {
          "name": "invalidSvSeSsn",
          "parameterTypes": []
        },
        {
          "name": "peselNumber",
          "parameterTypes": []
        },
        {
          "name": "singaporeanFin",
          "parameterTypes": []
        },
        {
          "name": "singaporeanFinBefore2000",
          "parameterTypes": []
        },
        {
          "name": "singaporeanUin",
          "parameterTypes": []
        },
        {
          "name": "singaporeanUinBefore2000",
          "parameterTypes": []
        },
        {
          "name": "ssnValid",
          "parameterTypes": []
        },
        {
          "name": "valid",
          "parameterTypes": []
        },
        {
          "name": "validEnZaSsn",
          "parameterTypes": []
        },
        {
          "name": "validEsMXSsn",
          "parameterTypes": []
        },
        {
          "name": "validGeIDNumber",
          "parameterTypes": []
        },
        {
          "name": "validKoKrRrn",
          "parameterTypes": []
        },
        {
          "name": "validPtNif",
          "parameterTypes": []
        },
        {
          "name": "validSvSeSsn",
          "parameterTypes": []
        },
        {
          "name": "validZhCNSsn",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.IdNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "albanianPersonalCode_invalid",
          "parameterTypes": []
        },
        {
          "name": "albanianPersonalCode_valid",
          "parameterTypes": []
        },
        {
          "name": "bulgarianPersonalCode_invalid",
          "parameterTypes": []
        },
        {
          "name": "bulgarianPersonalCode_valid",
          "parameterTypes": []
        },
        {
          "name": "estonianPersonalCode_invalid",
          "parameterTypes": []
        },
        {
          "name": "estonianPersonalCode_valid",
          "parameterTypes": []
        },
        {
          "name": "macedonianPersonalCode_invalid",
          "parameterTypes": []
        },
        {
          "name": "macedonianPersonalCode_valid",
          "parameterTypes": []
        },
        {
          "name": "moldovaPersonalCode_invalid",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "moldovaPersonalCode_valid",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "romanianPersonalCode_valid",
          "parameterTypes": []
        },
        {
          "name": "southAfrica_invalid",
          "parameterTypes": []
        },
        {
          "name": "southAfrica_valid",
          "parameterTypes": []
        },
        {
          "name": "testInvalid",
          "parameterTypes": []
        },
        {
          "name": "testInvalidSwedishSsn",
          "parameterTypes": []
        },
        {
          "name": "testPeselNumber",
          "parameterTypes": []
        },
        {
          "name": "testSingaporeanFin",
          "parameterTypes": []
        },
        {
          "name": "testSingaporeanFinBefore2000",
          "parameterTypes": []
        },
        {
          "name": "testSingaporeanUin",
          "parameterTypes": []
        },
        {
          "name": "testSingaporeanUinBefore2000",
          "parameterTypes": []
        },
        {
          "name": "testSsnInvalid",
          "parameterTypes": []
        },
        {
          "name": "testSsnValid",
          "parameterTypes": []
        },
        {
          "name": "testValid",
          "parameterTypes": []
        },
        {
          "name": "testValidSwedishSsn",
          "parameterTypes": []
        },
        {
          "name": "ukrainianUznr_invalid",
          "parameterTypes": []
        },
        {
          "name": "ukrainianUznr_valid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Image",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "base64BMP",
          "parameterTypes": []
        },
        {
          "name": "base64GIF",
          "parameterTypes": []
        },
        {
          "name": "base64JPEG",
          "parameterTypes": []
        },
        {
          "name": "base64JPG",
          "parameterTypes": []
        },
        {
          "name": "base64PNG",
          "parameterTypes": []
        },
        {
          "name": "base64SVG",
          "parameterTypes": []
        },
        {
          "name": "base64TIFF",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ImageTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "base64",
          "parameterTypes": [
            "net.datafaker.providers.base.Image$ImageType"
          ]
        },
        {
          "name": "bmp",
          "parameterTypes": []
        },
        {
          "name": "customBase64builder",
          "parameterTypes": []
        },
        {
          "name": "defaultBuilder",
          "parameterTypes": []
        },
        {
          "name": "gif",
          "parameterTypes": []
        },
        {
          "name": "jpeg",
          "parameterTypes": []
        },
        {
          "name": "jpg",
          "parameterTypes": []
        },
        {
          "name": "largeBase64builder",
          "parameterTypes": []
        },
        {
          "name": "png",
          "parameterTypes": []
        },
        {
          "name": "shouldErrorOnIllegalType",
          "parameterTypes": []
        },
        {
          "name": "shouldErrorOnNegativeHeight",
          "parameterTypes": []
        },
        {
          "name": "shouldErrorOnNegativeWidth",
          "parameterTypes": []
        },
        {
          "name": "shouldErrorOnZeroHeight",
          "parameterTypes": []
        },
        {
          "name": "shouldErrorOnZeroWidth",
          "parameterTypes": []
        },
        {
          "name": "svg",
          "parameterTypes": []
        },
        {
          "name": "tiff",
          "parameterTypes": []
        },
        {
          "name": "tinyBase64builder",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.IndustrySegments",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "industry",
          "parameterTypes": []
        },
        {
          "name": "sector",
          "parameterTypes": []
        },
        {
          "name": "subSector",
          "parameterTypes": []
        },
        {
          "name": "superSector",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.IndustrySegmentsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Internet",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "botUserAgentAny",
          "parameterTypes": []
        },
        {
          "name": "domainName",
          "parameterTypes": []
        },
        {
          "name": "domainSuffix",
          "parameterTypes": []
        },
        {
          "name": "domainWord",
          "parameterTypes": []
        },
        {
          "name": "emailAddress",
          "parameterTypes": []
        },
        {
          "name": "emailSubject",
          "parameterTypes": []
        },
        {
          "name": "getIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "getIpV6Address",
          "parameterTypes": []
        },
        {
          "name": "getPrivateIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "getPublicIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "httpMethod",
          "parameterTypes": []
        },
        {
          "name": "image",
          "parameterTypes": []
        },
        {
          "name": "ipV4Address",
          "parameterTypes": []
        },
        {
          "name": "ipV4Cidr",
          "parameterTypes": []
        },
        {
          "name": "ipV6Address",
          "parameterTypes": []
        },
        {
          "name": "ipV6Cidr",
          "parameterTypes": []
        },
        {
          "name": "macAddress",
          "parameterTypes": []
        },
        {
          "name": "password",
          "parameterTypes": []
        },
        {
          "name": "password",
          "parameterTypes": [
            "int",
            "int",
            "boolean",
            "boolean"
          ]
        },
        {
          "name": "port",
          "parameterTypes": []
        },
        {
          "name": "privateIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "publicIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "safeEmailAddress",
          "parameterTypes": []
        },
        {
          "name": "slug",
          "parameterTypes": []
        },
        {
          "name": "url",
          "parameterTypes": []
        },
        {
          "name": "userAgent",
          "parameterTypes": []
        },
        {
          "name": "username",
          "parameterTypes": []
        },
        {
          "name": "uuid",
          "parameterTypes": []
        },
        {
          "name": "uuidv3",
          "parameterTypes": []
        },
        {
          "name": "uuidv4",
          "parameterTypes": []
        },
        {
          "name": "uuidv7",
          "parameterTypes": []
        },
        {
          "name": "webdomain",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.InternetPasswordTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "passwordMix",
          "parameterTypes": []
        },
        {
          "name": "passwordSpecial",
          "parameterTypes": []
        },
        {
          "name": "testPassword1000",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.InternetTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "emailSubject",
          "parameterTypes": []
        },
        {
          "name": "shouldGenerateAPasswordWithMinAndMaxLength",
          "parameterTypes": []
        },
        {
          "name": "testBotUserAgent",
          "parameterTypes": []
        },
        {
          "name": "testDomainName",
          "parameterTypes": []
        },
        {
          "name": "testDomainSuffix",
          "parameterTypes": []
        },
        {
          "name": "testDomainWord",
          "parameterTypes": []
        },
        {
          "name": "testEmailAddress",
          "parameterTypes": []
        },
        {
          "name": "testEmailAddressDoesNotIncludeAccentsInTheLocalPart",
          "parameterTypes": []
        },
        {
          "name": "testEmailAddressWithLocalPartParameter",
          "parameterTypes": []
        },
        {
          "name": "testFarsiIDNs",
          "parameterTypes": []
        },
        {
          "name": "testHttpMethod",
          "parameterTypes": []
        },
        {
          "name": "testImage",
          "parameterTypes": []
        },
        {
          "name": "testImageWithExplicitParams",
          "parameterTypes": []
        },
        {
          "name": "testIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "testIpV4Cidr",
          "parameterTypes": []
        },
        {
          "name": "testIpV6",
          "parameterTypes": []
        },
        {
          "name": "testIpV6Cidr",
          "parameterTypes": []
        },
        {
          "name": "testMacAddress",
          "parameterTypes": []
        },
        {
          "name": "testPassword",
          "parameterTypes": []
        },
        {
          "name": "testPasswordIncludeDigit",
          "parameterTypes": []
        },
        {
          "name": "testPasswordMinLengthMaxLength",
          "parameterTypes": []
        },
        {
          "name": "testPasswordMinLengthMaxLengthIncludeUpperCase",
          "parameterTypes": []
        },
        {
          "name": "testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecial",
          "parameterTypes": []
        },
        {
          "name": "testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecialIncludeDigit",
          "parameterTypes": []
        },
        {
          "name": "testPasswordWithFixedLength",
          "parameterTypes": []
        },
        {
          "name": "testPort",
          "parameterTypes": []
        },
        {
          "name": "testPrivateIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "testPublicIpV4Address",
          "parameterTypes": []
        },
        {
          "name": "testSafeEmailAddress",
          "parameterTypes": []
        },
        {
          "name": "testSafeEmailAddressDoesNotIncludeAccentsInTheLocalPart",
          "parameterTypes": []
        },
        {
          "name": "testSafeEmailAddressWithLocalPartParameter",
          "parameterTypes": []
        },
        {
          "name": "testSlug",
          "parameterTypes": []
        },
        {
          "name": "testSlugWithNull",
          "parameterTypes": []
        },
        {
          "name": "testSlugWithParams",
          "parameterTypes": []
        },
        {
          "name": "testUrl",
          "parameterTypes": []
        },
        {
          "name": "testUserAgent",
          "parameterTypes": []
        },
        {
          "name": "testUsername",
          "parameterTypes": []
        },
        {
          "name": "testUsernameWithSpaces",
          "parameterTypes": []
        },
        {
          "name": "testUuid",
          "parameterTypes": []
        },
        {
          "name": "testUuidv3",
          "parameterTypes": []
        },
        {
          "name": "testUuidv3ConstantRandomSeed",
          "parameterTypes": []
        },
        {
          "name": "testUuidv4",
          "parameterTypes": []
        },
        {
          "name": "testUuidv7",
          "parameterTypes": []
        },
        {
          "name": "testWebdomain",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Job",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "field",
          "parameterTypes": []
        },
        {
          "name": "keySkills",
          "parameterTypes": []
        },
        {
          "name": "position",
          "parameterTypes": []
        },
        {
          "name": "seniority",
          "parameterTypes": []
        },
        {
          "name": "title",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.JobTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Kpop",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "boyBands",
          "parameterTypes": []
        },
        {
          "name": "girlGroups",
          "parameterTypes": []
        },
        {
          "name": "iGroups",
          "parameterTypes": []
        },
        {
          "name": "iiGroups",
          "parameterTypes": []
        },
        {
          "name": "iiiGroups",
          "parameterTypes": []
        },
        {
          "name": "solo",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.KpopTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.LanguageCode",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "iso639",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.LanguageCodeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "languageCodeISO639ShouldBe2LettersInLength",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.LargeLanguageModel",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "embeddingModel",
          "parameterTypes": []
        },
        {
          "name": "textModel",
          "parameterTypes": []
        },
        {
          "name": "tokenizer",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.LargeLanguageModelTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Locality",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "allSupportedLocales",
          "parameterTypes": []
        },
        {
          "name": "displayName",
          "parameterTypes": []
        },
        {
          "name": "localeString",
          "parameterTypes": []
        },
        {
          "name": "localeStringWithoutReplacement",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.LocalityExample"
    },
    {
      "type": "net.datafaker.providers.base.LocalityTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "allSupportedLocales",
          "parameterTypes": []
        },
        {
          "name": "displayName",
          "parameterTypes": []
        },
        {
          "name": "localeString",
          "parameterTypes": []
        },
        {
          "name": "localeStringRandom",
          "parameterTypes": []
        },
        {
          "name": "localeStringWithRandom",
          "parameterTypes": []
        },
        {
          "name": "localeStringWithoutReplacement",
          "parameterTypes": []
        },
        {
          "name": "localeWithoutReplacement",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Location",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "building",
          "parameterTypes": []
        },
        {
          "name": "nature",
          "parameterTypes": []
        },
        {
          "name": "otherworldly",
          "parameterTypes": []
        },
        {
          "name": "privateSpace",
          "parameterTypes": []
        },
        {
          "name": "publicSpace",
          "parameterTypes": []
        },
        {
          "name": "work",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.LocationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Lorem",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "paragraph",
          "parameterTypes": []
        },
        {
          "name": "sentence",
          "parameterTypes": []
        },
        {
          "name": "supplemental",
          "parameterTypes": []
        },
        {
          "name": "word",
          "parameterTypes": []
        },
        {
          "name": "words",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.LoremTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "shouldCreateFixedLengthString",
          "parameterTypes": []
        },
        {
          "name": "testCharacter",
          "parameterTypes": []
        },
        {
          "name": "testCharacterIncludeUpperCase",
          "parameterTypes": []
        },
        {
          "name": "testCharacters",
          "parameterTypes": []
        },
        {
          "name": "testCharactersFixedLengthIncludingUppercaseAndIncludingDigit",
          "parameterTypes": []
        },
        {
          "name": "testCharactersIncludeUpperCase",
          "parameterTypes": []
        },
        {
          "name": "testCharactersMinimumMaximumLength",
          "parameterTypes": []
        },
        {
          "name": "testCharactersMinimumMaximumLengthEquals",
          "parameterTypes": []
        },
        {
          "name": "testCharactersMinimumMaximumLengthEqualsIncludingUppercaseAndIncludingDigit",
          "parameterTypes": []
        },
        {
          "name": "testCharactersMinimumMaximumLengthIncludeUppercase",
          "parameterTypes": []
        },
        {
          "name": "testCharactersMinimumMaximumLengthIncludeUppercaseIncludeDigit",
          "parameterTypes": []
        },
        {
          "name": "testCharactersShouldIncludeMinAndMaxLenght",
          "parameterTypes": []
        },
        {
          "name": "testCharactersWithLength",
          "parameterTypes": []
        },
        {
          "name": "testCharactersWithLengthIncludeUppercase",
          "parameterTypes": []
        },
        {
          "name": "testFixedNumberOfCharactersEmpty",
          "parameterTypes": []
        },
        {
          "name": "testMaxLengthSentence",
          "parameterTypes": []
        },
        {
          "name": "testMaxLengthWithEmptySentence",
          "parameterTypes": []
        },
        {
          "name": "testMaxLengthWithNegativeLengthSentence",
          "parameterTypes": []
        },
        {
          "name": "testSentence",
          "parameterTypes": []
        },
        {
          "name": "testSentenceFixedNumberOfWords",
          "parameterTypes": []
        },
        {
          "name": "testSentenceWithWordCount",
          "parameterTypes": []
        },
        {
          "name": "testSentenceWithWordCountAndRandomWordsToAdd",
          "parameterTypes": []
        },
        {
          "name": "testSentences",
          "parameterTypes": []
        },
        {
          "name": "testSentencesWithCount",
          "parameterTypes": []
        },
        {
          "name": "testWords",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Marketing",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "buzzwords",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MarketingTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Matz",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MatzTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Mbti",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "characteristic",
          "parameterTypes": []
        },
        {
          "name": "merit",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "personage",
          "parameterTypes": []
        },
        {
          "name": "type",
          "parameterTypes": []
        },
        {
          "name": "weakness",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MbtiTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "characteristic",
          "parameterTypes": []
        },
        {
          "name": "merit",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "personage",
          "parameterTypes": []
        },
        {
          "name": "type",
          "parameterTypes": []
        },
        {
          "name": "weakness",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Measurement",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "height",
          "parameterTypes": []
        },
        {
          "name": "length",
          "parameterTypes": []
        },
        {
          "name": "metricHeight",
          "parameterTypes": []
        },
        {
          "name": "metricLength",
          "parameterTypes": []
        },
        {
          "name": "metricVolume",
          "parameterTypes": []
        },
        {
          "name": "metricWeight",
          "parameterTypes": []
        },
        {
          "name": "volume",
          "parameterTypes": []
        },
        {
          "name": "weight",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MeasurementTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Medical",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "diagnosisCode",
          "parameterTypes": []
        },
        {
          "name": "diseaseName",
          "parameterTypes": []
        },
        {
          "name": "hospitalName",
          "parameterTypes": []
        },
        {
          "name": "medicalProfession",
          "parameterTypes": []
        },
        {
          "name": "medicineName",
          "parameterTypes": []
        },
        {
          "name": "procedureCode",
          "parameterTypes": []
        },
        {
          "name": "symptoms",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MedicalTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testDiagnosisCodeAU",
          "parameterTypes": []
        },
        {
          "name": "testDiagnosisCodeNotAustraliaNorUS",
          "parameterTypes": []
        },
        {
          "name": "testDiagnosisCodeUS",
          "parameterTypes": []
        },
        {
          "name": "testProcedureCodes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Military",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "airForceRank",
          "parameterTypes": []
        },
        {
          "name": "armyRank",
          "parameterTypes": []
        },
        {
          "name": "dodPaygrade",
          "parameterTypes": []
        },
        {
          "name": "marinesRank",
          "parameterTypes": []
        },
        {
          "name": "navyRank",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MilitaryTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Money",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "currency",
          "parameterTypes": []
        },
        {
          "name": "currencyCode",
          "parameterTypes": []
        },
        {
          "name": "currencyNumericCode",
          "parameterTypes": []
        },
        {
          "name": "currencySymbol",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MoneyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testCurrency",
          "parameterTypes": []
        },
        {
          "name": "testCurrencyCode",
          "parameterTypes": []
        },
        {
          "name": "testCurrencySymbol",
          "parameterTypes": []
        },
        {
          "name": "testNumericCode",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Mood",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "emotion",
          "parameterTypes": []
        },
        {
          "name": "feeling",
          "parameterTypes": []
        },
        {
          "name": "tone",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MoodTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Mountain",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "range",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MountainTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Mountaineering",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "mountaineer",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MountaineeringTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Music",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "chord",
          "parameterTypes": []
        },
        {
          "name": "genre",
          "parameterTypes": []
        },
        {
          "name": "instrument",
          "parameterTypes": []
        },
        {
          "name": "key",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.MusicTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "chord",
          "parameterTypes": []
        },
        {
          "name": "genre",
          "parameterTypes": []
        },
        {
          "name": "key",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Name",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "femaleFirstName",
          "parameterTypes": []
        },
        {
          "name": "firstName",
          "parameterTypes": []
        },
        {
          "name": "fullName",
          "parameterTypes": []
        },
        {
          "name": "lastName",
          "parameterTypes": []
        },
        {
          "name": "malefirstName",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "nameWithMiddle",
          "parameterTypes": []
        },
        {
          "name": "prefix",
          "parameterTypes": []
        },
        {
          "name": "suffix",
          "parameterTypes": []
        },
        {
          "name": "title",
          "parameterTypes": []
        },
        {
          "name": "username",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.NameTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "test",
          "parameterTypes": []
        },
        {
          "name": "testFemaleFirstName",
          "parameterTypes": []
        },
        {
          "name": "testFirstName",
          "parameterTypes": []
        },
        {
          "name": "testFullName",
          "parameterTypes": []
        },
        {
          "name": "testFullNameArabic",
          "parameterTypes": []
        },
        {
          "name": "testLastName",
          "parameterTypes": []
        },
        {
          "name": "testMaleFirstName",
          "parameterTypes": []
        },
        {
          "name": "testName",
          "parameterTypes": []
        },
        {
          "name": "testNameWithMiddle",
          "parameterTypes": []
        },
        {
          "name": "testNameWithMiddleDoesNotHaveRepeatedName",
          "parameterTypes": []
        },
        {
          "name": "testPrefix",
          "parameterTypes": []
        },
        {
          "name": "testSuffix",
          "parameterTypes": []
        },
        {
          "name": "testTitle",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Nation",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "capitalCity",
          "parameterTypes": []
        },
        {
          "name": "flag",
          "parameterTypes": []
        },
        {
          "name": "isoCountry",
          "parameterTypes": []
        },
        {
          "name": "isoLanguage",
          "parameterTypes": []
        },
        {
          "name": "language",
          "parameterTypes": []
        },
        {
          "name": "nationality",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.NationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "capitalCity",
          "parameterTypes": []
        },
        {
          "name": "flag",
          "parameterTypes": []
        },
        {
          "name": "isoCountry",
          "parameterTypes": []
        },
        {
          "name": "isoLanguage",
          "parameterTypes": []
        },
        {
          "name": "language",
          "parameterTypes": []
        },
        {
          "name": "nationality",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.NatoPhoneticAlphabet",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "codeWord",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.NatoPhoneticAlphabetTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Nigeria",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "celebrities",
          "parameterTypes": []
        },
        {
          "name": "food",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "places",
          "parameterTypes": []
        },
        {
          "name": "schools",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.NigeriaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Number",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "digit",
          "parameterTypes": []
        },
        {
          "name": "negative",
          "parameterTypes": []
        },
        {
          "name": "numberBetween",
          "parameterTypes": [
            "long",
            "long"
          ]
        },
        {
          "name": "positive",
          "parameterTypes": []
        },
        {
          "name": "randomDigit",
          "parameterTypes": []
        },
        {
          "name": "randomDigitNotZero",
          "parameterTypes": []
        },
        {
          "name": "randomNumber",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.NumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "numberBetweenIntIntRandomizationQuality",
          "parameterTypes": []
        },
        {
          "name": "numberBetweenIntIntZeroMinMax",
          "parameterTypes": []
        },
        {
          "name": "numberBetweenLongLongRandomizationQuality",
          "parameterTypes": []
        },
        {
          "name": "numberBetweenLongLongZeroMinMax",
          "parameterTypes": []
        },
        {
          "name": "randomDoubleRandomizationQuality",
          "parameterTypes": []
        },
        {
          "name": "testDigit",
          "parameterTypes": []
        },
        {
          "name": "testDigits",
          "parameterTypes": []
        },
        {
          "name": "testIntNumberBetweenQuality",
          "parameterTypes": []
        },
        {
          "name": "testIntNumberBetweenRepeated",
          "parameterTypes": []
        },
        {
          "name": "testLongBetweenOneAndThree",
          "parameterTypes": []
        },
        {
          "name": "testLongNumberBetweenQuality",
          "parameterTypes": []
        },
        {
          "name": "testLongNumberBetweenRepeated",
          "parameterTypes": []
        },
        {
          "name": "testNegative",
          "parameterTypes": []
        },
        {
          "name": "testNumberBetween",
          "parameterTypes": []
        },
        {
          "name": "testNumberBetweenBorder",
          "parameterTypes": []
        },
        {
          "name": "testNumberBetweenContain",
          "parameterTypes": []
        },
        {
          "name": "testNumberBetweenOneAndThree",
          "parameterTypes": []
        },
        {
          "name": "testPositive",
          "parameterTypes": []
        },
        {
          "name": "testRandomDigit",
          "parameterTypes": []
        },
        {
          "name": "testRandomDigitNotZero",
          "parameterTypes": []
        },
        {
          "name": "testRandomDouble",
          "parameterTypes": []
        },
        {
          "name": "testRandomDoubleMaxEqualsMin",
          "parameterTypes": []
        },
        {
          "name": "testRandomNumber",
          "parameterTypes": []
        },
        {
          "name": "testRandomNumberWithGivenDigitsStrict",
          "parameterTypes": []
        },
        {
          "name": "testRandomNumberWithSingleDigitStrict",
          "parameterTypes": []
        },
        {
          "name": "testRandomNumberWithZeroDigitsStrict",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ObjectMethodsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "methodByName",
          "parameterTypes": []
        },
        {
          "name": "methodByReturnType",
          "parameterTypes": []
        },
        {
          "name": "multipleMethodsWithSameReturnType",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ObjectMethodsTest$Age"
    },
    {
      "type": "net.datafaker.providers.base.ObjectMethodsTest$Person",
      "methods": [
        {
          "name": "age",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ObjectMethodsTest$PersonName",
      "methods": [
        {
          "name": "firstName",
          "parameterTypes": []
        },
        {
          "name": "lastName",
          "parameterTypes": []
        },
        {
          "name": "weight",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.OlympicSport",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "ancientOlympics",
          "parameterTypes": []
        },
        {
          "name": "summerOlympics",
          "parameterTypes": []
        },
        {
          "name": "summerParalympics",
          "parameterTypes": []
        },
        {
          "name": "unusual",
          "parameterTypes": []
        },
        {
          "name": "winterOlympics",
          "parameterTypes": []
        },
        {
          "name": "winterParalympics",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.OlympicSportTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Options",
      "methods": [
        {
          "name": "option",
          "parameterTypes": [
            "java.lang.String[]"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.OptionsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testEmptySubset",
          "parameterTypes": []
        },
        {
          "name": "testNextArrayElement",
          "parameterTypes": []
        },
        {
          "name": "testNextListElement",
          "parameterTypes": []
        },
        {
          "name": "testOptionWithArray",
          "parameterTypes": []
        },
        {
          "name": "testOptionWithEnum",
          "parameterTypes": []
        },
        {
          "name": "testOptionWithVarargs",
          "parameterTypes": []
        },
        {
          "name": "testOptionWithVarargsString",
          "parameterTypes": []
        },
        {
          "name": "testSubset",
          "parameterTypes": []
        },
        {
          "name": "testSubsetWithDuplicate",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.OptionsTest$Day"
    },
    {
      "type": "net.datafaker.providers.base.Passport",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "valid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.PassportTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testDefaultLocale",
          "parameterTypes": []
        },
        {
          "name": "testValidAustralia",
          "parameterTypes": []
        },
        {
          "name": "testValidBulgaria",
          "parameterTypes": []
        },
        {
          "name": "testValidCanada",
          "parameterTypes": []
        },
        {
          "name": "testValidChinese",
          "parameterTypes": []
        },
        {
          "name": "testValidDutch",
          "parameterTypes": []
        },
        {
          "name": "testValidFinland",
          "parameterTypes": []
        },
        {
          "name": "testValidJapan",
          "parameterTypes": []
        },
        {
          "name": "testValidSpain",
          "parameterTypes": []
        },
        {
          "name": "testValidUnitedKingdom",
          "parameterTypes": []
        },
        {
          "name": "testValidUnitedStates",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.PhoneNumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "cellPhone",
          "parameterTypes": []
        },
        {
          "name": "cellPhoneInternational",
          "parameterTypes": []
        },
        {
          "name": "extension",
          "parameterTypes": []
        },
        {
          "name": "phoneNumber",
          "parameterTypes": []
        },
        {
          "name": "phoneNumberInternational",
          "parameterTypes": []
        },
        {
          "name": "phoneNumberNational",
          "parameterTypes": []
        },
        {
          "name": "subscriberNumber",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.PhoneNumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "canadianLocales",
          "parameterTypes": []
        },
        {
          "name": "cellPhone_estonia",
          "parameterTypes": []
        },
        {
          "name": "cellPhone_moldova",
          "parameterTypes": []
        },
        {
          "name": "locales",
          "parameterTypes": []
        },
        {
          "name": "phoneNumberInternational_estonia",
          "parameterTypes": []
        },
        {
          "name": "phoneNumberInternational_moldova",
          "parameterTypes": []
        },
        {
          "name": "phoneNumberNational_estonia",
          "parameterTypes": []
        },
        {
          "name": "phoneNumber_moldova",
          "parameterTypes": []
        },
        {
          "name": "testAllPhoneNumberInternational",
          "parameterTypes": [
            "java.util.Locale"
          ]
        },
        {
          "name": "testAllPhoneNumberMobile",
          "parameterTypes": [
            "java.util.Locale"
          ]
        },
        {
          "name": "testAllPhoneNumberMobileInternational",
          "parameterTypes": [
            "java.util.Locale"
          ]
        },
        {
          "name": "testAllPhoneNumberNational",
          "parameterTypes": [
            "java.util.Locale"
          ]
        },
        {
          "name": "testCellPhone",
          "parameterTypes": []
        },
        {
          "name": "testCellPhone_enUS",
          "parameterTypes": []
        },
        {
          "name": "testExtension",
          "parameterTypes": []
        },
        {
          "name": "testPhoneNumber",
          "parameterTypes": []
        },
        {
          "name": "testPhone_CA",
          "parameterTypes": [
            "java.util.Locale"
          ]
        },
        {
          "name": "testPhone_esMx",
          "parameterTypes": []
        },
        {
          "name": "testSubscriberNumber",
          "parameterTypes": []
        },
        {
          "name": "testSubscriberNumberWithLength",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.PhoneNumberValidityFinderTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "allSupportedLocales",
          "parameterTypes": []
        },
        {
          "name": "testAllCellPhoneForLocale",
          "parameterTypes": []
        },
        {
          "name": "testAllPhoneNumbers",
          "parameterTypes": [
            "java.util.Locale"
          ]
        },
        {
          "name": "testValidNumber",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Photography",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "aperture",
          "parameterTypes": []
        },
        {
          "name": "brand",
          "parameterTypes": []
        },
        {
          "name": "camera",
          "parameterTypes": []
        },
        {
          "name": "genre",
          "parameterTypes": []
        },
        {
          "name": "imageTag",
          "parameterTypes": []
        },
        {
          "name": "iso",
          "parameterTypes": []
        },
        {
          "name": "lens",
          "parameterTypes": []
        },
        {
          "name": "shutter",
          "parameterTypes": []
        },
        {
          "name": "term",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.PhotographyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Planet",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "atmosphericComposition",
          "parameterTypes": []
        },
        {
          "name": "axialTilt",
          "parameterTypes": []
        },
        {
          "name": "classification",
          "parameterTypes": []
        },
        {
          "name": "density",
          "parameterTypes": []
        },
        {
          "name": "discoveryYear",
          "parameterTypes": []
        },
        {
          "name": "eccentricity",
          "parameterTypes": []
        },
        {
          "name": "equatorialGravity",
          "parameterTypes": []
        },
        {
          "name": "equatorialRadius",
          "parameterTypes": []
        },
        {
          "name": "escapeVelocity",
          "parameterTypes": []
        },
        {
          "name": "gravitationParameters",
          "parameterTypes": []
        },
        {
          "name": "inclination",
          "parameterTypes": []
        },
        {
          "name": "lengthOfDay",
          "parameterTypes": []
        },
        {
          "name": "mass",
          "parameterTypes": []
        },
        {
          "name": "meanAirTemperature",
          "parameterTypes": []
        },
        {
          "name": "meanDistanceFromTheSun",
          "parameterTypes": []
        },
        {
          "name": "meanOrbitalSpeed",
          "parameterTypes": []
        },
        {
          "name": "meanSurfaceTemperature",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "numberOfKnownMoons",
          "parameterTypes": []
        },
        {
          "name": "orbitalPeriod",
          "parameterTypes": []
        },
        {
          "name": "planetaryDiscriminant",
          "parameterTypes": []
        },
        {
          "name": "rings",
          "parameterTypes": []
        },
        {
          "name": "rotationPeriod",
          "parameterTypes": []
        },
        {
          "name": "surfaceArea",
          "parameterTypes": []
        },
        {
          "name": "symbol",
          "parameterTypes": []
        },
        {
          "name": "volume",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.PlanetTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "shouldHaveNinePlanets",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectEarthMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectJupiterMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectMarsMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectMercuryMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectNeptuneMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectPlutoMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectSaturnMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectUranusMetadata",
          "parameterTypes": []
        },
        {
          "name": "shouldReturnCorrectVenusMetadata",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ProgrammingLanguage",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "creator",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ProgrammingLanguageTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Pronouns",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "objective",
          "parameterTypes": []
        },
        {
          "name": "possessive",
          "parameterTypes": []
        },
        {
          "name": "reflexive",
          "parameterTypes": []
        },
        {
          "name": "subjective",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.PronounsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ProviderRegistration",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "options",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.RandomFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "before",
          "parameterTypes": []
        },
        {
          "name": "testEmailRandomnessCanBeControlled",
          "parameterTypes": []
        },
        {
          "name": "testLetterifyRandomnessCanBeControlled",
          "parameterTypes": []
        },
        {
          "name": "testNameRandomnessCanBeControlled",
          "parameterTypes": []
        },
        {
          "name": "testNumerifyRandomnessCanBeControlled",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Relationship",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "any",
          "parameterTypes": []
        },
        {
          "name": "direct",
          "parameterTypes": []
        },
        {
          "name": "extended",
          "parameterTypes": []
        },
        {
          "name": "inLaw",
          "parameterTypes": []
        },
        {
          "name": "parent",
          "parameterTypes": []
        },
        {
          "name": "sibling",
          "parameterTypes": []
        },
        {
          "name": "spouse",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.RelationshipTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "anyTest",
          "parameterTypes": []
        },
        {
          "name": "anyWithIllegalArgumentExceptionThrown",
          "parameterTypes": []
        },
        {
          "name": "anyWithInvocationTargetExceptionThrown",
          "parameterTypes": []
        },
        {
          "name": "beforeEach",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Restaurant",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "description",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "namePrefix",
          "parameterTypes": []
        },
        {
          "name": "nameSuffix",
          "parameterTypes": []
        },
        {
          "name": "review",
          "parameterTypes": []
        },
        {
          "name": "type",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.RestaurantTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "namePrefix",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Robin",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.RobinTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.RockBand",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "name",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.RockBandTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Science",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "bosons",
          "parameterTypes": []
        },
        {
          "name": "element",
          "parameterTypes": []
        },
        {
          "name": "elementSymbol",
          "parameterTypes": []
        },
        {
          "name": "leptons",
          "parameterTypes": []
        },
        {
          "name": "quark",
          "parameterTypes": []
        },
        {
          "name": "scientist",
          "parameterTypes": []
        },
        {
          "name": "tool",
          "parameterTypes": []
        },
        {
          "name": "unit",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ScienceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "bosons",
          "parameterTypes": []
        },
        {
          "name": "element",
          "parameterTypes": []
        },
        {
          "name": "elementSymbol",
          "parameterTypes": []
        },
        {
          "name": "leptons",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "quark",
          "parameterTypes": []
        },
        {
          "name": "scientist",
          "parameterTypes": []
        },
        {
          "name": "tool",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Shakespeare",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "asYouLikeItQuote",
          "parameterTypes": []
        },
        {
          "name": "hamletQuote",
          "parameterTypes": []
        },
        {
          "name": "kingRichardIIIQuote",
          "parameterTypes": []
        },
        {
          "name": "romeoAndJulietQuote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ShakespeareTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testAsYouLikeItQuote",
          "parameterTypes": []
        },
        {
          "name": "testHamletQuote",
          "parameterTypes": []
        },
        {
          "name": "testKingRichardIIIQuote",
          "parameterTypes": []
        },
        {
          "name": "testRomeoAndJulietQuote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Sip",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "bodyBytes",
          "parameterTypes": []
        },
        {
          "name": "bodyString",
          "parameterTypes": []
        },
        {
          "name": "clientErrorResponseCode",
          "parameterTypes": []
        },
        {
          "name": "clientErrorResponsePhrase",
          "parameterTypes": []
        },
        {
          "name": "contentType",
          "parameterTypes": []
        },
        {
          "name": "globalErrorResponseCode",
          "parameterTypes": []
        },
        {
          "name": "globalErrorResponsePhrase",
          "parameterTypes": []
        },
        {
          "name": "messagingPort",
          "parameterTypes": []
        },
        {
          "name": "method",
          "parameterTypes": []
        },
        {
          "name": "nameAddress",
          "parameterTypes": []
        },
        {
          "name": "provisionalResponseCode",
          "parameterTypes": []
        },
        {
          "name": "provisionalResponsePhrase",
          "parameterTypes": []
        },
        {
          "name": "redirectResponseCode",
          "parameterTypes": []
        },
        {
          "name": "redirectResponsePhrase",
          "parameterTypes": []
        },
        {
          "name": "rtpPort",
          "parameterTypes": []
        },
        {
          "name": "serverErrorResponseCode",
          "parameterTypes": []
        },
        {
          "name": "serverErrorResponsePhrase",
          "parameterTypes": []
        },
        {
          "name": "successResponseCode",
          "parameterTypes": []
        },
        {
          "name": "successResponsePhrase",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.SipTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "bodyBytes_isNotNull",
          "parameterTypes": []
        },
        {
          "name": "bodyString_returnAValidSdpBodyString",
          "parameterTypes": []
        },
        {
          "name": "clientErrorResponseCode_Codereturn3DigitIntBetween400And499",
          "parameterTypes": []
        },
        {
          "name": "clientErrorResponsePhrase_returnAnyNonDigitString",
          "parameterTypes": []
        },
        {
          "name": "contentType_returnLowerCaseTwoWordsSepereatedBySlashMinimum3And4Chars",
          "parameterTypes": []
        },
        {
          "name": "globalErrorResponseCode_Codereturn3DigitIntBetween600And699",
          "parameterTypes": []
        },
        {
          "name": "globalErrorResponsePhrase_returnAnyNonDigitString",
          "parameterTypes": []
        },
        {
          "name": "messagingPort_return4DigitIntBetween1000And9999",
          "parameterTypes": []
        },
        {
          "name": "method_returnUpperCaseWithMinimum3Chars",
          "parameterTypes": []
        },
        {
          "name": "nameAddress_returnValidNameAddressString",
          "parameterTypes": []
        },
        {
          "name": "provisionalResponseCode_return3DigitIntBetween100And199",
          "parameterTypes": []
        },
        {
          "name": "provisionalResponsePhrase_returnAnyNonDigitString",
          "parameterTypes": []
        },
        {
          "name": "redirectResponseCode_Codereturn3DigitIntBetween300And399",
          "parameterTypes": []
        },
        {
          "name": "redirectResponsePhrase_returnAnyNonDigitString",
          "parameterTypes": []
        },
        {
          "name": "rtpPort_returnPositiveEvenInt",
          "parameterTypes": []
        },
        {
          "name": "serverErrorResponseCode_Codereturn3DigitIntBetween500And599",
          "parameterTypes": []
        },
        {
          "name": "serverErrorResponsePhrase_returnAnyNonDigitString",
          "parameterTypes": []
        },
        {
          "name": "successResponsePhrase_returnAnyNonDigitString",
          "parameterTypes": []
        },
        {
          "name": "successResponse_Codereturn3DigitIntBetween200And299",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Size",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "adjective",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.SizeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.SlackEmoji",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "activity",
          "parameterTypes": []
        },
        {
          "name": "celebration",
          "parameterTypes": []
        },
        {
          "name": "custom",
          "parameterTypes": []
        },
        {
          "name": "emoji",
          "parameterTypes": []
        },
        {
          "name": "foodAndDrink",
          "parameterTypes": []
        },
        {
          "name": "nature",
          "parameterTypes": []
        },
        {
          "name": "objectsAndSymbols",
          "parameterTypes": []
        },
        {
          "name": "people",
          "parameterTypes": []
        },
        {
          "name": "travelAndPlaces",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.SlackEmojiTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "activity",
          "parameterTypes": []
        },
        {
          "name": "celebration",
          "parameterTypes": []
        },
        {
          "name": "custom",
          "parameterTypes": []
        },
        {
          "name": "emoji",
          "parameterTypes": []
        },
        {
          "name": "food_and_drink",
          "parameterTypes": []
        },
        {
          "name": "nature",
          "parameterTypes": []
        },
        {
          "name": "objects_and_symbols",
          "parameterTypes": []
        },
        {
          "name": "people",
          "parameterTypes": []
        },
        {
          "name": "travel_and_places",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Space",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "agency",
          "parameterTypes": []
        },
        {
          "name": "agencyAbbreviation",
          "parameterTypes": []
        },
        {
          "name": "company",
          "parameterTypes": []
        },
        {
          "name": "constellation",
          "parameterTypes": []
        },
        {
          "name": "distanceMeasurement",
          "parameterTypes": []
        },
        {
          "name": "galaxy",
          "parameterTypes": []
        },
        {
          "name": "meteorite",
          "parameterTypes": []
        },
        {
          "name": "moon",
          "parameterTypes": []
        },
        {
          "name": "nasaSpaceCraft",
          "parameterTypes": []
        },
        {
          "name": "nebula",
          "parameterTypes": []
        },
        {
          "name": "planet",
          "parameterTypes": []
        },
        {
          "name": "star",
          "parameterTypes": []
        },
        {
          "name": "starCluster",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.SpaceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "distanceMeasurement",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Stock",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "exchanges",
          "parameterTypes": []
        },
        {
          "name": "lseSymbol",
          "parameterTypes": []
        },
        {
          "name": "nsdqSymbol",
          "parameterTypes": []
        },
        {
          "name": "nseSymbol",
          "parameterTypes": []
        },
        {
          "name": "nyseSymbol",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.StockTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Subscription",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "paymentMethods",
          "parameterTypes": []
        },
        {
          "name": "paymentTerms",
          "parameterTypes": []
        },
        {
          "name": "plans",
          "parameterTypes": []
        },
        {
          "name": "statuses",
          "parameterTypes": []
        },
        {
          "name": "subscriptionTerms",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.SubscriptionTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Superhero",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "descriptor",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "power",
          "parameterTypes": []
        },
        {
          "name": "prefix",
          "parameterTypes": []
        },
        {
          "name": "suffix",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.SuperheroTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Team",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "creature",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "sport",
          "parameterTypes": []
        },
        {
          "name": "state",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.TeamTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testName",
          "parameterTypes": []
        },
        {
          "name": "testState",
          "parameterTypes": []
        },
        {
          "name": "testStateWithZaLocale",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Text",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "lowercaseCharacter",
          "parameterTypes": []
        },
        {
          "name": "text",
          "parameterTypes": []
        },
        {
          "name": "uppercaseCharacter",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.TextTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "everyTextShouldContainLowerCaseUpperCaseAndDigit",
          "parameterTypes": []
        },
        {
          "name": "exceptionIfLengthIsShorterThanNumberOfRequiredSymbols",
          "parameterTypes": []
        },
        {
          "name": "testCharacter",
          "parameterTypes": []
        },
        {
          "name": "testDefaultLengthText",
          "parameterTypes": []
        },
        {
          "name": "testFixedLengthText",
          "parameterTypes": []
        },
        {
          "name": "testLowercaseCharacter",
          "parameterTypes": []
        },
        {
          "name": "testUppercaseCharacter",
          "parameterTypes": []
        },
        {
          "name": "textShouldContain3RULowerCaseAnd5CustomSpecialSymbols",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Time"
    },
    {
      "type": "net.datafaker.providers.base.TimeAndDate",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "birthday",
          "parameterTypes": []
        },
        {
          "name": "future",
          "parameterTypes": []
        },
        {
          "name": "past",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.TimeAndDateTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "birthdayWithMask",
          "parameterTypes": []
        },
        {
          "name": "durationTest",
          "parameterTypes": [
            "long",
            "long",
            "java.time.temporal.ChronoUnit"
          ]
        },
        {
          "name": "durationTest",
          "parameterTypes": [
            "long",
            "java.time.temporal.ChronoUnit"
          ]
        },
        {
          "name": "futureWithMask",
          "parameterTypes": []
        },
        {
          "name": "generateDurationsWithMaxOnly",
          "parameterTypes": []
        },
        {
          "name": "generateDurationsWithMinMax",
          "parameterTypes": []
        },
        {
          "name": "generatePeriod",
          "parameterTypes": []
        },
        {
          "name": "maxLessThanMinPeriod",
          "parameterTypes": [
            "java.time.Period",
            "java.time.Period"
          ]
        },
        {
          "name": "pastWithMask",
          "parameterTypes": []
        },
        {
          "name": "periodTest",
          "parameterTypes": []
        },
        {
          "name": "testBetween",
          "parameterTypes": []
        },
        {
          "name": "testBetweenThenLargerThanNow",
          "parameterTypes": []
        },
        {
          "name": "testBetweenWithMaskReturningString",
          "parameterTypes": []
        },
        {
          "name": "testBirthday",
          "parameterTypes": []
        },
        {
          "name": "testBirthdayWithAges",
          "parameterTypes": []
        },
        {
          "name": "testFutureDate",
          "parameterTypes": []
        },
        {
          "name": "testFutureDateWithBounds",
          "parameterTypes": []
        },
        {
          "name": "testFutureDateWithMinimum",
          "parameterTypes": []
        },
        {
          "name": "testPastDate",
          "parameterTypes": []
        },
        {
          "name": "testPastDateWithBounds",
          "parameterTypes": []
        },
        {
          "name": "testPastDateWithMinimum",
          "parameterTypes": []
        },
        {
          "name": "testPastDateWithReferenceDate",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.TimeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "futureWithMask",
          "parameterTypes": []
        },
        {
          "name": "pastWithMask",
          "parameterTypes": []
        },
        {
          "name": "testBetween",
          "parameterTypes": []
        },
        {
          "name": "testBetweenThenLargerThanNow",
          "parameterTypes": []
        },
        {
          "name": "testBetweenWithMask",
          "parameterTypes": []
        },
        {
          "name": "testBetweenWithSameLocalTime",
          "parameterTypes": []
        },
        {
          "name": "testFutureTime",
          "parameterTypes": []
        },
        {
          "name": "testFutureTimeWithMinimum",
          "parameterTypes": []
        },
        {
          "name": "testPastTime",
          "parameterTypes": []
        },
        {
          "name": "testPastTimeWithMinimum",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Tire",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "aspectRatio",
          "parameterTypes": []
        },
        {
          "name": "code",
          "parameterTypes": []
        },
        {
          "name": "construction",
          "parameterTypes": []
        },
        {
          "name": "loadIndex",
          "parameterTypes": []
        },
        {
          "name": "rimSize",
          "parameterTypes": []
        },
        {
          "name": "speedrating",
          "parameterTypes": []
        },
        {
          "name": "vehicleType",
          "parameterTypes": []
        },
        {
          "name": "width",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.TireTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testDefaultPrefixedCode",
          "parameterTypes": []
        },
        {
          "name": "testMiscPrefixedCode",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Transport",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "type",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.TransportTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Twitter",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "userId",
          "parameterTypes": []
        },
        {
          "name": "userName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.TwitterTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "linkTestKeyWords",
          "parameterTypes": []
        },
        {
          "name": "linkTestRules",
          "parameterTypes": []
        },
        {
          "name": "testCreatedDateBackward",
          "parameterTypes": []
        },
        {
          "name": "testCreatedDateForward",
          "parameterTypes": []
        },
        {
          "name": "testLongTwitterIdLength",
          "parameterTypes": []
        },
        {
          "name": "testShortTwitterIdLength",
          "parameterTypes": []
        },
        {
          "name": "testTextKeyWords",
          "parameterTypes": []
        },
        {
          "name": "testTextLength",
          "parameterTypes": []
        },
        {
          "name": "testTwitterIdLength",
          "parameterTypes": []
        },
        {
          "name": "testTwitterIdUnique",
          "parameterTypes": []
        },
        {
          "name": "userId",
          "parameterTypes": []
        },
        {
          "name": "username",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Unique"
    },
    {
      "type": "net.datafaker.providers.base.UniqueTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldConvertBooleansToStrings",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldConvertDecimalsToStrings",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldConvertIntegersToStrings",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldNotInterfereWithValuesReturnedFromOtherFakers",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldReturnValuesBasedOnKeyAndLocale",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldReturnValuesInRandomOrderUsingRandomService",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldThrowExceptionWhenAllPossibleValuesHaveBeenReturned",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldThrowExceptionWhenListOfListsFoundForKey",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldThrowExceptionWhenNoValuesFoundForKey",
          "parameterTypes": []
        },
        {
          "name": "fetchFromYaml_shouldThrowExceptionWhenNonListValueFoundForKey",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.University",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "degree",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "prefix",
          "parameterTypes": []
        },
        {
          "name": "suffix",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.UniversityTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Vehicle",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "carOptions",
          "parameterTypes": []
        },
        {
          "name": "carType",
          "parameterTypes": []
        },
        {
          "name": "color",
          "parameterTypes": []
        },
        {
          "name": "doors",
          "parameterTypes": []
        },
        {
          "name": "driveType",
          "parameterTypes": []
        },
        {
          "name": "engine",
          "parameterTypes": []
        },
        {
          "name": "fuelType",
          "parameterTypes": []
        },
        {
          "name": "licensePlate",
          "parameterTypes": []
        },
        {
          "name": "make",
          "parameterTypes": []
        },
        {
          "name": "makeAndModel",
          "parameterTypes": []
        },
        {
          "name": "manufacturer",
          "parameterTypes": []
        },
        {
          "name": "model",
          "parameterTypes": []
        },
        {
          "name": "standardSpecs",
          "parameterTypes": []
        },
        {
          "name": "style",
          "parameterTypes": []
        },
        {
          "name": "transmission",
          "parameterTypes": []
        },
        {
          "name": "upholstery",
          "parameterTypes": []
        },
        {
          "name": "upholsteryColor",
          "parameterTypes": []
        },
        {
          "name": "upholsteryFabric",
          "parameterTypes": []
        },
        {
          "name": "vin",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.VehicleTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testCarOptions",
          "parameterTypes": []
        },
        {
          "name": "testCarOptionsMinMax",
          "parameterTypes": []
        },
        {
          "name": "testCarType",
          "parameterTypes": []
        },
        {
          "name": "testColor",
          "parameterTypes": []
        },
        {
          "name": "testDoor",
          "parameterTypes": []
        },
        {
          "name": "testDriveType",
          "parameterTypes": []
        },
        {
          "name": "testEngine",
          "parameterTypes": []
        },
        {
          "name": "testFuelType",
          "parameterTypes": []
        },
        {
          "name": "testLicensePlate",
          "parameterTypes": []
        },
        {
          "name": "testLicensePlateWithParam",
          "parameterTypes": []
        },
        {
          "name": "testLicensePlateWithParam_Canada",
          "parameterTypes": []
        },
        {
          "name": "testMake",
          "parameterTypes": []
        },
        {
          "name": "testMakeAndModel",
          "parameterTypes": []
        },
        {
          "name": "testManufacturer",
          "parameterTypes": []
        },
        {
          "name": "testModel",
          "parameterTypes": []
        },
        {
          "name": "testModelWithParams",
          "parameterTypes": []
        },
        {
          "name": "testStandardSpecs",
          "parameterTypes": []
        },
        {
          "name": "testStandardSpecsMinMax",
          "parameterTypes": []
        },
        {
          "name": "testStyle",
          "parameterTypes": []
        },
        {
          "name": "testTransmission",
          "parameterTypes": []
        },
        {
          "name": "testUpholstery",
          "parameterTypes": []
        },
        {
          "name": "testUpholsteryColor",
          "parameterTypes": []
        },
        {
          "name": "testUpholsteryFabric",
          "parameterTypes": []
        },
        {
          "name": "testVin",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Verb",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "base",
          "parameterTypes": []
        },
        {
          "name": "ingForm",
          "parameterTypes": []
        },
        {
          "name": "past",
          "parameterTypes": []
        },
        {
          "name": "pastParticiple",
          "parameterTypes": []
        },
        {
          "name": "simplePresent",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.VerbTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testBase",
          "parameterTypes": []
        },
        {
          "name": "testIngForm",
          "parameterTypes": []
        },
        {
          "name": "testPast",
          "parameterTypes": []
        },
        {
          "name": "testPastParticiple",
          "parameterTypes": []
        },
        {
          "name": "testSimplePresent",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Weather",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "description",
          "parameterTypes": []
        },
        {
          "name": "temperatureCelsius",
          "parameterTypes": []
        },
        {
          "name": "temperatureFahrenheit",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.WeatherTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "temperatureCelsius",
          "parameterTypes": []
        },
        {
          "name": "temperatureCelsiusInRange",
          "parameterTypes": []
        },
        {
          "name": "temperatureFahrenheit",
          "parameterTypes": []
        },
        {
          "name": "temperatureFahrenheitInRange",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Word",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "adjective",
          "parameterTypes": []
        },
        {
          "name": "adverb",
          "parameterTypes": []
        },
        {
          "name": "conjunction",
          "parameterTypes": []
        },
        {
          "name": "interjection",
          "parameterTypes": []
        },
        {
          "name": "noun",
          "parameterTypes": []
        },
        {
          "name": "preposition",
          "parameterTypes": []
        },
        {
          "name": "verb",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.WordTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Yoda",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.YodaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.Zodiac",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "sign",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.base.ZodiacTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.AquaTeenHungerForce",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.AquaTeenHungerForceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Avatar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "image",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.AvatarTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testAvatar",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Babylon5",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Babylon5Test",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BackToTheFuture",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "date",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BackToTheFutureTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BigBangTheory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BigBangTheoryTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Boardgame",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.base.BaseProviders"
          ]
        },
        {
          "name": "artist",
          "parameterTypes": []
        },
        {
          "name": "category",
          "parameterTypes": []
        },
        {
          "name": "designer",
          "parameterTypes": []
        },
        {
          "name": "mechanic",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "publisher",
          "parameterTypes": []
        },
        {
          "name": "subdomain",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BoardgameTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BojackHorseman",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        },
        {
          "name": "tongueTwisters",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BojackHorsemanTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BossaNova",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "artist",
          "parameterTypes": []
        },
        {
          "name": "song",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BossaNovaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BreakingBad",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "episode",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BreakingBadTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BrooklynNineNine",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BrooklynNineNineTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Buffy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "bigBads",
          "parameterTypes": []
        },
        {
          "name": "celebrities",
          "parameterTypes": []
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "episodes",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.BuffyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.ChuckNorris",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "fact",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.ChuckNorrisTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.CowboyBebop",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "episode",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "song",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.CowboyBebopTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Departed",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actor",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DepartedTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DetectiveConan",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "gadgets",
          "parameterTypes": []
        },
        {
          "name": "vehicles",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DetectiveConanTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DoctorWho",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actor",
          "parameterTypes": []
        },
        {
          "name": "catchPhrase",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "doctor",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "species",
          "parameterTypes": []
        },
        {
          "name": "villain",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DoctorWhoTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Doraemon",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "gadget",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DoraemonTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DragonBall",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DragonBallTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DumbAndDumber",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actor",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DumbAndDumberTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Dune",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "planet",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "saying",
          "parameterTypes": []
        },
        {
          "name": "title",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.DuneTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.EntertainmentFaker"
    },
    {
      "type": "net.datafaker.providers.entertainment.EntertainmentFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.EntertainmentProviders",
      "methods": [
        {
          "name": "aquaTeenHungerForce",
          "parameterTypes": []
        },
        {
          "name": "avatar",
          "parameterTypes": []
        },
        {
          "name": "babylon5",
          "parameterTypes": []
        },
        {
          "name": "backToTheFuture",
          "parameterTypes": []
        },
        {
          "name": "bigBangTheory",
          "parameterTypes": []
        },
        {
          "name": "boardgame",
          "parameterTypes": []
        },
        {
          "name": "bojackHorseman",
          "parameterTypes": []
        },
        {
          "name": "bossaNova",
          "parameterTypes": []
        },
        {
          "name": "breakingBad",
          "parameterTypes": []
        },
        {
          "name": "brooklynNineNine",
          "parameterTypes": []
        },
        {
          "name": "buffy",
          "parameterTypes": []
        },
        {
          "name": "chuckNorris",
          "parameterTypes": []
        },
        {
          "name": "cowboyBebop",
          "parameterTypes": []
        },
        {
          "name": "departed",
          "parameterTypes": []
        },
        {
          "name": "detectiveConan",
          "parameterTypes": []
        },
        {
          "name": "doctorWho",
          "parameterTypes": []
        },
        {
          "name": "doraemon",
          "parameterTypes": []
        },
        {
          "name": "dragonBall",
          "parameterTypes": []
        },
        {
          "name": "dumbAndDumber",
          "parameterTypes": []
        },
        {
          "name": "dune",
          "parameterTypes": []
        },
        {
          "name": "familyGuy",
          "parameterTypes": []
        },
        {
          "name": "finalSpace",
          "parameterTypes": []
        },
        {
          "name": "freshPrinceOfBelAir",
          "parameterTypes": []
        },
        {
          "name": "friends",
          "parameterTypes": []
        },
        {
          "name": "fullMetalAlchemist",
          "parameterTypes": []
        },
        {
          "name": "futurama",
          "parameterTypes": []
        },
        {
          "name": "gameOfThrones",
          "parameterTypes": []
        },
        {
          "name": "ghostbusters",
          "parameterTypes": []
        },
        {
          "name": "gratefulDead",
          "parameterTypes": []
        },
        {
          "name": "harryPotter",
          "parameterTypes": []
        },
        {
          "name": "heyArnold",
          "parameterTypes": []
        },
        {
          "name": "hitchhikersGuideToTheGalaxy",
          "parameterTypes": []
        },
        {
          "name": "hobbit",
          "parameterTypes": []
        },
        {
          "name": "howIMetYourMother",
          "parameterTypes": []
        },
        {
          "name": "howToTrainYourDragon",
          "parameterTypes": []
        },
        {
          "name": "joke",
          "parameterTypes": []
        },
        {
          "name": "kaamelott",
          "parameterTypes": []
        },
        {
          "name": "lebowski",
          "parameterTypes": []
        },
        {
          "name": "lordOfTheRings",
          "parameterTypes": []
        },
        {
          "name": "moneyHeist",
          "parameterTypes": []
        },
        {
          "name": "movie",
          "parameterTypes": []
        },
        {
          "name": "naruto",
          "parameterTypes": []
        },
        {
          "name": "newGirl",
          "parameterTypes": []
        },
        {
          "name": "onePiece",
          "parameterTypes": []
        },
        {
          "name": "oscarMovie",
          "parameterTypes": []
        },
        {
          "name": "pokemon",
          "parameterTypes": []
        },
        {
          "name": "princessBride",
          "parameterTypes": []
        },
        {
          "name": "residentEvil",
          "parameterTypes": []
        },
        {
          "name": "rickAndMorty",
          "parameterTypes": []
        },
        {
          "name": "ruPaulDragRace",
          "parameterTypes": []
        },
        {
          "name": "seinfeld",
          "parameterTypes": []
        },
        {
          "name": "show",
          "parameterTypes": []
        },
        {
          "name": "siliconValley",
          "parameterTypes": []
        },
        {
          "name": "simpsons",
          "parameterTypes": []
        },
        {
          "name": "southPark",
          "parameterTypes": []
        },
        {
          "name": "spongebob",
          "parameterTypes": []
        },
        {
          "name": "starTrek",
          "parameterTypes": []
        },
        {
          "name": "starWars",
          "parameterTypes": []
        },
        {
          "name": "stargate",
          "parameterTypes": []
        },
        {
          "name": "strangerThings",
          "parameterTypes": []
        },
        {
          "name": "studioGhibli",
          "parameterTypes": []
        },
        {
          "name": "suits",
          "parameterTypes": []
        },
        {
          "name": "supernatural",
          "parameterTypes": []
        },
        {
          "name": "swordArtOnline",
          "parameterTypes": []
        },
        {
          "name": "theExpanse",
          "parameterTypes": []
        },
        {
          "name": "theItCrowd",
          "parameterTypes": []
        },
        {
          "name": "theKingkillerChronicle",
          "parameterTypes": []
        },
        {
          "name": "theRoom",
          "parameterTypes": []
        },
        {
          "name": "theThickOfIt",
          "parameterTypes": []
        },
        {
          "name": "theVentureBros",
          "parameterTypes": []
        },
        {
          "name": "tron",
          "parameterTypes": []
        },
        {
          "name": "twinPeaks",
          "parameterTypes": []
        },
        {
          "name": "vForVendetta",
          "parameterTypes": []
        },
        {
          "name": "witcher",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.EntertainmentTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FamilyGuy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FamilyGuyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FinalSpace",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "vehicle",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FinalSpaceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FreshPrinceOfBelAir",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "celebrities",
          "parameterTypes": []
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FreshPrinceOfBelAirTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Friends",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FriendsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FullmetalAlchemist",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "city",
          "parameterTypes": []
        },
        {
          "name": "country",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FullmetalAlchemistTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Futurama",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "hermesCatchPhrase",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.FuturamaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.GameOfThrones",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "city",
          "parameterTypes": []
        },
        {
          "name": "dragon",
          "parameterTypes": []
        },
        {
          "name": "house",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.GameOfThronesTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Ghostbusters",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actor",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.GhostbustersTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.GratefulDead",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "players",
          "parameterTypes": []
        },
        {
          "name": "songs",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.GratefulDeadTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HarryPotter",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "book",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "house",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "spell",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HarryPotterTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HeyArnold",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "locations",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HeyArnoldTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HitchhikersGuideToTheGalaxy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "marvinQuote",
          "parameterTypes": []
        },
        {
          "name": "planet",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "species",
          "parameterTypes": []
        },
        {
          "name": "starship",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HitchhikersGuideToTheGalaxyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Hobbit",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "thorinsCompany",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HobbitTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HowIMetYourMother",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "catchPhrase",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "highFive",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HowIMetYourMotherTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HowToTrainYourDragon",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "dragons",
          "parameterTypes": []
        },
        {
          "name": "locations",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.HowToTrainYourDragonTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Joke",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "knockKnock",
          "parameterTypes": []
        },
        {
          "name": "pun",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.JokeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Kaamelott",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.KaamelottTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Lebowski",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actor",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.LebowskiTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.LordOfTheRings",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.LordOfTheRingsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.MoneyHeist",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "heist",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.MoneyHeistTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Movie",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.MovieTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Naruto",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "demon",
          "parameterTypes": []
        },
        {
          "name": "eye",
          "parameterTypes": []
        },
        {
          "name": "village",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.NarutoTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.NewGirl",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.NewGirlTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.OnePiece",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "akumasNoMi",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "island",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "sea",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.OnePieceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.OscarMovie",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actor",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "getChoice",
          "parameterTypes": []
        },
        {
          "name": "getYear",
          "parameterTypes": []
        },
        {
          "name": "movieName",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "releaseDate",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.OscarMovieTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "actor",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "movieName",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "releaseDate",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Pokemon",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "move",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "type",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.PokemonTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.PrincessBride",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.PrincessBrideTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.ResidentEvil",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "biologicalAgent",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "creature",
          "parameterTypes": []
        },
        {
          "name": "equipment",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.ResidentEvilTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.RickAndMorty",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.RickAndMortyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.RuPaulDragRace",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "queen",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.RuPaulDragRaceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Seinfeld",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "business",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SeinfeldTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Show",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "adultMusical",
          "parameterTypes": []
        },
        {
          "name": "kidsMusical",
          "parameterTypes": []
        },
        {
          "name": "play",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SiliconValley",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "app",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "company",
          "parameterTypes": []
        },
        {
          "name": "email",
          "parameterTypes": []
        },
        {
          "name": "invention",
          "parameterTypes": []
        },
        {
          "name": "motto",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "url",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SiliconValleyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Simpsons",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SimpsonsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SouthPark",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SouthParkTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Spongebob",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "episodes",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SpongebobTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StarTrek",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "klingon",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "species",
          "parameterTypes": []
        },
        {
          "name": "villain",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StarTrekTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StarWars",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "alternateCharacterSpelling",
          "parameterTypes": []
        },
        {
          "name": "callSign",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "droids",
          "parameterTypes": []
        },
        {
          "name": "planets",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        },
        {
          "name": "species",
          "parameterTypes": []
        },
        {
          "name": "vehicles",
          "parameterTypes": []
        },
        {
          "name": "wookieWords",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StarWarsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "alternativeSpelling",
          "parameterTypes": []
        },
        {
          "name": "callSign",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Stargate",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "planets",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StargateTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StrangerThings",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StrangerThingsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StudioGhibli",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "movie",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.StudioGhibliTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Suits",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SuitsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Supernatural",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "creature",
          "parameterTypes": []
        },
        {
          "name": "weapon",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SupernaturalTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SwordArtOnline",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "gameName",
          "parameterTypes": []
        },
        {
          "name": "item",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "realName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.SwordArtOnlineTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheExpanse",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "locations",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        },
        {
          "name": "ships",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheExpanseTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheItCrowd",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actors",
          "parameterTypes": []
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "emails",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheItCrowdTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheKingkillerChronicle",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "book",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "creature",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheKingkillerChronicleTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheRoom",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "actors",
          "parameterTypes": []
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "locations",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheRoomTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheThickOfIt",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "departments",
          "parameterTypes": []
        },
        {
          "name": "positions",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheThickOfItTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheVentureBros",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "organization",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "vehicle",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TheVentureBrosTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Tron",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "alternateCharacterSpelling",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "game",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "tagline",
          "parameterTypes": []
        },
        {
          "name": "vehicle",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TronTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TwinPeaks",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.TwinPeaksTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.VForVendetta",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        },
        {
          "name": "speeches",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.VForVendettaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.Witcher",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.entertainment.EntertainmentProviders"
          ]
        },
        {
          "name": "book",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "monster",
          "parameterTypes": []
        },
        {
          "name": "potion",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "school",
          "parameterTypes": []
        },
        {
          "name": "sign",
          "parameterTypes": []
        },
        {
          "name": "witcher",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.entertainment.WitcherTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.food.Beer",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.food.FoodProviders"
          ]
        },
        {
          "name": "brand",
          "parameterTypes": []
        },
        {
          "name": "hop",
          "parameterTypes": []
        },
        {
          "name": "malt",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": []
        },
        {
          "name": "style",
          "parameterTypes": []
        },
        {
          "name": "yeast",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.food.Coffee",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.food.FoodProviders"
          ]
        },
        {
          "name": "blendName",
          "parameterTypes": []
        },
        {
          "name": "body",
          "parameterTypes": []
        },
        {
          "name": "country",
          "parameterTypes": []
        },
        {
          "name": "descriptor",
          "parameterTypes": []
        },
        {
          "name": "intensifier",
          "parameterTypes": []
        },
        {
          "name": "name1",
          "parameterTypes": []
        },
        {
          "name": "name2",
          "parameterTypes": []
        },
        {
          "name": "notes",
          "parameterTypes": []
        },
        {
          "name": "region",
          "parameterTypes": []
        },
        {
          "name": "variety",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.food.Dessert",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.food.FoodProviders"
          ]
        },
        {
          "name": "flavor",
          "parameterTypes": []
        },
        {
          "name": "topping",
          "parameterTypes": []
        },
        {
          "name": "variety",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.food.Food",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.food.FoodProviders"
          ]
        },
        {
          "name": "allergen",
          "parameterTypes": []
        },
        {
          "name": "dish",
          "parameterTypes": []
        },
        {
          "name": "fruit",
          "parameterTypes": []
        },
        {
          "name": "ingredient",
          "parameterTypes": []
        },
        {
          "name": "measurement",
          "parameterTypes": []
        },
        {
          "name": "spice",
          "parameterTypes": []
        },
        {
          "name": "sushi",
          "parameterTypes": []
        },
        {
          "name": "vegetable",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.food.FoodFaker"
    },
    {
      "type": "net.datafaker.providers.food.FoodProviders",
      "methods": [
        {
          "name": "beer",
          "parameterTypes": []
        },
        {
          "name": "coffee",
          "parameterTypes": []
        },
        {
          "name": "dessert",
          "parameterTypes": []
        },
        {
          "name": "food",
          "parameterTypes": []
        },
        {
          "name": "tea",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.food.Tea",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.food.FoodProviders"
          ]
        },
        {
          "name": "type",
          "parameterTypes": []
        },
        {
          "name": "variety",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.foods.BeerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.foods.CoffeeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "blendName",
          "parameterTypes": []
        },
        {
          "name": "notes",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.foods.DessertTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.foods.FoodFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.foods.FoodTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "measurement",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.foods.HebrewFoodTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "before",
          "parameterTypes": []
        },
        {
          "name": "measurement",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.foods.TeaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testVariety",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.CareProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.healthcare.HealthcareProviders"
          ]
        },
        {
          "name": "hospitalName",
          "parameterTypes": []
        },
        {
          "name": "medicalProfession",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.CareProviderTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.Disease",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.healthcare.HealthcareProviders"
          ]
        },
        {
          "name": "anyDisease",
          "parameterTypes": []
        },
        {
          "name": "dermatology",
          "parameterTypes": []
        },
        {
          "name": "gynecologyAndObstetrics",
          "parameterTypes": []
        },
        {
          "name": "icd10",
          "parameterTypes": []
        },
        {
          "name": "internalDisease",
          "parameterTypes": []
        },
        {
          "name": "neurology",
          "parameterTypes": []
        },
        {
          "name": "ophthalmologyAndOtorhinolaryngology",
          "parameterTypes": []
        },
        {
          "name": "paediatrics",
          "parameterTypes": []
        },
        {
          "name": "surgery",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.DiseaseTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testAnyDisease",
          "parameterTypes": []
        },
        {
          "name": "testDiseaseCodes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.HealthcareFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.HealthcareProviders",
      "methods": [
        {
          "name": "careProvider",
          "parameterTypes": []
        },
        {
          "name": "disease",
          "parameterTypes": []
        },
        {
          "name": "medicalProcedure",
          "parameterTypes": []
        },
        {
          "name": "medication",
          "parameterTypes": []
        },
        {
          "name": "observation",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.MedicalProcedure",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.healthcare.HealthcareProviders"
          ]
        },
        {
          "name": "icd10",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.MedicalProcedureTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "testProcedureCodes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.Medication",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.healthcare.HealthcareProviders"
          ]
        },
        {
          "name": "drugName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.MedicationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.Observation",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.healthcare.HealthcareProviders"
          ]
        },
        {
          "name": "symptom",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.healthcare.ObservationTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Baseball",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "coaches",
          "parameterTypes": []
        },
        {
          "name": "players",
          "parameterTypes": []
        },
        {
          "name": "positions",
          "parameterTypes": []
        },
        {
          "name": "teams",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.BaseballTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Basketball",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "coaches",
          "parameterTypes": []
        },
        {
          "name": "players",
          "parameterTypes": []
        },
        {
          "name": "positions",
          "parameterTypes": []
        },
        {
          "name": "teams",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.BasketballTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Chess",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "opening",
          "parameterTypes": []
        },
        {
          "name": "player",
          "parameterTypes": []
        },
        {
          "name": "title",
          "parameterTypes": []
        },
        {
          "name": "tournament",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.ChessTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Cricket",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "formats",
          "parameterTypes": []
        },
        {
          "name": "players",
          "parameterTypes": []
        },
        {
          "name": "teams",
          "parameterTypes": []
        },
        {
          "name": "tournaments",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.CricketTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.EnglandFootBall",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "league",
          "parameterTypes": []
        },
        {
          "name": "team",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.EnglandFootBallTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Football",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "coaches",
          "parameterTypes": []
        },
        {
          "name": "competitions",
          "parameterTypes": []
        },
        {
          "name": "players",
          "parameterTypes": []
        },
        {
          "name": "positions",
          "parameterTypes": []
        },
        {
          "name": "teams",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.FootballTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Formula1",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "circuit",
          "parameterTypes": []
        },
        {
          "name": "driver",
          "parameterTypes": []
        },
        {
          "name": "grandPrix",
          "parameterTypes": []
        },
        {
          "name": "team",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Formula1Test",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.SportFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.SportProviders",
      "methods": [
        {
          "name": "baseball",
          "parameterTypes": []
        },
        {
          "name": "basketball",
          "parameterTypes": []
        },
        {
          "name": "chess",
          "parameterTypes": []
        },
        {
          "name": "cricket",
          "parameterTypes": []
        },
        {
          "name": "englandfootball",
          "parameterTypes": []
        },
        {
          "name": "football",
          "parameterTypes": []
        },
        {
          "name": "formula1",
          "parameterTypes": []
        },
        {
          "name": "volleyball",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.Volleyball",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.sport.SportProviders"
          ]
        },
        {
          "name": "coach",
          "parameterTypes": []
        },
        {
          "name": "formation",
          "parameterTypes": []
        },
        {
          "name": "player",
          "parameterTypes": []
        },
        {
          "name": "position",
          "parameterTypes": []
        },
        {
          "name": "team",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.sport.VolleyballTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Battlefield1",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "classes",
          "parameterTypes": []
        },
        {
          "name": "faction",
          "parameterTypes": []
        },
        {
          "name": "map",
          "parameterTypes": []
        },
        {
          "name": "vehicle",
          "parameterTypes": []
        },
        {
          "name": "weapon",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Battlefield1Test",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.ClashOfClans",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "defensiveBuilding",
          "parameterTypes": []
        },
        {
          "name": "rank",
          "parameterTypes": []
        },
        {
          "name": "troop",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.ClashOfClansTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Control",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "alteredItem",
          "parameterTypes": []
        },
        {
          "name": "alteredWorldEvent",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "hiss",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "objectOfPower",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "theBoard",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.ControlTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.DarkSouls",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "classes",
          "parameterTypes": []
        },
        {
          "name": "covenants",
          "parameterTypes": []
        },
        {
          "name": "shield",
          "parameterTypes": []
        },
        {
          "name": "stats",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.DarkSoulsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Dota2",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "attribute",
          "parameterTypes": []
        },
        {
          "name": "building",
          "parameterTypes": []
        },
        {
          "name": "faction",
          "parameterTypes": []
        },
        {
          "name": "hero",
          "parameterTypes": []
        },
        {
          "name": "item",
          "parameterTypes": []
        },
        {
          "name": "neutralItem",
          "parameterTypes": []
        },
        {
          "name": "player",
          "parameterTypes": []
        },
        {
          "name": "rank",
          "parameterTypes": []
        },
        {
          "name": "team",
          "parameterTypes": []
        },
        {
          "name": "tier",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Dota2Test",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "dota2HeroQuote",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.EldenRing",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "npc",
          "parameterTypes": []
        },
        {
          "name": "skill",
          "parameterTypes": []
        },
        {
          "name": "spell",
          "parameterTypes": []
        },
        {
          "name": "weapon",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.EldenRingTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.ElderScrolls",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "city",
          "parameterTypes": []
        },
        {
          "name": "creature",
          "parameterTypes": []
        },
        {
          "name": "dragon",
          "parameterTypes": []
        },
        {
          "name": "firstName",
          "parameterTypes": []
        },
        {
          "name": "lastName",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "race",
          "parameterTypes": []
        },
        {
          "name": "region",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.ElderScrollsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Esports",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "event",
          "parameterTypes": []
        },
        {
          "name": "game",
          "parameterTypes": []
        },
        {
          "name": "league",
          "parameterTypes": []
        },
        {
          "name": "player",
          "parameterTypes": []
        },
        {
          "name": "team",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.EsportsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Fallout",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "faction",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.FalloutTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.FinalFantasyXIV",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "dataCenter",
          "parameterTypes": []
        },
        {
          "name": "job",
          "parameterTypes": []
        },
        {
          "name": "race",
          "parameterTypes": []
        },
        {
          "name": "zone",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.FinalFantasyXIVTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.HalfLife",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "enemy",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.HalfLifeTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Hearthstone",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "battlegroundsScore",
          "parameterTypes": []
        },
        {
          "name": "mainCharacter",
          "parameterTypes": []
        },
        {
          "name": "mainPattern",
          "parameterTypes": []
        },
        {
          "name": "mainProfession",
          "parameterTypes": []
        },
        {
          "name": "standardRank",
          "parameterTypes": []
        },
        {
          "name": "wildRank",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.HearthstoneTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "battlegroundsScoreTest",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "standardRankTest",
          "parameterTypes": []
        },
        {
          "name": "wildRankTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.HeroesOfTheStorm",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "battleground",
          "parameterTypes": []
        },
        {
          "name": "hero",
          "parameterTypes": []
        },
        {
          "name": "heroClass",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.HeroesOfTheStormTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.LeagueOfLegends",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "champion",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "masteries",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "rank",
          "parameterTypes": []
        },
        {
          "name": "summonerSpell",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.LeagueOfLegendsTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.MarvelSnap",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "event",
          "parameterTypes": []
        },
        {
          "name": "rank",
          "parameterTypes": []
        },
        {
          "name": "zone",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.MarvelSnapTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.MassEffect",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "cluster",
          "parameterTypes": []
        },
        {
          "name": "planet",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "specie",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.MassEffectTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Minecraft",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "animalName",
          "parameterTypes": []
        },
        {
          "name": "entityName",
          "parameterTypes": []
        },
        {
          "name": "itemName",
          "parameterTypes": []
        },
        {
          "name": "monsterName",
          "parameterTypes": []
        },
        {
          "name": "tileItemName",
          "parameterTypes": []
        },
        {
          "name": "tileName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.MinecraftTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        },
        {
          "name": "testTileItemName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Myst",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "ages",
          "parameterTypes": []
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "creatures",
          "parameterTypes": []
        },
        {
          "name": "games",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.MystTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Overwatch",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "hero",
          "parameterTypes": []
        },
        {
          "name": "location",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.OverwatchTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.RedDeadRedemption2",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "animal",
          "parameterTypes": []
        },
        {
          "name": "gangMember",
          "parameterTypes": []
        },
        {
          "name": "majorCharacter",
          "parameterTypes": []
        },
        {
          "name": "protagonist",
          "parameterTypes": []
        },
        {
          "name": "quote",
          "parameterTypes": []
        },
        {
          "name": "region",
          "parameterTypes": []
        },
        {
          "name": "settlement",
          "parameterTypes": []
        },
        {
          "name": "state",
          "parameterTypes": []
        },
        {
          "name": "weapon",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.RedDeadRedemption2Test",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SonicTheHedgehog",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "game",
          "parameterTypes": []
        },
        {
          "name": "zone",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SonicTheHedgehogTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SoulKnight",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "bosses",
          "parameterTypes": []
        },
        {
          "name": "buffs",
          "parameterTypes": []
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "enemies",
          "parameterTypes": []
        },
        {
          "name": "statues",
          "parameterTypes": []
        },
        {
          "name": "weapons",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SoulKnightTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.StarCraft",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "building",
          "parameterTypes": []
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "planet",
          "parameterTypes": []
        },
        {
          "name": "unit",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.StarCraftTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.StreetFighter",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "moves",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        },
        {
          "name": "stages",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.StreetFighterTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SuperMario",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "characters",
          "parameterTypes": []
        },
        {
          "name": "games",
          "parameterTypes": []
        },
        {
          "name": "locations",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SuperMarioTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SuperSmashBros",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "fighter",
          "parameterTypes": []
        },
        {
          "name": "stage",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.SuperSmashBrosTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Touhou",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "characterFirstName",
          "parameterTypes": []
        },
        {
          "name": "characterLastName",
          "parameterTypes": []
        },
        {
          "name": "characterName",
          "parameterTypes": []
        },
        {
          "name": "gameName",
          "parameterTypes": []
        },
        {
          "name": "trackName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.TouhouTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.VideoGame",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "genre",
          "parameterTypes": []
        },
        {
          "name": "platform",
          "parameterTypes": []
        },
        {
          "name": "title",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.VideoGameFakerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.VideoGameProviders",
      "methods": [
        {
          "name": "battlefield1",
          "parameterTypes": []
        },
        {
          "name": "clashOfClans",
          "parameterTypes": []
        },
        {
          "name": "control",
          "parameterTypes": []
        },
        {
          "name": "darkSouls",
          "parameterTypes": []
        },
        {
          "name": "dota2",
          "parameterTypes": []
        },
        {
          "name": "eldenRing",
          "parameterTypes": []
        },
        {
          "name": "elderScrolls",
          "parameterTypes": []
        },
        {
          "name": "esports",
          "parameterTypes": []
        },
        {
          "name": "fallout",
          "parameterTypes": []
        },
        {
          "name": "finalFantasyXIV",
          "parameterTypes": []
        },
        {
          "name": "halfLife",
          "parameterTypes": []
        },
        {
          "name": "hearthstone",
          "parameterTypes": []
        },
        {
          "name": "heroesOfTheStorm",
          "parameterTypes": []
        },
        {
          "name": "leagueOfLegends",
          "parameterTypes": []
        },
        {
          "name": "marvelSnap",
          "parameterTypes": []
        },
        {
          "name": "massEffect",
          "parameterTypes": []
        },
        {
          "name": "minecraft",
          "parameterTypes": []
        },
        {
          "name": "myst",
          "parameterTypes": []
        },
        {
          "name": "overwatch",
          "parameterTypes": []
        },
        {
          "name": "redDeadRedemption2",
          "parameterTypes": []
        },
        {
          "name": "sonicTheHedgehog",
          "parameterTypes": []
        },
        {
          "name": "soulKnight",
          "parameterTypes": []
        },
        {
          "name": "starCraft",
          "parameterTypes": []
        },
        {
          "name": "streetFighter",
          "parameterTypes": []
        },
        {
          "name": "superMario",
          "parameterTypes": []
        },
        {
          "name": "superSmashBros",
          "parameterTypes": []
        },
        {
          "name": "touhou",
          "parameterTypes": []
        },
        {
          "name": "videoGame",
          "parameterTypes": []
        },
        {
          "name": "warhammerFantasy",
          "parameterTypes": []
        },
        {
          "name": "worldOfWarcraft",
          "parameterTypes": []
        },
        {
          "name": "zelda",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.VideoGameTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.WarhammerFantasy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "creatures",
          "parameterTypes": []
        },
        {
          "name": "factions",
          "parameterTypes": []
        },
        {
          "name": "heros",
          "parameterTypes": []
        },
        {
          "name": "locations",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.WarhammerFantasyTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.WorldOfWarcraft",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "hero",
          "parameterTypes": []
        },
        {
          "name": "quotes",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.WorldOfWarcraftTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.Zelda",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "net.datafaker.providers.videogame.VideoGameProviders"
          ]
        },
        {
          "name": "character",
          "parameterTypes": []
        },
        {
          "name": "game",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.providers.videogame.ZeldaTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "providerListTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.script.ProviderGenerator"
    },
    {
      "type": "net.datafaker.script.ProviderType"
    },
    {
      "type": "net.datafaker.script.ProvidersDocsGenerator"
    },
    {
      "type": "net.datafaker.script.ProvidersDocsGenerator$Column"
    },
    {
      "type": "net.datafaker.script.ProvidersDocsGenerator$TextBlock"
    },
    {
      "type": "net.datafaker.script.RandomImageGenerator"
    },
    {
      "type": "net.datafaker.sequence.BloodPressure"
    },
    {
      "type": "net.datafaker.sequence.Data"
    },
    {
      "type": "net.datafaker.sequence.FakeCollectionTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checkWrongArguments",
          "parameterTypes": []
        },
        {
          "name": "generateCollection",
          "parameterTypes": []
        },
        {
          "name": "generateCollectionPassingSuppliersAsList",
          "parameterTypes": []
        },
        {
          "name": "generateCollectionWithDifferentObjects",
          "parameterTypes": []
        },
        {
          "name": "generateCollectionWithRepeatableFaker",
          "parameterTypes": []
        },
        {
          "name": "generateEmptySequence",
          "parameterTypes": []
        },
        {
          "name": "generateNullCollection",
          "parameterTypes": []
        },
        {
          "name": "generateSequence",
          "parameterTypes": []
        },
        {
          "name": "generateSequence5",
          "parameterTypes": []
        },
        {
          "name": "generateSequenceOfDefaultSize",
          "parameterTypes": []
        },
        {
          "name": "illegalNullRate",
          "parameterTypes": [
            "double"
          ]
        },
        {
          "name": "isInfiniteTest",
          "parameterTypes": []
        },
        {
          "name": "singletonTest",
          "parameterTypes": []
        },
        {
          "name": "testIterator",
          "parameterTypes": []
        },
        {
          "name": "toCsv",
          "parameterTypes": []
        },
        {
          "name": "toJson",
          "parameterTypes": []
        },
        {
          "name": "toNestedJson",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.sequence.FakeStreamTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "checkWrongArguments",
          "parameterTypes": []
        },
        {
          "name": "generateFiniteStream",
          "parameterTypes": []
        },
        {
          "name": "generateInfiniteStream",
          "parameterTypes": []
        },
        {
          "name": "generateNullStream",
          "parameterTypes": []
        },
        {
          "name": "generateStreamOfDigits",
          "parameterTypes": []
        },
        {
          "name": "generateStreamOfNames",
          "parameterTypes": []
        },
        {
          "name": "generateStreamPassingSuppliersAsList",
          "parameterTypes": []
        },
        {
          "name": "generateStreamWithDifferentObjects",
          "parameterTypes": []
        },
        {
          "name": "generateStreamWithRepeatableFaker",
          "parameterTypes": []
        },
        {
          "name": "illegalNullRate",
          "parameterTypes": [
            "double"
          ]
        },
        {
          "name": "isInfiniteTest",
          "parameterTypes": []
        },
        {
          "name": "singletonTest",
          "parameterTypes": []
        },
        {
          "name": "testIterator",
          "parameterTypes": []
        },
        {
          "name": "testIteratorInfinite",
          "parameterTypes": []
        },
        {
          "name": "toCsv",
          "parameterTypes": []
        },
        {
          "name": "toCsvFromInfiniteSequence",
          "parameterTypes": []
        },
        {
          "name": "toJson",
          "parameterTypes": []
        },
        {
          "name": "toJsonFromInfiniteSequence",
          "parameterTypes": []
        },
        {
          "name": "toNestedJson",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.sequence.Glucose"
    },
    {
      "type": "net.datafaker.sequence.Temperature"
    },
    {
      "type": "net.datafaker.service.FakeValuesGroupingTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "before",
          "parameterTypes": []
        },
        {
          "name": "handlesMultipleFakeValues",
          "parameterTypes": []
        },
        {
          "name": "handlesOneFakeValue",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.service.FakeValuesService",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "expression",
          "parameterTypes": [
            "java.lang.String",
            "net.datafaker.providers.base.BaseFaker",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "fetch",
          "parameterTypes": [
            "java.lang.String",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "fetchObject",
          "parameterTypes": [
            "java.lang.String",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "fetchString",
          "parameterTypes": [
            "java.lang.String",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "fileExpression",
          "parameterTypes": [
            "java.nio.file.Path",
            "net.datafaker.providers.base.BaseFaker",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "resolve",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.Object",
            "net.datafaker.providers.base.BaseFaker",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "resolve",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.Object",
            "net.datafaker.providers.base.ProviderRegistration",
            "java.util.function.Supplier",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "resolveExpression",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.Object",
            "net.datafaker.providers.base.ProviderRegistration",
            "net.datafaker.service.FakerContext"
          ]
        },
        {
          "name": "safeFetch",
          "parameterTypes": [
            "java.lang.String",
            "net.datafaker.service.FakerContext",
            "java.lang.String"
          ]
        },
        {
          "name": "updateFakeValuesInterfaceMap",
          "parameterTypes": [
            "java.util.List"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.service.FakeValuesServiceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "before",
          "parameterTypes": []
        },
        {
          "name": "bothify2Args",
          "parameterTypes": []
        },
        {
          "name": "checkFakerContextEquality",
          "parameterTypes": [
            "net.datafaker.service.FakerContext",
            "net.datafaker.service.FakerContext",
            "boolean"
          ]
        },
        {
          "name": "expressionCompletelyUnresolvable",
          "parameterTypes": []
        },
        {
          "name": "expressionWithFourArguments",
          "parameterTypes": []
        },
        {
          "name": "expressionWithInvalidFakerObject",
          "parameterTypes": []
        },
        {
          "name": "expressionWithSingleEnumArg",
          "parameterTypes": []
        },
        {
          "name": "expressionWithValidFakerObjectButInvalidMethod",
          "parameterTypes": []
        },
        {
          "name": "expressionWithValidFakerObjectValidMethodInvalidArgs",
          "parameterTypes": []
        },
        {
          "name": "fakerContexts",
          "parameterTypes": []
        },
        {
          "name": "fetchObjectShouldReturnValue",
          "parameterTypes": []
        },
        {
          "name": "fetchShouldReturnValue",
          "parameterTypes": []
        },
        {
          "name": "fetchStringShouldReturnValue",
          "parameterTypes": []
        },
        {
          "name": "fileExpressionTest",
          "parameterTypes": []
        },
        {
          "name": "fileExpressionTestFailure",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "fileNoExpressionTest",
          "parameterTypes": []
        },
        {
          "name": "futureDateExpression",
          "parameterTypes": []
        },
        {
          "name": "pastDateExpression",
          "parameterTypes": []
        },
        {
          "name": "regexifyDirective",
          "parameterTypes": []
        },
        {
          "name": "regexifyDirective2",
          "parameterTypes": []
        },
        {
          "name": "regexifySlashFormatDirective",
          "parameterTypes": []
        },
        {
          "name": "resolveKeyToPropertyWithAList",
          "parameterTypes": []
        },
        {
          "name": "resolveKeyToPropertyWithAPropertyWithoutAnObject",
          "parameterTypes": []
        },
        {
          "name": "resolveUsingTheSameKeyTwice",
          "parameterTypes": []
        },
        {
          "name": "safeFetchShouldReturnEmptyStringWhenPropertyDoesntExist",
          "parameterTypes": []
        },
        {
          "name": "safeFetchShouldReturnSimpleList",
          "parameterTypes": []
        },
        {
          "name": "safeFetchShouldReturnValueInList",
          "parameterTypes": []
        },
        {
          "name": "testFakerContextSetLocale",
          "parameterTypes": []
        },
        {
          "name": "testFakerContextSetRandomService",
          "parameterTypes": []
        },
        {
          "name": "testLocaleChain",
          "parameterTypes": []
        },
        {
          "name": "testLocaleChainEnglish",
          "parameterTypes": []
        },
        {
          "name": "testLocaleChainLanguageOnly",
          "parameterTypes": []
        },
        {
          "name": "testLocalesChainGetter",
          "parameterTypes": []
        },
        {
          "name": "testLocalesChainGetterRu",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.service.FakeValuesServiceTest$1Property",
      "methods": [
        {
          "name": "hello2",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.service.FakeValuesServiceTest$1PropertyFaker",
      "methods": [
        {
          "name": "property",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.service.FakeValuesServiceTest$DummyService",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "hello",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.service.FakeValuesTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "before",
          "parameterTypes": []
        },
        {
          "name": "checkEquals",
          "parameterTypes": [
            "net.datafaker.service.FakeValues",
            "net.datafaker.service.FakeValues",
            "boolean"
          ]
        },
        {
          "name": "correctLocale",
          "parameterTypes": []
        },
        {
          "name": "correctPathForHebrewLanguage",
          "parameterTypes": []
        },
        {
          "name": "fakeValuesProvider",
          "parameterTypes": []
        },
        {
          "name": "getAValueDoesNotReturnAValue",
          "parameterTypes": []
        },
        {
          "name": "getAValueForHebrewLocale",
          "parameterTypes": []
        },
        {
          "name": "getAValueFromALocaleThatCantBeLoaded",
          "parameterTypes": []
        },
        {
          "name": "getAValueReturnsAValue",
          "parameterTypes": []
        },
        {
          "name": "getAValueWithANonEnglishFile",
          "parameterTypes": []
        },
        {
          "name": "incorrectPathForHebrewLanguage",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.service.FakerContext",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "getRandomService",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.service.RandomService",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "nextInt",
          "parameterTypes": [
            "int",
            "int"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.service.RandomServiceTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "nextInt_returnsValueWithinGivenRange",
          "parameterTypes": []
        },
        {
          "name": "predictableRandomRange",
          "parameterTypes": []
        },
        {
          "name": "randomServiceProvider",
          "parameterTypes": []
        },
        {
          "name": "testDefaultHex",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        },
        {
          "name": "testDoubleInRange",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        },
        {
          "name": "testHex",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        },
        {
          "name": "testIntInRange",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        },
        {
          "name": "testLongInRange",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        },
        {
          "name": "testLongMaxBoundary",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        },
        {
          "name": "testLongWithinBoundary",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        },
        {
          "name": "testPositiveBoundariesOnly",
          "parameterTypes": [
            "net.datafaker.service.RandomService"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.service.files.EnFileTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "fileNameConvention",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.transformations.JavaObjectTransformerTest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "javaCollectionTest",
          "parameterTypes": []
        },
        {
          "name": "javaEmptyStreamTest",
          "parameterTypes": []
        },
        {
          "name": "javaObjectTest",
          "parameterTypes": []
        },
        {
          "name": "javaRecordTest",
          "parameterTypes": []
        },
        {
          "name": "javaStreamingTest",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "net.datafaker.transformations.JavaObjectTransformerTest$Client",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "java.time.Instant",
            "int"
          ]
        }
      ]
    },
    {
      "type": "net.datafaker.transformations.JavaObjectTransformerTest$Person",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.apiguardian.api.API"
    },
    {
      "type": "org.junit.internal.AssumptionViolatedException"
    },
    {
      "type": "org.junit.jupiter.api.RepeatedTest"
    },
    {
      "type": "org.junit.jupiter.api.Test"
    },
    {
      "type": "org.junit.jupiter.api.TestInstance"
    },
    {
      "type": "org.junit.jupiter.api.TestTemplate"
    },
    {
      "type": "org.junit.jupiter.api.Timeout"
    },
    {
      "type": "org.junit.jupiter.api.extension.AfterAllCallback"
    },
    {
      "type": "org.junit.jupiter.api.extension.AfterEachCallback"
    },
    {
      "type": "org.junit.jupiter.api.extension.BeforeAllCallback"
    },
    {
      "type": "org.junit.jupiter.api.extension.BeforeEachCallback"
    },
    {
      "type": "org.junit.jupiter.api.extension.ExtendWith"
    },
    {
      "type": "org.junit.jupiter.api.extension.Extension"
    },
    {
      "type": "org.junit.jupiter.api.parallel.Execution"
    },
    {
      "type": "org.junit.jupiter.engine.JupiterTestEngine"
    },
    {
      "type": "org.junit.jupiter.engine.extension.TimeoutInvocationFactory$SingleThreadExecutorResource",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.junit.jupiter.params.ParameterizedTest"
    },
    {
      "type": "org.junit.jupiter.params.ParameterizedTestExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.junit.jupiter.params.provider.AnnotationBasedArgumentsProvider"
    },
    {
      "type": "org.junit.jupiter.params.provider.ArgumentsProvider"
    },
    {
      "type": "org.junit.jupiter.params.provider.ArgumentsSource"
    },
    {
      "type": "org.junit.jupiter.params.provider.CsvArgumentsProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.junit.jupiter.params.provider.CsvSource"
    },
    {
      "type": "org.junit.jupiter.params.provider.EnumArgumentsProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.junit.jupiter.params.provider.EnumSource"
    },
    {
      "type": "org.junit.jupiter.params.provider.MethodArgumentsProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.junit.jupiter.params.provider.MethodSource"
    },
    {
      "type": "org.junit.jupiter.params.provider.NullArgumentsProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.junit.jupiter.params.provider.NullSource"
    },
    {
      "type": "org.junit.jupiter.params.provider.ValueArgumentsProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.junit.jupiter.params.provider.ValueSource"
    },
    {
      "type": "org.junit.jupiter.params.support.AnnotationConsumer"
    },
    {
      "type": "org.junit.platform.commons.annotation.Testable"
    },
    {
      "type": "org.junit.platform.launcher.listeners.UniqueIdTrackingListener"
    },
    {
      "type": "org.mockito.configuration.MockitoConfiguration"
    },
    {
      "type": "org.mockito.internal.configuration.DefaultDoNotMockEnforcer",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.mockito.internal.configuration.InjectingAnnotationEngine",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.mockito.internal.configuration.plugins.DefaultPluginSwitch",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice$ForEquals"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice$ForHashCode"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice$ForReadObject"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice$ForStatic"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$DispatcherDefaultingToRealMethod"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForEquals"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForHashCode"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$ForWriteReplace"
    },
    {
      "type": "org.mockito.internal.creation.bytebuddy.inject.MockMethodDispatcher"
    },
    {
      "type": "org.mockito.internal.creation.instance.DefaultInstantiatorProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.mockito.internal.matchers.Any"
    },
    {
      "type": "org.mockito.internal.matchers.Equals"
    },
    {
      "type": "org.mockito.internal.matchers.InstanceOf"
    },
    {
      "type": "org.mockito.internal.util.ConsoleMockitoLogger",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.mockito.internal.util.reflection.InstrumentationMemberAccessor$Dispatcher"
    },
    {
      "type": "org.mockito.internal.util.reflection.ModuleMemberAccessor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.java2d.marlin.DMarlinRenderingEngine",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.misc.SharedSecrets"
    },
    {
      "type": "sun.security.provider.MD2",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.provider.MD5",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.provider.NativePRNG",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.security.SecureRandomParameters"
          ]
        }
      ]
    },
    {
      "type": "sun.security.provider.SHA",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.provider.SHA2$SHA256",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.provider.SHA5$SHA384",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.provider.SHA5$SHA512",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.method.MethodDescription$InDefinedShape$AbstractBase$Executable"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.method.ParameterDescription$ForLoadedParameter$Parameter"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.method.ParameterList$ForLoadedExecutable$Executable"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDefinition$Sort$AnnotatedType"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$ForLoadedType$Dispatcher"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedExecutableExceptionType$Dispatcher"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedExecutableParameterType$Dispatcher"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedField$Dispatcher"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$ForLoadedMethodReturnType$Dispatcher"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForComponentType$AnnotatedParameterizedType"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForOwnerType$AnnotatedType"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeArgument$AnnotatedParameterizedType"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeVariableBoundType$AnnotatedTypeVariable"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeVariableBoundType$OfFormalTypeVariable$FormalTypeVariable"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForWildcardUpperBoundType$AnnotatedWildcardType"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfClassDesc"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfDirectMethodHandleDesc"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfDirectMethodHandleDesc$ForKind"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfDynamicConstantDesc"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfMethodHandleDesc"
        ]
      }
    },
    {
      "type": {
        "proxy": [
          "net.bytebuddy.utility.JavaConstant$Simple$Dispatcher$OfMethodTypeDesc"
        ]
      }
    }
  ],
  "resources": [
    {
      "glob": ".yml"
    },
    {
      "glob": "/.yml"
    },
    {
      "glob": "/_AL"
    },
    {
      "glob": "/_AR"
    },
    {
      "glob": "/_AR.yml"
    },
    {
      "glob": "/_AT"
    },
    {
      "glob": "/_AT.yml"
    },
    {
      "glob": "/_AU"
    },
    {
      "glob": "/_AU.yml"
    },
    {
      "glob": "/_BE"
    },
    {
      "glob": "/_BE.yml"
    },
    {
      "glob": "/_BG"
    },
    {
      "glob": "/_BORK"
    },
    {
      "glob": "/_BORK.yml"
    },
    {
      "glob": "/_BR"
    },
    {
      "glob": "/_BR.yml"
    },
    {
      "glob": "/_BY"
    },
    {
      "glob": "/_CA"
    },
    {
      "glob": "/_CAT"
    },
    {
      "glob": "/_CAT.yml"
    },
    {
      "glob": "/_CH"
    },
    {
      "glob": "/_CN"
    },
    {
      "glob": "/_CZ"
    },
    {
      "glob": "/_DK"
    },
    {
      "glob": "/_DK.yml"
    },
    {
      "glob": "/_EE"
    },
    {
      "glob": "/_EN"
    },
    {
      "glob": "/_EN.yml"
    },
    {
      "glob": "/_FI"
    },
    {
      "glob": "/_FI.yml"
    },
    {
      "glob": "/_FR"
    },
    {
      "glob": "/_FR.yml"
    },
    {
      "glob": "/_GB"
    },
    {
      "glob": "/_GB.yml"
    },
    {
      "glob": "/_GE"
    },
    {
      "glob": "/_GR"
    },
    {
      "glob": "/_GR.yml"
    },
    {
      "glob": "/_ID"
    },
    {
      "glob": "/_ID.yml"
    },
    {
      "glob": "/_IND"
    },
    {
      "glob": "/_IND.yml"
    },
    {
      "glob": "/_MD"
    },
    {
      "glob": "/_MK"
    },
    {
      "glob": "/_MS"
    },
    {
      "glob": "/_MS.yml"
    },
    {
      "glob": "/_MX"
    },
    {
      "glob": "/_MX.yml"
    },
    {
      "glob": "/_NEP"
    },
    {
      "glob": "/_NEP.yml"
    },
    {
      "glob": "/_NG"
    },
    {
      "glob": "/_NG.yml"
    },
    {
      "glob": "/_NO"
    },
    {
      "glob": "/_NO.yml"
    },
    {
      "glob": "/_NZ"
    },
    {
      "glob": "/_NZ.yml"
    },
    {
      "glob": "/_PAK"
    },
    {
      "glob": "/_PAK.yml"
    },
    {
      "glob": "/_PH"
    },
    {
      "glob": "/_PH.yml"
    },
    {
      "glob": "/_PK"
    },
    {
      "glob": "/_PK.yml"
    },
    {
      "glob": "/_PY"
    },
    {
      "glob": "/_PY.yml"
    },
    {
      "glob": "/_RU"
    },
    {
      "glob": "/_SE"
    },
    {
      "glob": "/_SE.yml"
    },
    {
      "glob": "/_SG"
    },
    {
      "glob": "/_SG.yml"
    },
    {
      "glob": "/_TW"
    },
    {
      "glob": "/_TW.yml"
    },
    {
      "glob": "/_UG"
    },
    {
      "glob": "/_UG.yml"
    },
    {
      "glob": "/_US"
    },
    {
      "glob": "/_ZA"
    },
    {
      "glob": "/_ZA.yml"
    },
    {
      "glob": "/ar/ar"
    },
    {
      "glob": "/be/be"
    },
    {
      "glob": "/bg/bg"
    },
    {
      "glob": "/by/by"
    },
    {
      "glob": "/ca/ca"
    },
    {
      "glob": "/ca/ca-CAT"
    },
    {
      "glob": "/cs/cs"
    },
    {
      "glob": "/cs/cs-CZ"
    },
    {
      "glob": "/da.yml"
    },
    {
      "glob": "/da/da"
    },
    {
      "glob": "/da/da-DK"
    },
    {
      "glob": "/de-EN.yml"
    },
    {
      "glob": "/de/de"
    },
    {
      "glob": "/de/de-AT"
    },
    {
      "glob": "/de/de-CH"
    },
    {
      "glob": "/de/de-EN"
    },
    {
      "glob": "/el.yml"
    },
    {
      "glob": "/el/el"
    },
    {
      "glob": "/el/el-GR"
    },
    {
      "glob": "/en/en-AU"
    },
    {
      "glob": "/en/en-BORK"
    },
    {
      "glob": "/en/en-CA"
    },
    {
      "glob": "/en/en-GB"
    },
    {
      "glob": "/en/en-IND"
    },
    {
      "glob": "/en/en-MD"
    },
    {
      "glob": "/en/en-MS"
    },
    {
      "glob": "/en/en-NEP"
    },
    {
      "glob": "/en/en-NG"
    },
    {
      "glob": "/en/en-NZ"
    },
    {
      "glob": "/en/en-PAK"
    },
    {
      "glob": "/en/en-PH"
    },
    {
      "glob": "/en/en-PK"
    },
    {
      "glob": "/en/en-SG"
    },
    {
      "glob": "/en/en-UG"
    },
    {
      "glob": "/en/en-US"
    },
    {
      "glob": "/en/en-ZA"
    },
    {
      "glob": "/es/es"
    },
    {
      "glob": "/es/es-AR"
    },
    {
      "glob": "/es/es-MX"
    },
    {
      "glob": "/es/es-PY"
    },
    {
      "glob": "/et-EE.yml"
    },
    {
      "glob": "/et/et"
    },
    {
      "glob": "/et/et-EE"
    },
    {
      "glob": "/fa/fa"
    },
    {
      "glob": "/fi.yml"
    },
    {
      "glob": "/fi/fi"
    },
    {
      "glob": "/fi/fi-FI"
    },
    {
      "glob": "/fr-EN.yml"
    },
    {
      "glob": "/fr-FR.yml"
    },
    {
      "glob": "/fr/fr"
    },
    {
      "glob": "/fr/fr-CA"
    },
    {
      "glob": "/fr/fr-CH"
    },
    {
      "glob": "/fr/fr-EN"
    },
    {
      "glob": "/fr/fr-FR"
    },
    {
      "glob": "/he/he"
    },
    {
      "glob": "/hr/hr"
    },
    {
      "glob": "/hu/hu"
    },
    {
      "glob": "/hy/hy"
    },
    {
      "glob": "/id/id"
    },
    {
      "glob": "/id/id-ID"
    },
    {
      "glob": "/it/it"
    },
    {
      "glob": "/ja/ja"
    },
    {
      "glob": "/ka/ka"
    },
    {
      "glob": "/ko/ko"
    },
    {
      "glob": "/lv/lv"
    },
    {
      "glob": "/mk/mk"
    },
    {
      "glob": "/nb.yml"
    },
    {
      "glob": "/nb/nb"
    },
    {
      "glob": "/nb/nb-NO"
    },
    {
      "glob": "/nl-NL.yml"
    },
    {
      "glob": "/nl/nl"
    },
    {
      "glob": "/nl/nl-BE"
    },
    {
      "glob": "/nl/nl-NL"
    },
    {
      "glob": "/no.yml"
    },
    {
      "glob": "/no/no"
    },
    {
      "glob": "/no/no-NO"
    },
    {
      "glob": "/nothing.yml"
    },
    {
      "glob": "/nothing/nothing"
    },
    {
      "glob": "/pl/pl"
    },
    {
      "glob": "/pt/pt"
    },
    {
      "glob": "/pt/pt-BR"
    },
    {
      "glob": "/ro.yml"
    },
    {
      "glob": "/ro/ro"
    },
    {
      "glob": "/ro/ro-MD"
    },
    {
      "glob": "/ru-RU.yml"
    },
    {
      "glob": "/ru/ru"
    },
    {
      "glob": "/ru/ru-MD"
    },
    {
      "glob": "/ru/ru-RU"
    },
    {
      "glob": "/sk/sk"
    },
    {
      "glob": "/sq/sq"
    },
    {
      "glob": "/sv/sv"
    },
    {
      "glob": "/sv/sv-SE"
    },
    {
      "glob": "/test/test"
    },
    {
      "glob": "/th/th"
    },
    {
      "glob": "/tr/tr"
    },
    {
      "glob": "/uk/uk"
    },
    {
      "glob": "/vi/vi"
    },
    {
      "glob": "/zh.yml"
    },
    {
      "glob": "/zh/zh"
    },
    {
      "glob": "/zh/zh-CN"
    },
    {
      "glob": "/zh/zh-TW"
    },
    {
      "glob": "META-INF/services/java.lang.System$LoggerFinder"
    },
    {
      "glob": "META-INF/services/java.net.spi.URLStreamHandlerProvider"
    },
    {
      "glob": "META-INF/services/java.time.zone.ZoneRulesProvider"
    },
    {
      "glob": "META-INF/services/javax.imageio.spi.ImageInputStreamSpi"
    },
    {
      "glob": "META-INF/services/javax.imageio.spi.ImageOutputStreamSpi"
    },
    {
      "glob": "META-INF/services/javax.imageio.spi.ImageReaderSpi"
    },
    {
      "glob": "META-INF/services/javax.imageio.spi.ImageTranscoderSpi"
    },
    {
      "glob": "META-INF/services/javax.imageio.spi.ImageWriterSpi"
    },
    {
      "glob": "META-INF/services/net.datafaker.idnumbers.IdNumberGenerator"
    },
    {
      "glob": "META-INF/services/org.assertj.core.configuration.Configuration"
    },
    {
      "glob": "META-INF/services/org.assertj.core.presentation.Representation"
    },
    {
      "glob": "META-INF/services/org.junit.jupiter.api.extension.Extension"
    },
    {
      "glob": "META-INF/services/org.junit.platform.engine.TestEngine"
    },
    {
      "glob": "META-INF/services/org.junit.platform.launcher.LauncherDiscoveryListener"
    },
    {
      "glob": "META-INF/services/org.junit.platform.launcher.LauncherSessionListener"
    },
    {
      "glob": "META-INF/services/org.junit.platform.launcher.PostDiscoveryFilter"
    },
    {
      "glob": "META-INF/services/org.junit.platform.launcher.TestExecutionListener"
    },
    {
      "glob": "_AL.yml"
    },
    {
      "glob": "_AR.yml"
    },
    {
      "glob": "_AT.yml"
    },
    {
      "glob": "_AU.yml"
    },
    {
      "glob": "_BE.yml"
    },
    {
      "glob": "_BG.yml"
    },
    {
      "glob": "_BORK.yml"
    },
    {
      "glob": "_BR.yml"
    },
    {
      "glob": "_BY.yml"
    },
    {
      "glob": "_CA.yml"
    },
    {
      "glob": "_CAT.yml"
    },
    {
      "glob": "_CH.yml"
    },
    {
      "glob": "_CN.yml"
    },
    {
      "glob": "_CZ.yml"
    },
    {
      "glob": "_DK.yml"
    },
    {
      "glob": "_EE.yml"
    },
    {
      "glob": "_EN.yml"
    },
    {
      "glob": "_FI.yml"
    },
    {
      "glob": "_FR.yml"
    },
    {
      "glob": "_GB.yml"
    },
    {
      "glob": "_GE.yml"
    },
    {
      "glob": "_GR.yml"
    },
    {
      "glob": "_ID.yml"
    },
    {
      "glob": "_IND.yml"
    },
    {
      "glob": "_MD.yml"
    },
    {
      "glob": "_MK.yml"
    },
    {
      "glob": "_MS.yml"
    },
    {
      "glob": "_MX.yml"
    },
    {
      "glob": "_NEP.yml"
    },
    {
      "glob": "_NG.yml"
    },
    {
      "glob": "_NO.yml"
    },
    {
      "glob": "_NZ.yml"
    },
    {
      "glob": "_PAK.yml"
    },
    {
      "glob": "_PH.yml"
    },
    {
      "glob": "_PK.yml"
    },
    {
      "glob": "_PY.yml"
    },
    {
      "glob": "_RU.yml"
    },
    {
      "glob": "_SE.yml"
    },
    {
      "glob": "_SG.yml"
    },
    {
      "glob": "_TW.yml"
    },
    {
      "glob": "_UG.yml"
    },
    {
      "glob": "_US.yml"
    },
    {
      "glob": "_ZA.yml"
    },
    {
      "glob": "ar.yml"
    },
    {
      "glob": "ar/ar"
    },
    {
      "glob": "be.yml"
    },
    {
      "glob": "be/be"
    },
    {
      "glob": "bg.yml"
    },
    {
      "glob": "bg/bg"
    },
    {
      "glob": "by.yml"
    },
    {
      "glob": "by/by"
    },
    {
      "glob": "ca-CAT.yml"
    },
    {
      "glob": "ca.yml"
    },
    {
      "glob": "ca/ca"
    },
    {
      "glob": "ca/ca-CAT"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AG"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AI"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AL"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AM"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AS"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AT"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_AU"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_BB"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_BE"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_BG"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_BM"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_BR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_BS"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_BY"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_CA"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_CH"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_CN"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_CZ"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_DE"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_DK"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_DM"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_DO"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_EE"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_ES"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_ET"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_FI"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_FR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_GB"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_GD"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_GE"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_GR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_GU"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_HR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_HU"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_ID"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_IL"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_IN"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_IT"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_JM"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_JP"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_KN"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_KR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_KY"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_LC"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_LV"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_MD"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_MK"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_MP"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_MS"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_MX"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_NG"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_NL"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_NO"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_NP"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_NZ"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_PH"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_PK"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_PL"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_PR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_PT"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_PY"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_RU"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_SE"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_SG"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_SK"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_SV"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_SX"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_TC"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_TH"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_TR"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_TT"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_TW"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_UA"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_UG"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_US"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_VC"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_VG"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_VI"
    },
    {
      "glob": "com/google/i18n/phonenumbers/data/PhoneNumberMetadataProto_ZA"
    },
    {
      "glob": "cs-CZ.yml"
    },
    {
      "glob": "cs.yml"
    },
    {
      "glob": "cs/cs"
    },
    {
      "glob": "cs/cs-CZ"
    },
    {
      "glob": "da-DK.yml"
    },
    {
      "glob": "da.yml"
    },
    {
      "glob": "da/da"
    },
    {
      "glob": "da/da-DK"
    },
    {
      "glob": "de-AT.yml"
    },
    {
      "glob": "de-CH.yml"
    },
    {
      "glob": "de-EN.yml"
    },
    {
      "glob": "de.yml"
    },
    {
      "glob": "de/de"
    },
    {
      "glob": "de/de-AT"
    },
    {
      "glob": "de/de-CH"
    },
    {
      "glob": "de/de-EN"
    },
    {
      "glob": "el-GR.yml"
    },
    {
      "glob": "el.yml"
    },
    {
      "glob": "el/el"
    },
    {
      "glob": "el/el-GR"
    },
    {
      "glob": "en-AU.yml"
    },
    {
      "glob": "en-BORK.yml"
    },
    {
      "glob": "en-CA.yml"
    },
    {
      "glob": "en-GB.yml"
    },
    {
      "glob": "en-IND.yml"
    },
    {
      "glob": "en-MD.yml"
    },
    {
      "glob": "en-MS.yml"
    },
    {
      "glob": "en-NEP.yml"
    },
    {
      "glob": "en-NG.yml"
    },
    {
      "glob": "en-NZ.yml"
    },
    {
      "glob": "en-PAK.yml"
    },
    {
      "glob": "en-PH.yml"
    },
    {
      "glob": "en-PK.yml"
    },
    {
      "glob": "en-SG.yml"
    },
    {
      "glob": "en-UG.yml"
    },
    {
      "glob": "en-US.yml"
    },
    {
      "glob": "en-ZA.yml"
    },
    {
      "glob": "en/address.yml"
    },
    {
      "glob": "en/ancient.yml"
    },
    {
      "glob": "en/animal.yml"
    },
    {
      "glob": "en/app.yml"
    },
    {
      "glob": "en/appliance.yml"
    },
    {
      "glob": "en/aqua_teen_hunger_force.yml"
    },
    {
      "glob": "en/artist.yml"
    },
    {
      "glob": "en/australia.yml"
    },
    {
      "glob": "en/aviation.yml"
    },
    {
      "glob": "en/aws.yml"
    },
    {
      "glob": "en/azure.yml"
    },
    {
      "glob": "en/babylon5.yml"
    },
    {
      "glob": "en/back_to_the_future.yml"
    },
    {
      "glob": "en/barcode.yml"
    },
    {
      "glob": "en/baseball.yml"
    },
    {
      "glob": "en/basketball.yml"
    },
    {
      "glob": "en/battlefield1.yml"
    },
    {
      "glob": "en/beer.yml"
    },
    {
      "glob": "en/big_bang_theory.yml"
    },
    {
      "glob": "en/blood_type.yml"
    },
    {
      "glob": "en/boardgame.yml"
    },
    {
      "glob": "en/bojack_horseman.yml"
    },
    {
      "glob": "en/book.yml"
    },
    {
      "glob": "en/bossa_nova.yml"
    },
    {
      "glob": "en/brand.yml"
    },
    {
      "glob": "en/breaking_bad.yml"
    },
    {
      "glob": "en/brooklyn_nine_nine.yml"
    },
    {
      "glob": "en/buffy.yml"
    },
    {
      "glob": "en/business.yml"
    },
    {
      "glob": "en/camera.yml"
    },
    {
      "glob": "en/cannabis.yml"
    },
    {
      "glob": "en/care_provider.yml"
    },
    {
      "glob": "en/cat.yml"
    },
    {
      "glob": "en/chess.yml"
    },
    {
      "glob": "en/chiquito.yml"
    },
    {
      "glob": "en/chuck_norris.yml"
    },
    {
      "glob": "en/clash_of_clans.yml"
    },
    {
      "glob": "en/code.yml"
    },
    {
      "glob": "en/coffee.yml"
    },
    {
      "glob": "en/coin.yml"
    },
    {
      "glob": "en/color.yml"
    },
    {
      "glob": "en/commerce.yml"
    },
    {
      "glob": "en/community.yml"
    },
    {
      "glob": "en/company.yml"
    },
    {
      "glob": "en/compass.yml"
    },
    {
      "glob": "en/computer.yml"
    },
    {
      "glob": "en/construction.yml"
    },
    {
      "glob": "en/control.yml"
    },
    {
      "glob": "en/cosmere.yml"
    },
    {
      "glob": "en/country.yml"
    },
    {
      "glob": "en/cowboy_bebop.yml"
    },
    {
      "glob": "en/cricket.yml"
    },
    {
      "glob": "en/crypto_coin.yml"
    },
    {
      "glob": "en/culture_series.yml"
    },
    {
      "glob": "en/currency.yml"
    },
    {
      "glob": "en/dark_souls.yml"
    },
    {
      "glob": "en/dc_comics.yml"
    },
    {
      "glob": "en/demographic.yml"
    },
    {
      "glob": "en/departed.yml"
    },
    {
      "glob": "en/dessert.yml"
    },
    {
      "glob": "en/detective_conan.yml"
    },
    {
      "glob": "en/device.yml"
    },
    {
      "glob": "en/disease.yml"
    },
    {
      "glob": "en/dnd.yml"
    },
    {
      "glob": "en/dog.yml"
    },
    {
      "glob": "en/domain.yml"
    },
    {
      "glob": "en/doraemon.yml"
    },
    {
      "glob": "en/dota2.yml"
    },
    {
      "glob": "en/dr_who.yml"
    },
    {
      "glob": "en/dragon_ball.yml"
    },
    {
      "glob": "en/driving_license.yml"
    },
    {
      "glob": "en/drone.yml"
    },
    {
      "glob": "en/dumb_and_dumber.yml"
    },
    {
      "glob": "en/dune.yml"
    },
    {
      "glob": "en/educator.yml"
    },
    {
      "glob": "en/elden_ring.yml"
    },
    {
      "glob": "en/elder_scrolls.yml"
    },
    {
      "glob": "en/electrical_components.yml"
    },
    {
      "glob": "en/emoji.yml"
    },
    {
      "glob": "en/en-AU"
    },
    {
      "glob": "en/en-BORK"
    },
    {
      "glob": "en/en-CA"
    },
    {
      "glob": "en/en-GB"
    },
    {
      "glob": "en/en-IND"
    },
    {
      "glob": "en/en-MD"
    },
    {
      "glob": "en/en-MS"
    },
    {
      "glob": "en/en-NEP"
    },
    {
      "glob": "en/en-NG"
    },
    {
      "glob": "en/en-NZ"
    },
    {
      "glob": "en/en-PAK"
    },
    {
      "glob": "en/en-PH"
    },
    {
      "glob": "en/en-PK"
    },
    {
      "glob": "en/en-SG"
    },
    {
      "glob": "en/en-UG"
    },
    {
      "glob": "en/en-US"
    },
    {
      "glob": "en/en-ZA"
    },
    {
      "glob": "en/englandfootball.yml"
    },
    {
      "glob": "en/esport.yml"
    },
    {
      "glob": "en/fallout.yml"
    },
    {
      "glob": "en/family_guy.yml"
    },
    {
      "glob": "en/famous_last_words.yml"
    },
    {
      "glob": "en/file.yml"
    },
    {
      "glob": "en/final_fantasy_xiv.yml"
    },
    {
      "glob": "en/final_space.yml"
    },
    {
      "glob": "en/finance.yml"
    },
    {
      "glob": "en/financial_terms.yml"
    },
    {
      "glob": "en/fma_brotherhood.yml"
    },
    {
      "glob": "en/food.yml"
    },
    {
      "glob": "en/football.yml"
    },
    {
      "glob": "en/formula1.yml"
    },
    {
      "glob": "en/fresh_prince_of_bel_air.yml"
    },
    {
      "glob": "en/friends.yml"
    },
    {
      "glob": "en/funny_name.yml"
    },
    {
      "glob": "en/futurama.yml"
    },
    {
      "glob": "en/game_of_thrones.yml"
    },
    {
      "glob": "en/garments_sizes.yml"
    },
    {
      "glob": "en/gender.yml"
    },
    {
      "glob": "en/ghostbusters.yml"
    },
    {
      "glob": "en/grateful_dead.yml"
    },
    {
      "glob": "en/greek_philosophers.yml"
    },
    {
      "glob": "en/hacker.yml"
    },
    {
      "glob": "en/half_life.yml"
    },
    {
      "glob": "en/harry_potter.yml"
    },
    {
      "glob": "en/hearthstone.yml"
    },
    {
      "glob": "en/heroes_of_the_storm.yml"
    },
    {
      "glob": "en/hey_arnold.yml"
    },
    {
      "glob": "en/hipster.yml"
    },
    {
      "glob": "en/hitchhikers_guide_to_the_galaxy.yml"
    },
    {
      "glob": "en/hobbit.yml"
    },
    {
      "glob": "en/hobby.yml"
    },
    {
      "glob": "en/hololive.yml"
    },
    {
      "glob": "en/horse.yml"
    },
    {
      "glob": "en/house.yml"
    },
    {
      "glob": "en/how_i_met_your_mother.yml"
    },
    {
      "glob": "en/how_to_train_your_dragon.yml"
    },
    {
      "glob": "en/id_number.yml"
    },
    {
      "glob": "en/industry_segments.yml"
    },
    {
      "glob": "en/internet.yml"
    },
    {
      "glob": "en/job.yml"
    },
    {
      "glob": "en/joke.yml"
    },
    {
      "glob": "en/kaamelott.yml"
    },
    {
      "glob": "en/kpop.yml"
    },
    {
      "glob": "en/largelanguagemodel.yml"
    },
    {
      "glob": "en/league_of_legends.yml"
    },
    {
      "glob": "en/lebowski.yml"
    },
    {
      "glob": "en/location.yml"
    },
    {
      "glob": "en/lord_of_the_rings.yml"
    },
    {
      "glob": "en/lorem.yml"
    },
    {
      "glob": "en/marketing.yml"
    },
    {
      "glob": "en/marvel_snap.yml"
    },
    {
      "glob": "en/mass_effect.yml"
    },
    {
      "glob": "en/matz.yml"
    },
    {
      "glob": "en/mbti.yml"
    },
    {
      "glob": "en/measurement.yml"
    },
    {
      "glob": "en/medical.yml"
    },
    {
      "glob": "en/medical_procedure.yml"
    },
    {
      "glob": "en/medication.yml"
    },
    {
      "glob": "en/military.yml"
    },
    {
      "glob": "en/minecraft.yml"
    },
    {
      "glob": "en/money_heist.yml"
    },
    {
      "glob": "en/mood.yml"
    },
    {
      "glob": "en/mountain.yml"
    },
    {
      "glob": "en/mountaineering.yml"
    },
    {
      "glob": "en/movie.yml"
    },
    {
      "glob": "en/music.yml"
    },
    {
      "glob": "en/myst.yml"
    },
    {
      "glob": "en/name.yml"
    },
    {
      "glob": "en/naruto.yml"
    },
    {
      "glob": "en/nation.yml"
    },
    {
      "glob": "en/nato_phonetic_alphabet.yml"
    },
    {
      "glob": "en/new_girl.yml"
    },
    {
      "glob": "en/nigeria.yml"
    },
    {
      "glob": "en/observation.yml"
    },
    {
      "glob": "en/olympic_sport.yml"
    },
    {
      "glob": "en/one_piece.yml"
    },
    {
      "glob": "en/oscar_movie.yml"
    },
    {
      "glob": "en/overwatch.yml"
    },
    {
      "glob": "en/passport.yml"
    },
    {
      "glob": "en/photography.yml"
    },
    {
      "glob": "en/planet.yml"
    },
    {
      "glob": "en/pokemon.yml"
    },
    {
      "glob": "en/princess_bride.yml"
    },
    {
      "glob": "en/programming_language.yml"
    },
    {
      "glob": "en/pronouns.yml"
    },
    {
      "glob": "en/red_dead_redemption2.yml"
    },
    {
      "glob": "en/relationship.yml"
    },
    {
      "glob": "en/resident_evil.yml"
    },
    {
      "glob": "en/restaurant.yml"
    },
    {
      "glob": "en/rick_and_morty.yml"
    },
    {
      "glob": "en/robin.yml"
    },
    {
      "glob": "en/rock_band.yml"
    },
    {
      "glob": "en/rupaul.yml"
    },
    {
      "glob": "en/science.yml"
    },
    {
      "glob": "en/seinfeld.yml"
    },
    {
      "glob": "en/show.yml"
    },
    {
      "glob": "en/silicon_valley.yml"
    },
    {
      "glob": "en/simpsons.yml"
    },
    {
      "glob": "en/sip.yml"
    },
    {
      "glob": "en/size.yml"
    },
    {
      "glob": "en/slack_emoji.yml"
    },
    {
      "glob": "en/sonic_the_hedgehog.yml"
    },
    {
      "glob": "en/soul_knight.yml"
    },
    {
      "glob": "en/south_park.yml"
    },
    {
      "glob": "en/space.yml"
    },
    {
      "glob": "en/spongebob.yml"
    },
    {
      "glob": "en/star_trek.yml"
    },
    {
      "glob": "en/star_wars.yml"
    },
    {
      "glob": "en/starcraft.yml"
    },
    {
      "glob": "en/stargate.yml"
    },
    {
      "glob": "en/stock.yml"
    },
    {
      "glob": "en/stranger_things.yml"
    },
    {
      "glob": "en/street_fighter.yml"
    },
    {
      "glob": "en/studio_ghibli.yml"
    },
    {
      "glob": "en/subscription.yml"
    },
    {
      "glob": "en/suits.yml"
    },
    {
      "glob": "en/super_mario.yml"
    },
    {
      "glob": "en/super_smash_bros.yml"
    },
    {
      "glob": "en/superhero.yml"
    },
    {
      "glob": "en/supernatural.yml"
    },
    {
      "glob": "en/sword_art_online.yml"
    },
    {
      "glob": "en/tea.yml"
    },
    {
      "glob": "en/team.yml"
    },
    {
      "glob": "en/the_expanse.yml"
    },
    {
      "glob": "en/the_it_crowd.yml"
    },
    {
      "glob": "en/the_kingkiller_chronicle.yml"
    },
    {
      "glob": "en/the_room.yml"
    },
    {
      "glob": "en/the_thick_of_it.yml"
    },
    {
      "glob": "en/the_venture_bros.yml"
    },
    {
      "glob": "en/tire.yml"
    },
    {
      "glob": "en/touhou.yml"
    },
    {
      "glob": "en/transport.yml"
    },
    {
      "glob": "en/tron.yml"
    },
    {
      "glob": "en/twin_peaks.yml"
    },
    {
      "glob": "en/twitter.yml"
    },
    {
      "glob": "en/university.yml"
    },
    {
      "glob": "en/v_for_vendetta.yml"
    },
    {
      "glob": "en/vehicle.yml"
    },
    {
      "glob": "en/verbs.yml"
    },
    {
      "glob": "en/video_game.yml"
    },
    {
      "glob": "en/volleyball.yml"
    },
    {
      "glob": "en/warhammer_fantasy.yml"
    },
    {
      "glob": "en/weather.yml"
    },
    {
      "glob": "en/witcher.yml"
    },
    {
      "glob": "en/words.yml"
    },
    {
      "glob": "en/world_of_warcraft.yml"
    },
    {
      "glob": "en/yoda.yml"
    },
    {
      "glob": "en/zelda.yml"
    },
    {
      "glob": "en/zodiac.yml"
    },
    {
      "glob": "es-AR.yml"
    },
    {
      "glob": "es-MX.yml"
    },
    {
      "glob": "es-PY.yml"
    },
    {
      "glob": "es.yml"
    },
    {
      "glob": "es/es"
    },
    {
      "glob": "es/es-AR"
    },
    {
      "glob": "es/es-MX"
    },
    {
      "glob": "es/es-PY"
    },
    {
      "glob": "et-EE.yml"
    },
    {
      "glob": "et.yml"
    },
    {
      "glob": "et/et"
    },
    {
      "glob": "et/et-EE"
    },
    {
      "glob": "fa.yml"
    },
    {
      "glob": "fa/fa"
    },
    {
      "glob": "fi-FI.yml"
    },
    {
      "glob": "fi.yml"
    },
    {
      "glob": "fi/fi"
    },
    {
      "glob": "fi/fi-FI"
    },
    {
      "glob": "fr-CA.yml"
    },
    {
      "glob": "fr-CH.yml"
    },
    {
      "glob": "fr-EN.yml"
    },
    {
      "glob": "fr-FR.yml"
    },
    {
      "glob": "fr.yml"
    },
    {
      "glob": "fr/fr"
    },
    {
      "glob": "fr/fr-CA"
    },
    {
      "glob": "fr/fr-CH"
    },
    {
      "glob": "fr/fr-EN"
    },
    {
      "glob": "fr/fr-FR"
    },
    {
      "glob": "he.yml"
    },
    {
      "glob": "he/he"
    },
    {
      "glob": "hr.yml"
    },
    {
      "glob": "hr/hr"
    },
    {
      "glob": "hu.yml"
    },
    {
      "glob": "hu/hu"
    },
    {
      "glob": "hy.yml"
    },
    {
      "glob": "hy/hy"
    },
    {
      "glob": "id-ID.yml"
    },
    {
      "glob": "id.yml"
    },
    {
      "glob": "id/id"
    },
    {
      "glob": "id/id-ID"
    },
    {
      "glob": "it.yml"
    },
    {
      "glob": "it/it"
    },
    {
      "glob": "ja.yml"
    },
    {
      "glob": "ja/ja"
    },
    {
      "glob": "junit-platform.properties"
    },
    {
      "glob": "ka.yml"
    },
    {
      "glob": "ka/ka"
    },
    {
      "glob": "ko.yml"
    },
    {
      "glob": "ko/ko"
    },
    {
      "glob": "logging.properties"
    },
    {
      "glob": "lv.yml"
    },
    {
      "glob": "lv/lv"
    },
    {
      "glob": "mk.yml"
    },
    {
      "glob": "mk/mk"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.AnnotationEngine"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.DoNotMockEnforcer"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.DoNotMockEnforcerWithType"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.InstantiatorProvider2"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.MemberAccessor"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.MockMaker"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.MockResolver"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.MockitoLogger"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.PluginSwitch"
    },
    {
      "glob": "mockito-extensions/org.mockito.plugins.StackTraceCleanerProvider"
    },
    {
      "glob": "nb-NO.yml"
    },
    {
      "glob": "nb.yml"
    },
    {
      "glob": "nb/nb"
    },
    {
      "glob": "nb/nb-NO"
    },
    {
      "glob": "net/datafaker/providers"
    },
    {
      "glob": "nl-BE.yml"
    },
    {
      "glob": "nl-NL.yml"
    },
    {
      "glob": "nl.yml"
    },
    {
      "glob": "nl/nl"
    },
    {
      "glob": "nl/nl-BE"
    },
    {
      "glob": "nl/nl-NL"
    },
    {
      "glob": "no-NO.yml"
    },
    {
      "glob": "no.yml"
    },
    {
      "glob": "no/no"
    },
    {
      "glob": "no/no-NO"
    },
    {
      "glob": "nothing.yml"
    },
    {
      "glob": "nothing/nothing"
    },
    {
      "glob": "org/mockito/internal/creation/bytebuddy/MockMethodAdvice$ForEquals.class"
    },
    {
      "glob": "org/mockito/internal/creation/bytebuddy/MockMethodAdvice$ForHashCode.class"
    },
    {
      "glob": "org/mockito/internal/creation/bytebuddy/MockMethodAdvice$ForStatic.class"
    },
    {
      "glob": "org/mockito/internal/creation/bytebuddy/MockMethodAdvice.class"
    },
    {
      "glob": "org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.raw"
    },
    {
      "glob": "org/slf4j/impl/StaticLoggerBinder.class"
    },
    {
      "glob": "pl.yml"
    },
    {
      "glob": "pl/pl"
    },
    {
      "glob": "pt-BR.yml"
    },
    {
      "glob": "pt.yml"
    },
    {
      "glob": "pt/pt"
    },
    {
      "glob": "pt/pt-BR"
    },
    {
      "glob": "ro-MD.yml"
    },
    {
      "glob": "ro.yml"
    },
    {
      "glob": "ro/ro"
    },
    {
      "glob": "ro/ro-MD"
    },
    {
      "glob": "ru-MD.yml"
    },
    {
      "glob": "ru-RU.yml"
    },
    {
      "glob": "ru.yml"
    },
    {
      "glob": "ru/ru"
    },
    {
      "glob": "ru/ru-MD"
    },
    {
      "glob": "ru/ru-RU"
    },
    {
      "glob": "sk.yml"
    },
    {
      "glob": "sk/sk"
    },
    {
      "glob": "sq.yml"
    },
    {
      "glob": "sq/sq"
    },
    {
      "glob": "sv-SE.yml"
    },
    {
      "glob": "sv.yml"
    },
    {
      "glob": "sv/sv"
    },
    {
      "glob": "sv/sv-SE"
    },
    {
      "glob": "test.yml"
    },
    {
      "glob": "test/test"
    },
    {
      "glob": "th.yml"
    },
    {
      "glob": "th/th"
    },
    {
      "glob": "tr.yml"
    },
    {
      "glob": "tr/tr"
    },
    {
      "glob": "uk.yml"
    },
    {
      "glob": "uk/uk"
    },
    {
      "glob": "vi.yml"
    },
    {
      "glob": "vi/vi"
    },
    {
      "glob": "zh-CN.yml"
    },
    {
      "glob": "zh-TW.yml"
    },
    {
      "glob": "zh.yml"
    },
    {
      "glob": "zh/zh"
    },
    {
      "glob": "zh/zh-CN"
    },
    {
      "glob": "zh/zh-TW"
    },
    {
      "module": "java.base",
      "glob": "java/util/currency.data"
    },
    {
      "module": "java.base",
      "glob": "jdk/internal/icu/impl/data/icudt74b/nfc.nrm"
    },
    {
      "module": "java.base",
      "glob": "jdk/internal/icu/impl/data/icudt74b/nfkc.nrm"
    },
    {
      "module": "java.base",
      "glob": "jdk/internal/icu/impl/data/icudt74b/ubidi.icu"
    },
    {
      "module": "java.base",
      "glob": "jdk/internal/icu/impl/data/icudt74b/uprops.icu"
    },
    {
      "module": "java.base",
      "glob": "sun/net/idn/uidna.spp"
    },
    {
      "module": "java.desktop",
      "glob": "sun/awt/resources/awt_tr.properties"
    },
    {
      "module": "java.desktop",
      "glob": "sun/awt/resources/awt_tr_TR.properties"
    },
    {
      "module": "java.desktop",
      "glob": "sun/awt/resources/awtosx_tr.properties"
    },
    {
      "module": "java.desktop",
      "glob": "sun/awt/resources/awtosx_tr_TR.properties"
    },
    {
      "module": "java.logging",
      "glob": "sun/util/logging/resources/logging_tr.properties"
    },
    {
      "module": "java.logging",
      "glob": "sun/util/logging/resources/logging_tr_TR.properties"
    }
  ],
  
  "bundles": [
    {
      "name": "sun.awt.resources.awt",
      "locales": [
        "tr-TR"
      ]
    },
    {
      "name": "sun.awt.resources.awtosx",
      "locales": [
        "tr-TR"
      ]
    }
  ],
  "serialization": [
    {
      "type": "org.junit.platform.launcher.TestIdentifier$SerializedForm"
    }
  ],
  "jni": [
    {
      "type": "[Lsun.java2d.loops.GraphicsPrimitive;"
    },
    {
      "type": "com.apple.eawt._AppEventHandler",
      "methods": [
        {
          "name": "handleNativeNotification",
          "parameterTypes": [
            "int"
          ]
        }
      ]
    },
    {
      "type": "com.apple.eawt._AppMenuBarHandler",
      "methods": [
        {
          "name": "initMenuStates",
          "parameterTypes": [
            "boolean",
            "boolean",
            "boolean",
            "boolean"
          ]
        }
      ]
    },
    {
      "type": "com.intellij.rt.junit.JUnitStarter",
      "methods": [
        {
          "name": "main",
          "parameterTypes": [
            "java.lang.String[]"
          ]
        }
      ]
    },
    {
      "type": "com.sun.imageio.plugins.jpeg.JPEGImageWriter",
      "methods": [
        {
          "name": "grabPixels",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "warningOccurred",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "warningWithMessage",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "writeMetadata",
          "parameterTypes": []
        },
        {
          "name": "writeOutputData",
          "parameterTypes": [
            "byte[]",
            "int",
            "int"
          ]
        }
      ]
    },
    {
      "type": "java.awt.AlphaComposite",
      "fields": [
        {
          "name": "extraAlpha"
        },
        {
          "name": "rule"
        }
      ]
    },
    {
      "type": "java.awt.Color",
      "methods": [
        {
          "name": "getRGB",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.awt.DisplayMode",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "int",
            "int",
            "int",
            "int"
          ]
        }
      ]
    },
    {
      "type": "java.awt.event.InputEvent",
      "methods": [
        {
          "name": "getButtonDownMasks",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.awt.geom.AffineTransform",
      "fields": [
        {
          "name": "m00"
        },
        {
          "name": "m01"
        },
        {
          "name": "m02"
        },
        {
          "name": "m10"
        },
        {
          "name": "m11"
        },
        {
          "name": "m12"
        }
      ]
    },
    {
      "type": "java.awt.geom.Path2D",
      "fields": [
        {
          "name": "numTypes"
        },
        {
          "name": "pointTypes"
        },
        {
          "name": "windingRule"
        }
      ]
    },
    {
      "type": "java.awt.geom.Path2D$Float",
      "fields": [
        {
          "name": "floatCoords"
        }
      ]
    },
    {
      "type": "java.awt.geom.Rectangle2D$Double",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "double",
            "double",
            "double",
            "double"
          ]
        }
      ]
    },
    {
      "type": "java.awt.image.BufferedImage",
      "fields": [
        {
          "name": "colorModel"
        },
        {
          "name": "imageType"
        },
        {
          "name": "raster"
        }
      ],
      "methods": [
        {
          "name": "getRGB",
          "parameterTypes": [
            "int",
            "int",
            "int",
            "int",
            "int[]",
            "int",
            "int"
          ]
        },
        {
          "name": "setRGB",
          "parameterTypes": [
            "int",
            "int",
            "int",
            "int",
            "int[]",
            "int",
            "int"
          ]
        }
      ]
    },
    {
      "type": "java.awt.image.ColorModel",
      "fields": [
        {
          "name": "colorSpace"
        },
        {
          "name": "colorSpaceType"
        },
        {
          "name": "isAlphaPremultiplied"
        },
        {
          "name": "is_sRGB"
        },
        {
          "name": "nBits"
        },
        {
          "name": "numComponents"
        },
        {
          "name": "supportsAlpha"
        },
        {
          "name": "transparency"
        }
      ],
      "methods": [
        {
          "name": "getRGBdefault",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.awt.image.IndexColorModel",
      "fields": [
        {
          "name": "allgrayopaque"
        },
        {
          "name": "colorData"
        },
        {
          "name": "map_size"
        },
        {
          "name": "rgb"
        },
        {
          "name": "transparent_index"
        }
      ]
    },
    {
      "type": "java.awt.image.Raster",
      "fields": [
        {
          "name": "dataBuffer"
        },
        {
          "name": "height"
        },
        {
          "name": "minX"
        },
        {
          "name": "minY"
        },
        {
          "name": "numBands"
        },
        {
          "name": "numDataElements"
        },
        {
          "name": "sampleModel"
        },
        {
          "name": "sampleModelTranslateX"
        },
        {
          "name": "sampleModelTranslateY"
        },
        {
          "name": "width"
        }
      ]
    },
    {
      "type": "java.awt.image.SampleModel",
      "fields": [
        {
          "name": "height"
        },
        {
          "name": "width"
        }
      ],
      "methods": [
        {
          "name": "getPixels",
          "parameterTypes": [
            "int",
            "int",
            "int",
            "int",
            "int[]",
            "java.awt.image.DataBuffer"
          ]
        },
        {
          "name": "setPixels",
          "parameterTypes": [
            "int",
            "int",
            "int",
            "int",
            "int[]",
            "java.awt.image.DataBuffer"
          ]
        }
      ]
    },
    {
      "type": "java.awt.image.SinglePixelPackedSampleModel",
      "fields": [
        {
          "name": "bitMasks"
        },
        {
          "name": "bitOffsets"
        },
        {
          "name": "bitSizes"
        },
        {
          "name": "maxBitSize"
        }
      ]
    },
    {
      "type": "java.lang.Boolean",
      "methods": [
        {
          "name": "getBoolean",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.lang.Class",
      "methods": [
        {
          "name": "getCanonicalName",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.InternalError",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.lang.String",
      "methods": [
        {
          "name": "lastIndexOf",
          "parameterTypes": [
            "int"
          ]
        },
        {
          "name": "substring",
          "parameterTypes": [
            "int"
          ]
        }
      ]
    },
    {
      "type": "java.lang.System",
      "methods": [
        {
          "name": "getProperty",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "load",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "setProperty",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "javax.imageio.plugins.jpeg.JPEGHuffmanTable",
      "fields": [
        {
          "name": "lengths"
        },
        {
          "name": "values"
        }
      ]
    },
    {
      "type": "javax.imageio.plugins.jpeg.JPEGQTable",
      "fields": [
        {
          "name": "qTable"
        }
      ]
    },
    {
      "type": "sun.awt.AWTAutoShutdown",
      "methods": [
        {
          "name": "notifyToolkitThreadBusy",
          "parameterTypes": []
        },
        {
          "name": "notifyToolkitThreadFree",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.awt.SunHints",
      "fields": [
        {
          "name": "INTVAL_STROKE_PURE"
        }
      ]
    },
    {
      "type": "sun.awt.image.BufImgSurfaceData$ICMColorData",
      "fields": [
        {
          "name": "pData"
        }
      ],
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long"
          ]
        }
      ]
    },
    {
      "type": "sun.awt.image.ByteComponentRaster",
      "fields": [
        {
          "name": "data"
        },
        {
          "name": "dataOffsets"
        },
        {
          "name": "pixelStride"
        },
        {
          "name": "scanlineStride"
        },
        {
          "name": "type"
        }
      ]
    },
    {
      "type": "sun.awt.image.IntegerComponentRaster",
      "fields": [
        {
          "name": "data"
        },
        {
          "name": "dataOffsets"
        },
        {
          "name": "pixelStride"
        },
        {
          "name": "scanlineStride"
        },
        {
          "name": "type"
        }
      ]
    },
    {
      "type": "sun.instrument.InstrumentationImpl",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "boolean",
            "boolean",
            "boolean"
          ]
        },
        {
          "name": "loadClassAndCallAgentmain",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "loadClassAndCallPremain",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String"
          ]
        },
        {
          "name": "transform",
          "parameterTypes": [
            "java.lang.Module",
            "java.lang.ClassLoader",
            "java.lang.String",
            "java.lang.Class",
            "java.security.ProtectionDomain",
            "byte[]",
            "boolean"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.Disposer",
      "methods": [
        {
          "name": "addRecord",
          "parameterTypes": [
            "java.lang.Object",
            "long",
            "long"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.InvalidPipeException"
    },
    {
      "type": "sun.java2d.NullSurfaceData"
    },
    {
      "type": "sun.java2d.SunGraphics2D",
      "fields": [
        {
          "name": "clipRegion"
        },
        {
          "name": "composite"
        },
        {
          "name": "eargb"
        },
        {
          "name": "lcdTextContrast"
        },
        {
          "name": "pixel"
        },
        {
          "name": "strokeHint"
        }
      ]
    },
    {
      "type": "sun.java2d.SurfaceData",
      "fields": [
        {
          "name": "pData"
        },
        {
          "name": "valid"
        }
      ]
    },
    {
      "type": "sun.java2d.loops.Blit",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.BlitBg",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.CompositeType",
      "fields": [
        {
          "name": "AnyAlpha"
        },
        {
          "name": "Src"
        },
        {
          "name": "SrcNoEa"
        },
        {
          "name": "SrcOver"
        },
        {
          "name": "SrcOverNoEa"
        },
        {
          "name": "Xor"
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawGlyphList",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawGlyphListAA",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawGlyphListLCD",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawLine",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawParallelogram",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawPath",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawPolygons",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.DrawRect",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.FillParallelogram",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.FillPath",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.FillRect",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.FillSpans",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.GraphicsPrimitive",
      "fields": [
        {
          "name": "pNativePrim"
        }
      ]
    },
    {
      "type": "sun.java2d.loops.GraphicsPrimitiveMgr",
      "methods": [
        {
          "name": "register",
          "parameterTypes": [
            "sun.java2d.loops.GraphicsPrimitive[]"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.MaskBlit",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.MaskFill",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.ScaledBlit",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.SurfaceType",
      "fields": [
        {
          "name": "Any3Byte"
        },
        {
          "name": "Any4Byte"
        },
        {
          "name": "AnyByte"
        },
        {
          "name": "AnyColor"
        },
        {
          "name": "AnyInt"
        },
        {
          "name": "AnyShort"
        },
        {
          "name": "ByteBinary1Bit"
        },
        {
          "name": "ByteBinary2Bit"
        },
        {
          "name": "ByteBinary4Bit"
        },
        {
          "name": "ByteGray"
        },
        {
          "name": "ByteIndexed"
        },
        {
          "name": "ByteIndexedBm"
        },
        {
          "name": "FourByteAbgr"
        },
        {
          "name": "FourByteAbgrPre"
        },
        {
          "name": "Index12Gray"
        },
        {
          "name": "Index8Gray"
        },
        {
          "name": "IntArgb"
        },
        {
          "name": "IntArgbBm"
        },
        {
          "name": "IntArgbPre"
        },
        {
          "name": "IntBgr"
        },
        {
          "name": "IntRgb"
        },
        {
          "name": "IntRgbx"
        },
        {
          "name": "OpaqueColor"
        },
        {
          "name": "ThreeByteBgr"
        },
        {
          "name": "Ushort4444Argb"
        },
        {
          "name": "Ushort555Rgb"
        },
        {
          "name": "Ushort555Rgbx"
        },
        {
          "name": "Ushort565Rgb"
        },
        {
          "name": "UshortGray"
        },
        {
          "name": "UshortIndexed"
        }
      ]
    },
    {
      "type": "sun.java2d.loops.TransformHelper",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "long",
            "sun.java2d.loops.SurfaceType",
            "sun.java2d.loops.CompositeType",
            "sun.java2d.loops.SurfaceType"
          ]
        }
      ]
    },
    {
      "type": "sun.java2d.loops.XORComposite",
      "fields": [
        {
          "name": "alphaMask"
        },
        {
          "name": "xorColor"
        },
        {
          "name": "xorPixel"
        }
      ]
    },
    {
      "type": "sun.java2d.pipe.Region",
      "fields": [
        {
          "name": "bands"
        },
        {
          "name": "endIndex"
        },
        {
          "name": "hix"
        },
        {
          "name": "hiy"
        },
        {
          "name": "lox"
        },
        {
          "name": "loy"
        }
      ]
    },
    {
      "type": "sun.java2d.pipe.RegionIterator",
      "fields": [
        {
          "name": "curIndex"
        },
        {
          "name": "numXbands"
        },
        {
          "name": "region"
        }
      ]
    },
    {
      "type": "sun.launcher.LauncherHelper",
      "fields": [
        {
          "name": "isStaticMain"
        },
        {
          "name": "noArgMain"
        }
      ],
      "methods": [
        {
          "name": "checkAndLoadMain",
          "parameterTypes": [
            "boolean",
            "int",
            "java.lang.String"
          ]
        },
        {
          "name": "getApplicationClass",
          "parameterTypes": []
        },
        {
          "name": "makePlatformString",
          "parameterTypes": [
            "boolean",
            "byte[]"
          ]
        }
      ]
    },
    {
      "type": "sun.lwawt.macosx.LWCToolkit",
      "methods": [
        {
          "name": "installToolkitThreadInJava",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.management.VMManagementImpl",
      "fields": [
        {
          "name": "compTimeMonitoringSupport"
        },
        {
          "name": "currentThreadCpuTimeSupport"
        },
        {
          "name": "objectMonitorUsageSupport"
        },
        {
          "name": "otherThreadCpuTimeSupport"
        },
        {
          "name": "remoteDiagnosticCommandsSupport"
        },
        {
          "name": "synchronizerUsageSupport"
        },
        {
          "name": "threadAllocatedMemorySupport"
        },
        {
          "name": "threadContentionMonitoringSupport"
        }
      ]
    }
  ]
}
