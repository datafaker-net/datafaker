{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["trimmer","stopWordFilter"]},"docs":[{"location":"documentation/contributing/","title":"Contributing","text":"<p>First and foremost thanks to anyone who contributes, very much appreciated.</p>"},{"location":"documentation/contributing/#guidelines","title":"Guidelines","text":"<ul> <li>If you add new faker classes like <code>Address</code>, <code>Country</code>, and <code>Number</code> they should be accompanied by a unit test.</li> <li>New faker classes should be placed in the relevant group of providers. For example: <code>Minecraft</code> class will be in  the <code>videogame</code> group, <code>Address</code> in the <code>base</code> group.</li> <li>If you add a new faker class, update the <code>README.md</code>.</li> <li>Submit a PR with your change and if there are no comments, changes will be merged in.</li> <li>If you're not sure about the change, raise an issue and have a discussion before spending time coding it up.</li> <li>Try and make one logical change per PR. That is not make many changes in one PR. Submit multiple PRs instead.</li> <li>Starting with Datafaker 2.x, Java 17 is our target version. If you need anything older than that, we recommend using the 1.x versions of Datafaker instead. Note that while the 1.x is stable and free of known bugs, this branch won't receive future updates.</li> </ul>"},{"location":"documentation/contributing/#building","title":"Building","text":"<ul> <li>Should be as easy as running <code>mvnw clean install</code> on the root directory.</li> </ul>"},{"location":"documentation/custom-providers/","title":"Custom providers","text":"<p>Since version 1.2.0 of Datafaker it's possible create your own provider of data.</p> <p>A full example can be found in the source code.</p>"},{"location":"documentation/custom-providers/#custom-hardcoded-provider","title":"Custom hardcoded provider","text":"<p>To create a custom provider of data, you'll need to do the following steps:</p> <ul> <li>Create custom provider of data</li> <li>Create your own custom faker which extends <code>Faker</code> and register custom provider</li> </ul> <p>In code, this would look like the following:</p>"},{"location":"documentation/custom-providers/#hardcoded-provider","title":"Hardcoded provider","text":"<p>Create a custom provider of data:</p> Java <pre><code>public static class Insect extends AbstractProvider&lt;BaseProviders&gt; {\n    private static final WeightedRandomSelector selector = new WeightedRandomSelector(new Random());\n\n    private static final String[] INSECT_NAMES = { \"Ant\", \"Beetle\", \"Butterfly\", \"Wasp\" };\n    private static final List&lt;Map&lt;String, Object&gt;&gt; WEIGHTED_INSECTS = List.of(\n        Map.of(\"value\", \"Driver ant\", \"weight\", 6.0),\n        Map.of(\"value\", \"Fire ant\", \"weight\", 3.0),\n        Map.of(\"value\", \"Harvester ant\", \"weight\", 1.0)\n    );\n\n    public Insect(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String nextInsectName() {\n        return INSECT_NAMES[faker.random().nextInt(INSECT_NAMES.length)];\n    }\n\n    public String weightedInsectName() {\n        return selector.select(WEIGHTED_INSECTS);\n    }\n}\n</code></pre>"},{"location":"documentation/custom-providers/#register-provider","title":"Register provider","text":"<p>Create your own custom faker, which extends <code>Faker</code>, and register the custom provider:</p> Java <pre><code>public static class MyCustomFaker extends Faker {\n    public Insect insect() {\n        return getProvider(Insect.class, Insect::new, this);\n    }\n}\n</code></pre>"},{"location":"documentation/custom-providers/#usage","title":"Usage","text":"<p>To use the custom faker, you can do the following:</p> Java <pre><code>MyCustomFaker myFaker = new MyCustomFaker();\nSystem.out.println(myFaker.insect().nextInsectName());\n</code></pre> <p>This will print something like the following:</p> <pre><code>Wasp\n</code></pre> <p>Usafe of weigted random selector is in the POC stage and is currently available only for custom hardcoded providers.</p> <p>To use a random selector based on weights, you can do the following:</p> Java <pre><code>MyCustomFaker myFaker = new MyCustomFaker();\nSystem.out.println(myFaker.insect().weightedInsectName());\n</code></pre> <p>This will return a random insect name but based on the provided weights <pre><code>Driver ant\n</code></pre></p>"},{"location":"documentation/custom-providers/#custom-provider-using-yaml-file","title":"Custom provider using Yaml file","text":"<p>In case you have a large set of data to load, it might be better to use a Yaml file.</p> <p>To create a custom provider of data fom a file, you'll need to do the following steps:</p> <ul> <li>Create a custom provider of data</li> <li>Create your own custom faker which extends <code>Faker</code> and register custom provider</li> </ul>"},{"location":"documentation/custom-providers/#yaml-provider","title":"Yaml provider","text":"<p>First, create the custom provider which loads the data from a file:</p> Java <pre><code>public class InsectFromFile extends AbstractProvider&lt;BaseProviders&gt; {\n    private static final String KEY = \"insectsfromfile\";\n\n    public InsectFromFile(BaseProviders faker) {\n        super(faker);\n        faker.addPath(Locale.ENGLISH, Paths.get(\"src/test/ants.yml\"));\n        faker.addPath(Locale.ENGLISH, Paths.get(\"src/test/bees.yml\"));\n    }\n\n    public String ant() {\n        return resolve(KEY + \".ants\");\n    }\n\n    public String bee() {\n        return resolve(KEY + \".bees\");\n    }\n}\n</code></pre> <p>The <code>ants.yml</code> would look like the following:</p> <pre><code>en:\n  faker:\n    insectsfromfile:\n      ants: ['Driver ant', 'Fire ant', 'Harvester ant', 'Honey ant', 'Leafcutter ant', 'Sahara desert ant']\n</code></pre> <p>And if you want to use multiple YAML files, the <code>bees.yml</code> would look like this:</p> <pre><code>en:\n  faker:\n    insectsfromfile:\n      bees: ['Bumblebee', 'Euglossine bee', 'Honeybee', 'Carpenter bee', 'Leaf-cutter bee', 'Mining bee']\n</code></pre>"},{"location":"documentation/custom-providers/#register-provider_1","title":"Register provider","text":"<p>Registering the provider would happen like this:</p> Java <pre><code>public static class MyCustomFaker extends Faker {\n    public InsectFromFile insectFromFile() {\n        return getProvider(InsectFromFile.class, InsectFromFile::new, this);\n    }\n}\n</code></pre>"},{"location":"documentation/custom-providers/#usage_1","title":"Usage","text":"<p>To use the custom faker, you can do the following:</p> Java <pre><code>MyCustomFaker myFaker = new MyCustomFaker();\nSystem.out.println(myFaker.insectFromFile().ant());\n</code></pre> <p>This will print something like the following:</p> <pre><code>Honey ant\n</code></pre>"},{"location":"documentation/date-format/","title":"Date formats","text":"<p>Since 1.2.0 Datafaker supports specifying of date formats for dates and timestamps.</p> Java <pre><code>Faker faker = new Faker();\nSystem.out.println(faker.timeAndDate().future(1, TimeUnit.HOURS, \"yyyy MM.dd mm:hh:ss\"));\nSystem.out.println(faker.timeAndDate().past(1, TimeUnit.HOURS, \"yyyy-MM-dd mm:hh:ss\"));\nSystem.out.println(faker.timeAndDate().birthday(1, 99, \"yyyy/MM/dd\"));\n</code></pre> <p>And also this feature could be used in expressions like</p> Java <pre><code>faker.expression(\"#{date.past '15','SECONDS','dd/MM/yyyy hh:mm:ss'}\");\n</code></pre> <p>List of available time units:</p> Name Time unit Since NANO NANOSECOND 1.2.0 NANOS NANOSECOND 1.2.0 MICRO MICROSECOND 1.2.0 MICROS MICROSECOND 1.2.0 MILLI MILLISECOND 1.2.0 MILLIS MILLISECOND 1.2.0 SECOND SECOND 1.2.0 SECONDS SECOND 1.2.0 MINUTE MINUTE 1.2.0 MINUTES MINUTE 1.2.0 HOUR HOUR 1.2.0 HOURS HOUR 1.2.0 DAY DAY 1.2.0 DAYS DAY 1.2.0"},{"location":"documentation/expressions/","title":"Expressions","text":"<p>Datafaker supports different kind of expressions which allows to customise the output. </p>"},{"location":"documentation/expressions/#letterify","title":"Letterify","text":"<p>This one will replace <code>?</code> symbols with latin letters e.g. <pre><code>Faker faker = new Faker();\nfaker.expression(\"#{letterify 'test????test'}\"); // could give e.g. testqwastest\n// Also there could a third argument telling if characters should be uppercase\nfaker.expression(\"#{letterify 'test????test','true'}\"); // could give e.g. testSKDLtest\n</code></pre></p>"},{"location":"documentation/expressions/#numerify","title":"Numerify","text":"<p>This one will replace <code>#</code> symbols with digits e.g. <pre><code>Faker faker = new Faker();\nfaker.expression(\"#{numerify '#test#'}\"); // could give e.g. 3test5\nfaker.expression(\"#{numerify '####'}\"); // could give e.g. 1234\n</code></pre></p>"},{"location":"documentation/expressions/#bothify","title":"Bothify","text":"<p>Applies both letterify and numerify e.g. <pre><code>Faker faker = new Faker();\nfaker.expression(\"#{bothify '?#?#?#?#'}\"); // could give a1b2c3d4\nfaker.expression(\"#{bothify '?#?#?#?#', 'true'}\"); // could give A1B2C3D4\n</code></pre></p>"},{"location":"documentation/expressions/#templatify","title":"Templatify","text":"<p>This is available since 1.2.0</p> <p>This one will replace symbol mentioned in the second args with one of symbols mentioned after it. <pre><code>Faker faker = new Faker();\n// e.g. there is expression test and we want to replace t with q or @\nfaker.expression(\"#{templatify 'test','t','q','@'}\"); // could give @esq\n// another example there is expression test and we want to replace t with q or @ or $ or *\nfaker.expression(\"#{templatify 'test','t','q','@','$','*'}\"); // could give @esq\n</code></pre></p>"},{"location":"documentation/expressions/#examplify","title":"Examplify","text":"<p>This one will replace symbols by example: uppercase with uppercase, digit with digit, lowercase with lowercase. <pre><code>Faker faker = new Faker();\nfaker.expression(\"#{examplify 'ABC'}\"); // could give QWE\nfaker.expression(\"#{examplify 'test'}\"); // could give ghjk\n</code></pre></p>"},{"location":"documentation/expressions/#regexify","title":"Regexify","text":"<p>This one allows generating output based on regexp, e.g. <pre><code>Faker faker = new Faker();\nfaker.expression(\"#{regexify '(a|b){2,3}'}\"); // could give ab\nfaker.regexify(\"[a-z]{4,10}\"); // could give wbevoa\n</code></pre></p>"},{"location":"documentation/expressions/#options","title":"Options","text":"<p>This is available since 1.2.0</p> <p>This will return one from the provided options e.g. <pre><code>Faker faker = new Faker();\nfaker.expression(\"#{options.option 'ABC','2','5','$'}\"); // could give $\nfaker.expression(\"#{options.option '23','2','5','$','%','*'}\"); // could give *\n</code></pre></p>"},{"location":"documentation/expressions/#csv","title":"Csv","text":"<p>This is available since 1.4.0</p> <p>The expression will return generated csv based on input parameters <pre><code>faker.expression(\"#{csv '1','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");\n// \"name_column\",\"last_name_column\"\n// \"Sabrina\",\"Kihn\"\nfaker.expression(\"#{csv ' ### ','\\\"','false','3','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");\n// \"Thad\" ### \"Crist\"\n// \"Kathryne\" ### \"Wuckert\"\n// \"Sybil\" ### \"Connelly\"\n</code></pre></p>"},{"location":"documentation/expressions/#json","title":"Json","text":"<p>This is available since 1.4.0</p> <p>The expression will return generated json based on input parameters <pre><code>faker.expression(\"#{json 'person','#{json ''first_name'',''#{Name.first_name}'',''last_name'',''#{Name.last_name}''}','address','#{json ''country'',''#{Address.country}'',''city'',''#{Address.city}''}'}\");\n// {\"person\": {\"first_name\": \"Barbie\", \"last_name\": \"Durgan\"}, \"address\": {\"country\": \"Albania\", \"city\": \"East Catarinahaven\"}}\n</code></pre></p>"},{"location":"documentation/expressions/#others","title":"Others","text":"<p>It is possible to call methods returning string values and taking primitive or string args via expressions e.g. <pre><code>Faker faker = new Faker();\nfaker.expression(\"#{date.birthday 'yy DDD hh:mm:ss'}\");\nfaker.expression(\"#{color.name}\");\n</code></pre></p>"},{"location":"documentation/first-time-contributor/","title":"First time contributor guide","text":"<p>So you are contributing your first PR, that's great! This guide will help you get started.</p>"},{"location":"documentation/first-time-contributor/#getting-started","title":"Getting started","text":"<p>To get started, you will need to fork the repository and clone it to your local machine. You can find a guide on how to do this here.</p> <p>If this is your first time contributing to an open source project, you can read this guide.</p>"},{"location":"documentation/first-time-contributor/#making-changes","title":"Making changes","text":"<p>Before making changes it is recommended to create an issue on the repository. This will allow you to discuss the changes you want to make. This will also allow you to get feedback on your changes before you start.</p> <p>It is also recommended to create to read the documentation on contributing to Datafaker. This will help you get started. See CONTRIBUTING.md</p>"},{"location":"documentation/first-time-contributor/#creating-a-branch","title":"Creating a branch","text":"<p>You are free to name the branch as you see fit. It could be descriptive to give an idea of what you are working on but there are no strict rules.</p>"},{"location":"documentation/first-time-contributor/#committing-changes","title":"Committing changes","text":"<p>When committing changes, there are no strict rules. However, descriptive commit messages are welcomed. This will help others understand what you are working on.</p>"},{"location":"documentation/first-time-contributor/#creating-a-pull-request","title":"Creating a pull request","text":"<p>When your changes are ready and pushed to your fork, you can create a pull request. This will allow you to discuss your changes and get feedback.</p>"},{"location":"documentation/formats/","title":"Formats (This is DEPRECATED functionality! Please have a look at Transformation Schemas instead)","text":"<p>Since version 1.2.0 of Datafaker it's possible to export generated data to a file format of your choice.</p> <p>The currently supported file formats are:</p> <ul> <li>XML</li> </ul>"},{"location":"documentation/formats/#xml","title":"XML","text":""},{"location":"documentation/formats/#elements-and-attributes","title":"Elements and attributes","text":"<p>In case you want to generate XML, Datafaker provides a facility to build XML elements and  attributes using randomly generated data in the following way: </p> Java <pre><code>public static void main(String[] args) {\n    Faker faker = new Faker();\n\n    Collection&lt;Xml.XmlNode&gt; address = faker.&lt;Xml.XmlNode&gt;collection()\n            .suppliers(() -&gt; new Xml.XmlNode(\"address\",\n                    map(entry(\"country\", faker.address().country()),\n                            entry(\"city\", faker.address().city()), entry(\"streetAddress\", faker.address().streetAddress())), Collections.emptyList()))\n            .maxLen(3).build().get();\n\n    Collection&lt;Xml.XmlNode&gt; persons = faker.&lt;Xml.XmlNode&gt;collection()\n            .suppliers(() -&gt; new Xml.XmlNode(\"person\",\n                    map(entry(\"firstname\", faker.name().firstName()),\n                            entry(\"lastname\", faker.name().lastName())),\n                    of(new Xml.XmlNode(\"addresses\", address)))).maxLen(3).build().get();\n\n    String str = new Xml(new Xml.XmlNode(\"persons\", persons)).generate(true);\n    System.out.println(str);\n}\n\nprivate static &lt;T&gt; Collection&lt;T&gt; of(T... elems) {\n    return Arrays.asList(elems);\n}\n\nprivate static Map.Entry&lt;String, String&gt; entry(String key, String value) {\n    return new AbstractMap.SimpleEntry&lt;&gt;(key, value);\n}\n\nprivate static Map&lt;String, String&gt; map(Map.Entry&lt;String, String&gt;... entries) {\n    Map&lt;String, String&gt; map = new LinkedHashMap&lt;&gt;();\n    for (Map.Entry&lt;String, String&gt; entry : entries) {\n        map.put(entry.getKey(), entry.getValue());\n    }\n    return map;\n}    \n</code></pre> <p>This will produce the following output:</p> <pre><code>&lt;persons&gt;\n    &lt;person firstname=\"Chuck\" lastname=\"Rice\"&gt;\n        &lt;addresses&gt;\n            &lt;address country=\"Croatia\" city=\"South Stacimouth\" streetAddress=\"8958 Ervin Stravenue\"/&gt;\n            &lt;address country=\"Uruguay\" city=\"South Cariefort\" streetAddress=\"59014 Howell Pike\"/&gt;\n            &lt;address country=\"Bahrain\" city=\"New Ian\" streetAddress=\"446 Wuckert Brooks\"/&gt;\n        &lt;/addresses&gt;\n    &lt;/person&gt;\n    &lt;person firstname=\"Brent\" lastname=\"Walter\"&gt;\n        &lt;addresses&gt;\n            &lt;address country=\"Croatia\" city=\"South Stacimouth\" streetAddress=\"8958 Ervin Stravenue\"/&gt;\n            &lt;address country=\"Uruguay\" city=\"South Cariefort\" streetAddress=\"59014 Howell Pike\"/&gt;\n            &lt;address country=\"Bahrain\" city=\"New Ian\" streetAddress=\"446 Wuckert Brooks\"/&gt;\n        &lt;/addresses&gt;\n    &lt;/person&gt;\n    &lt;person firstname=\"Amy\" lastname=\"Parisian\"&gt;\n        &lt;addresses&gt;\n            &lt;address country=\"Croatia\" city=\"South Stacimouth\" streetAddress=\"8958 Ervin Stravenue\"/&gt;\n            &lt;address country=\"Uruguay\" city=\"South Cariefort\" streetAddress=\"59014 Howell Pike\"/&gt;\n            &lt;address country=\"Bahrain\" city=\"New Ian\" streetAddress=\"446 Wuckert Brooks\"/&gt;\n        &lt;/addresses&gt;\n    &lt;/person&gt;\n&lt;/persons&gt;\n</code></pre>"},{"location":"documentation/formats/#elements-only","title":"Elements only","text":"<p>In case you only want to generate XML elements, without any attributes, that possible too:</p> Java <pre><code>Faker faker = new Faker();\nCollection&lt;Xml.XmlNode&gt; address = faker.&lt;Xml.XmlNode&gt;collection()\n        .suppliers(() -&gt; new Xml.XmlNode(\"address\",\n                of(new Xml.XmlNode(\"country\", faker.address().country()),\n                        new Xml.XmlNode(\"city\", faker.address().city()),\n                        new Xml.XmlNode(\"streetAddress\", faker.address().streetAddress()))))\n        .maxLen(4).build().get();\nCollection&lt;Xml.XmlNode&gt; persons = faker.&lt;Xml.XmlNode&gt;collection()\n        .suppliers(() -&gt; new Xml.XmlNode(\"person\",\n                of(new Xml.XmlNode(\"firstname\", faker.name().firstName()),\n                        new Xml.XmlNode(\"lastname\", faker.name().lastName()),\n                        new Xml.XmlNode(\"addresses\", address)))).maxLen(2).build().get();\n\nString str = new Xml(new Xml.XmlNode(\"persons\", persons)).generate(true);\nSystem.out.println(str);    \n</code></pre> <p>Executing the above will result in:</p> <pre><code>&lt;persons&gt;\n    &lt;person&gt;\n        &lt;firstname&gt;Shiloh&lt;/firstname&gt;\n        &lt;lastname&gt;Witting&lt;/lastname&gt;\n        &lt;addresses&gt;\n            &lt;address&gt;\n                &lt;country&gt;Azerbaijan&lt;/country&gt;\n                &lt;city&gt;Port Alta&lt;/city&gt;\n                &lt;streetAddress&gt;50808 Rickey Plains&lt;/streetAddress&gt;\n            &lt;/address&gt;\n            &lt;address&gt;\n                &lt;country&gt;Congo&lt;/country&gt;\n                &lt;city&gt;North Eleonoraton&lt;/city&gt;\n                &lt;streetAddress&gt;956 Omer Mountain&lt;/streetAddress&gt;\n            &lt;/address&gt;\n            &lt;address&gt;\n                &lt;country&gt;Niue&lt;/country&gt;\n                &lt;city&gt;Port Darleneshire&lt;/city&gt;\n                &lt;streetAddress&gt;363 Rocco Square&lt;/streetAddress&gt;\n            &lt;/address&gt;\n            &lt;address&gt;\n                &lt;country&gt;Argentina&lt;/country&gt;\n                &lt;city&gt;Maritzamouth&lt;/city&gt;\n                &lt;streetAddress&gt;369 Mosciski Knolls&lt;/streetAddress&gt;\n            &lt;/address&gt;\n        &lt;/addresses&gt;\n    &lt;/person&gt;\n    &lt;person&gt;\n        &lt;firstname&gt;Louisa&lt;/firstname&gt;\n        &lt;lastname&gt;Howell&lt;/lastname&gt;\n        &lt;addresses&gt;\n            &lt;address&gt;\n                &lt;country&gt;Azerbaijan&lt;/country&gt;\n                &lt;city&gt;Port Alta&lt;/city&gt;\n                &lt;streetAddress&gt;50808 Rickey Plains&lt;/streetAddress&gt;\n            &lt;/address&gt;\n            &lt;address&gt;\n                &lt;country&gt;Congo&lt;/country&gt;\n                &lt;city&gt;North Eleonoraton&lt;/city&gt;\n                &lt;streetAddress&gt;956 Omer Mountain&lt;/streetAddress&gt;\n            &lt;/address&gt;\n            &lt;address&gt;\n                &lt;country&gt;Niue&lt;/country&gt;\n                &lt;city&gt;Port Darleneshire&lt;/city&gt;\n                &lt;streetAddress&gt;363 Rocco Square&lt;/streetAddress&gt;\n            &lt;/address&gt;\n            &lt;address&gt;\n                &lt;country&gt;Argentina&lt;/country&gt;\n                &lt;city&gt;Maritzamouth&lt;/city&gt;\n                &lt;streetAddress&gt;369 Mosciski Knolls&lt;/streetAddress&gt;\n            &lt;/address&gt;\n        &lt;/addresses&gt;\n    &lt;/person&gt;\n&lt;/persons&gt;\n</code></pre>"},{"location":"documentation/getting-started/","title":"Getting started","text":"<p>Datafaker is a library for Java and Kotlin to generate fake data. This can be very helpful when generating test data to fill a database, to generate data for a stress test, or anonymize data from production services.</p>"},{"location":"documentation/getting-started/#installation","title":"Installation","text":"<p>The latest version of Datafaker is 2.5.2 and is hosted on Maven Central. </p> <p>Datafaker can be included in your project using most dependency management tools: </p> MavenGradle (Groovy)Gradle (Kotlin)Ivy <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;net.datafaker&lt;/groupId&gt;\n    &lt;artifactId&gt;datafaker&lt;/artifactId&gt;\n    &lt;version&gt;2.5.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>dependencies {\n    implementation 'net.datafaker:datafaker:2.5.2'\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"net.datafaker:datafaker:2.5.2\")\n}\n</code></pre> <pre><code>&lt;dependency org=\"net.datafaker\" name=\"datafaker\" rev=\"2.5.2\"/&gt;\n</code></pre>"},{"location":"documentation/getting-started/#snapshot-versions","title":"Snapshot versions","text":"<p>It's also possible to use the latest snapshot version (currently 2.5.3-SNAPSHOT) by including the Sonatype snapshot repository in your configuration. </p> <p>A Gradle example can be found below:</p> <pre><code>repositories {\n    mavenCentral()\n    maven(url = \"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n}\n\ndependencies {\n    implementation(\"net.datafaker:datafaker:2.5.3-SNAPSHOT\")\n}\n</code></pre>"},{"location":"documentation/getting-started/#usage","title":"Usage","text":"<p>To use Datafaker to generate fake data, you can use the following code as an example:</p> JavaKotlin <pre><code>import net.datafaker.Faker;\n\nFaker faker = new Faker();\n\nString name = faker.name().fullName(); // Miss Samanta Schmidt\nString firstName = faker.name().firstName(); // Emory\nString lastName = faker.name().lastName(); // Barton\n\nString streetAddress = faker.address().streetAddress(); // 60018 Sawayn Brooks Suite 449\n</code></pre> <pre><code>import net.datafaker.Faker\n\nval faker = Faker()\n\nval name = faker.name().fullName() // Miss Samanta Schmidt\nval firstName = faker.name().firstName() // Emory\nval lastName = faker.name().lastName() // Barton\n\nval streetAddress = faker.address().streetAddress() // 60018 Sawayn Brooks Suite 449\n</code></pre> <p>For a full list of all the fake data providers, have a look at the reference documentation.</p>"},{"location":"documentation/license/","title":"License","text":"<p>Datafaker is licensed under the Apache License 2.0</p> <pre><code>Copyright 2025 Datafaker.net\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"documentation/password/","title":"Advanced password and arbitrary string generation","text":"<p>Starting 1.7.0 there is <code>Text</code> provider which allows to generate arbitrary strings with advanced rules. Now it allows to specify different set of symbols which should be contained and minimum amount of symbols per such set.</p> <p>Imagine there is a need to generate a password with length 8 and containing minimum 3 digits and 2 upper case symbols from en locale.</p> Java <pre><code>     var faker = new Faker();\n     String password = faker.text().text(Text.TextSymbolsBuilder.builder()\n                         .len(8)\n                         .with(EN_UPPERCASE, 2)\n                         .with(DIGITS, 3).build());\n</code></pre> <p>It also allows to use custom symbol sets. For example this will generate a string with length between 8 and 10.  The string will contain min 3 lower case symbols from ru locale and minimum 5 symbols from the defined string <code>customSpecialSymbols</code>.</p> Java <pre><code>      final String ruLowerCase = \"\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e\u044f\";\n      final String customSpecialSymbols = \"!@#$%^*;'][{}\";\n      final int ruCnt = 3;\n      final int specSmbCnt = 5;\n      final Text.TextRuleConfig config = Text.TextSymbolsBuilder.builder()\n          .len(faker.number().numberBetween(ruCnt + specSmbCnt, Math.max(ruCnt + specSmbCnt, 10)))\n          .with(ruLowerCase, ruCnt)\n          .with(customSpecialSymbols, specSmbCnt).build();\n      final String text = faker.text().text(config);\n</code></pre>"},{"location":"documentation/performance140/","title":"Performance benchmarks","text":"<p>This page is trying to go through some performance metrics and see how better/worse Datafaker is in compare with Java Faker and other similar projects.</p>"},{"location":"documentation/performance140/#hardware-software","title":"Hardware &amp; Software","text":"<p>All the tests are done with help of JMH at Fedora 36 for different JDKs (mentioned in tables below). The laptop has 32Gb of RAM, AMD Ryzen 7 PRO 5850U with Radeon Graphics.</p>"},{"location":"documentation/performance140/#datafaker-140-vs-java-faker-102-vs-kotlin-faker-1110-vs-jfairy-065","title":"Datafaker (1.4.0) vs Java Faker (1.0.2) vs Kotlin-faker (1.11.0) vs JFairy (0.6.5)","text":"<p>Originally Datafaker started as a fork of java-faker. For java-faker there have been mentions of the poor performance of the library, and this document will compare the performance of the respective libraries against each other.</p> <p>Recently, the 1.4.0 version of Datafaker has been released, and we'll look into what this says about performance improvements.</p> <p>To demonstrate the performance, we're going to use JMH benchmarks. All the code  is available as a separate project because of JMH license reasons.</p> <p>Since it's hardly possible and reasonable to compare each method's performance, we'll focus on a subset of features  in this article. In the below, you can see that Datafaker is about 10x-100x times faster for several cases.</p>"},{"location":"documentation/performance140/#jdk-effects","title":"JDK effects","text":"<p>Also, there is an interesting fact: in case of Datafaker moving from jdk8 to jdk18 performance is improving up to 25%, while for Java Faker it is not happening. It seems in Java Faker there are some time-consuming operations blocking  such improvements from updating java version which partially were fixed in Datafaker.</p> <p>There is also Kotlin-faker, which a performance comparison table in README page. </p> <p>Unfortunately there is not so much information what kind of benchmarks have been executed. After some search across the project I was able to find only this page So, it looks like the only test which were done is checking <code>Faker.name().name()</code> performance. </p> <p>Ok, let's start with the similar test here. Similar, because we are going to use JMH which was not used in their test. If applicable we try to execute same tests we did for previous section. So let's start with the original test from Kotlin Faker</p>"},{"location":"documentation/performance140/#original-kotlin-faker-test","title":"Original Kotlin Faker Test","text":"<p>(for different libs there should be different classes, for more details look in the code): <code>net.datafaker.benchmark.kotlinfakerbenchmark</code></p> Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 2352.789 \u00b1 61.214 ms/op Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 2428.885 \u00b1 19.153 ms/op Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 1985.712 \u00b1 27.692 ms/op Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 12026.367 \u00b1 103.005 ms/op Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 11985.717 \u00b1 202.768 ms/op Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 9910.120 \u00b1 334.016 ms/op JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 10429.579 \u00b1 79.899 ms/op JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 8921.440 \u00b1 88.582 ms/op JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 8371.050 \u00b1 47.380 ms/op Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 2530.238 \u00b1 86.146 ms/op Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 2522.862 \u00b1 19.028 ms/op Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 2376.537 \u00b1 28.235 ms/op <p>ATTENTION! In this test we measure not throughput but the average time of one operation =&gt; lower is better.</p> <p>In general, we could say that for jdk8 and jdk11 timings for Datafaker and Kotlin Faker are more or less similar and for jdk18 Datafaker is about 20% faster. JFairy and Java Faker are far behind.</p>"},{"location":"documentation/performance140/#initialization","title":"Initialization","text":"<p>It's worth to measure since initially during initialization of Faker object it requires to initialise all the providers objects and read all the yaml files for providers.</p> <p>Tests for initialization could be found at <code>net.datafaker.benchmark.initialization</code> Initialization:</p> Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 2446.670 \u00b1 15.040 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 2633.235 \u00b1 143.345 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 3840.849 \u00b1 143.408 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 23.834 \u00b1 0.217 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 23.316 \u00b1 0.417 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 27.717 \u00b1 0.575 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 0.266 \u00b1 0.008 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 0.253 \u00b1 0.015 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 0.276 \u00b1 0.006 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 0.017 \u00b1 0.001 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 0.017 \u00b1 0.001 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 0.018 \u00b1 0.001 ops/ms"},{"location":"documentation/performance140/#simple-methods-fullname-firstname-address","title":"Simple methods <code>fullname</code>, <code>firstname</code>, <code>address</code>","text":"<p>Performance of simple method calls like <code>fullname</code>, <code>firstname</code>, <code>address</code>.</p> <p>Tests could be found at <code>net.datafaker.benchmark.simplemethods</code></p>"},{"location":"documentation/performance140/#firstname","title":"Firstname:","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1381.132 \u00b1 9.388 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1523.378 \u00b1 10.667 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1640.834 \u00b1 59.306 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 232.055 \u00b1 2.842 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 257.667 \u00b1 1.610 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 301.318 \u00b1 2.774 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 114.971 \u00b1 0.881 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 137.098 \u00b1 2.846 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 148.091 \u00b1 2.048 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 904.868 \u00b1 6.883 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 965.916 \u00b1 27.270 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1074.216 \u00b1 98.063 ops/ms"},{"location":"documentation/performance140/#fullname","title":"Fullname:","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 433.824 \u00b1 21.696 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 517.713 \u00b1 24.944 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 535.289 \u00b1 5.651 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 81.282 \u00b1 1.199 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 85.278 \u00b1 2.770 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 106.813 \u00b1 1.710 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 114.874 \u00b1 0.564 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 136.762 \u00b1 1.933 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 143.378 \u00b1 1.582 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 407.972 \u00b1 6.095 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 447.162 \u00b1 5.546 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 448.645 \u00b1 28.789 ops/ms"},{"location":"documentation/performance140/#streetaddress","title":"StreetAddress:","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 291.779 \u00b1 3.699 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 319.959 \u00b1 7.984 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 339.846 \u00b1 9.068 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 42.421 \u00b1 0.497 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 43.939 \u00b1 0.571 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 66.658 \u00b1 0.811 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 113.572 \u00b1 1.644 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 136.216 \u00b1 0.465 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 145.778 \u00b1 2.186 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 76.850 \u00b1 6.447 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 100.451 \u00b1 0.480 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 99.861 \u00b1 1.799 ops/ms"},{"location":"documentation/performance140/#string-template-operations","title":"String template operations","text":"<p>From one side Kotlin Faker and JFairy do not support expressions, from the other side Kotlin Faker supports numerify/bothify/letterify and regexify operations.</p> <p>So, the tests are done based on Kotlin Faker's doc page</p>"},{"location":"documentation/performance140/#numerify","title":"Numerify:","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 46027.055 \u00b1 4323.326 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 45048.868 \u00b1 1976.526 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 47427.468 \u00b1 423.228 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 27089.972 \u00b1 1244.279 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 23325.344 \u00b1 265.684 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 30599.747 \u00b1 548.377 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 4503.070 \u00b1 60.716 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 4886.276 \u00b1 51.213 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 5504.774 \u00b1 57.402 ops/ms"},{"location":"documentation/performance140/#letterify","title":"Letterify:","text":"Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 41273.044 \u00b1 1247.091 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 47005.203 \u00b1 2799.484 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 48441.249 \u00b1 1040.172 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 30510.549 \u00b1 589.002 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 30869.658 \u00b1 2137.318 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 21462.296 \u00b1 530.481 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 4861.635 \u00b1 69.498 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 4746.286 \u00b1 71.018 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 5223.486 \u00b1 46.612 ops/ms"},{"location":"documentation/performance140/#bothify","title":"Bothify:","text":"Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 21785.504 \u00b1 596.322 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 22618.331 \u00b1 825.949 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 23757.533 \u00b1 172.493 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 11096.829 \u00b1 574.783 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 9118.489 \u00b1 336.647 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 8296.013 \u00b1 76.493 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1693.124 \u00b1 62.691 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1762.054 \u00b1 78.296 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1908.346 \u00b1 41.831 ops/ms"},{"location":"documentation/performance140/#regexify","title":"Regexify:","text":"Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 2206.095 \u00b1 33.280 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 2616.809 \u00b1 34.568 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 3454.312 \u00b1 11.464 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 267.981 \u00b1 3.333 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 261.420 \u00b1 0.822 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 325.523 \u00b1 2.777 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 366.627 \u00b1 23.346 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 347.008 \u00b1 3.380 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 434.123 \u00b1 1.089 ops/ms"},{"location":"documentation/performance140/#expressions","title":"Expressions","text":"<p>Since both Java Faker and Datafaker provide expression functionality like letterify, bothify, regexify, it would make sense to see the difference. Here, it is also worth mentioning that for different patterns score could be different, however it is impossible to check all.</p> <p><code>net.datafaker.benchmark.templatestrings.DatafakerTemplateStrings</code></p>"},{"location":"documentation/performance140/#bothify-expression","title":"Bothify expression:","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1918.381 \u00b1 91.410 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1868.298 \u00b1 27.953 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 2169.941 \u00b1 45.504 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 207.428 \u00b1 2.923 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 208.868 \u00b1 2.023 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 298.704 \u00b1 4.315 ops/ms"},{"location":"documentation/performance140/#letterify-expression","title":"Letterify expression:","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1821.056 \u00b1 70.109 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1922.130 \u00b1 16.922 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 2104.585 \u00b1 81.704 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 205.280 \u00b1 3.724 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 208.239 \u00b1 1.535 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 316.426 \u00b1 5.495 ops/ms"},{"location":"documentation/performance140/#regexify-expression","title":"Regexify expression:","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1273.177 \u00b1 8.818 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1235.418 \u00b1 11.646 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1607.923 \u00b1 34.328 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 120.409 \u00b1  0.993 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 121.226 \u00b1 0.670 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 158.919 \u00b1 1.609 ops/ms"},{"location":"documentation/performance140/#method-invocations","title":"Method invocations","text":"<p>Also, both Java Faker and Datafaker allow invocation of methods from expression. Let's consider an example where in expression it is required to parse and process only one method. In Datafaker, a was added cache for the parsing of methods. Since only Datafaker and Java Faker support method invocations, there are only these 2 projects tested:</p> Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1020.388 \u00b1 12.270 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1057.132 \u00b1 27.611 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1113.307 \u00b1 21.496 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 145.144 \u00b1 2.523 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 147.812 \u00b1 2.206 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 207.275 \u00b1 3.522 ops/ms <p>Similar example as previous, however there are 3 methods. Besides, cache of parsed methods there was also added cache for parsed args.</p> Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 276.175 \u00b1 6.503 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 321.559 \u00b1 12.098 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 334.248 \u00b1 12.733 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 33.567 \u00b1 0.515 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 36.055 \u00b1 0.460 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 49.014 \u00b1 1.994 ops/ms <p>It makes sense to keep in mind that these tests do not cover all possible use cases and could be considered only as a starting point for analysis.</p>"},{"location":"documentation/performance140/#more-fun","title":"More Fun","text":"<p>There is an issue in Java Faker about generation of 100M of objects. Of course, the task could be solved with concurrent generation in multiple threads. However, here it is interesting how much a 1 thread application can generated in 1 hour.</p> <p>The code below for Datafaker generates a bit more than 170M objects for 1 hour. The same code for Java Faker generates about 38M for 1 hour, meaning on average, Datafaker is about 4x faster than Javafaker.</p> <p>Kotlin Faker does not support setting of birthday and blood. Without these 2 params it generates about 90M for 1 hour. <code>net.datafaker.benchmark.generate_one_hour</code></p>"},{"location":"documentation/performance170/","title":"Performance benchmarks","text":"<p>This page is trying to go through some performance metrics and see how better/worse Datafaker is in compare with Java Faker and other similar projects.</p>"},{"location":"documentation/performance170/#hardware-software","title":"Hardware &amp; Software","text":"<p>All the tests are done with help of JMH at Fedora 37 for different JDKs (mentioned in tables below). The laptop has 32Gb of RAM, AMD Ryzen 7 PRO 5850U with Radeon Graphics.</p>"},{"location":"documentation/performance170/#datafaker-170-vs-datafaker-140-vs-java-faker-102-vs-kotlin-faker-1130-vs-jfairy-065","title":"Datafaker (1.7.0) vs Datafaker (1.4.0) vs Java Faker (1.0.2) vs Kotlin-faker (1.13.0) vs JFairy (0.6.5)","text":"<p>Originally Datafaker started as a fork of java-faker. For java-faker there have been mentions of the poor performance of the library, and this document will compare the performance of the respective libraries against each other.</p> <p>Recently, the 1.7.0 version of Datafaker has been released, and we'll look into what this says about performance improvements.</p> <p>To demonstrate the performance, we're going to use JMH benchmarks. All the code is available as a separate project because of JMH license reasons.</p> <p>Since it's hardly possible and reasonable to compare each method's performance, we'll focus on a subset of features in this article. In the below, you can see that Datafaker is about 10x-100x times faster for several cases.</p>"},{"location":"documentation/performance170/#jdk-effects","title":"JDK effects","text":"<p>Also, there is an interesting fact: in case of Datafaker moving from jdk8 to jdk19 performance is improving up to 25%, while for Java Faker it is not happening. It seems in Java Faker there are some time-consuming operations blocking such improvements from updating java version which partially were fixed in Datafaker.</p> <p>There is also Kotlin-faker, which a performance comparison table in README page.</p> <p>Unfortunately there is not so much information what kind of benchmarks have been executed. After some search across the project I was able to find only this page So, it looks like the only test which were done is checking <code>Faker.name().name()</code> performance.</p> <p>Ok, let's start with the similar test here. Similar, because we are going to use JMH which was not used in their test. If applicable we try to execute same tests we did for previous section. So let's start with the original test from Kotlin Faker</p>"},{"location":"documentation/performance170/#original-kotlin-faker-test","title":"Original Kotlin Faker Test","text":"<p>(for different libs there should be different classes, for more details look in the code): <code>net.datafaker.benchmark.kotlinfakerbenchmark</code></p> Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 659.362 \u00b1 65.740 ms/op Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 523.569 \u00b1 14.033 ms/op Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 472.270 \u00b1 45.679 ms/op Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 486.267 \u00b1 14.501 ms/op Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 12146.879 \u00b1 106.738 ms/op Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 11879.473 \u00b1 281.136 ms/op Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 9847.805 \u00b1 292.088 ms/op Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 9411.708 \u00b1 149.752 ms/op JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 10429.579 \u00b1 79.899 ms/op JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 8921.440 \u00b1 88.582 ms/op JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 8371.050 \u00b1 47.380 ms/op Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 2588.774 \u00b1 160.853 ms/op Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 1909.895 \u00b1 53.884 ms/op Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 1332.293 \u00b1 36.930 ms/op Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 1803.990 \u00b1 26.429 ms/op <p>ATTENTION! In this test we measure not throughput but the average time of one operation =&gt; lower is better.</p> <p>1.7.0 Datafaker looks much faster than others in this test.</p>"},{"location":"documentation/performance170/#initialization","title":"Initialization","text":"<p>It's worth to measure since initially during initialization of Faker object it requires to initialise all the providers objects and read all the yaml files for providers.</p> <p>Tests for initialization could be found at <code>net.datafaker.benchmark.initialization</code> Initialization:</p> Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1770.056 \u00b1 23.905 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2189.480 \u00b1 93.875 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2825.415 \u00b1 119.968 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2498.148 \u00b1 21.015 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 24.847 \u00b1 0.520 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 25.630 \u00b1 1.178 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 34.029 \u00b1 1.227 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 30.559 \u00b1 0.179 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 0.260 \u00b1 0.010 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 0.253 \u00b1 0.012 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 0.279 \u00b1 0.004 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 0.273 \u00b1 0.010 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 290.887 \u00b1 0.799 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 271.947 \u00b1 1.289 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 265.584 \u00b1 5.756 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 266.037 \u00b1 2.999 ops/ms"},{"location":"documentation/performance170/#simple-methods-fullname-firstname-address","title":"Simple methods <code>fullname</code>, <code>firstname</code>, <code>address</code>","text":"<p>Performance of simple method calls like <code>fullname</code>, <code>firstname</code>, <code>address</code>.</p> <p>Tests could be found at <code>net.datafaker.benchmark.simplemethods</code></p>"},{"location":"documentation/performance170/#firstname","title":"Firstname:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 3087.829 \u00b1 21.698 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 4876.539 \u00b1 262.490 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 4982.802 \u00b1 28.234 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 4953.212 \u00b1 177.312 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 231.796 \u00b1 8.644 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 235.770 \u00b1 1.619 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 294.121 \u00b1 15.599 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 288.382 \u00b1 2.770 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 114.964 \u00b1 0.986 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 139.915 \u00b1 1.446 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 149.559 \u00b1 1.306 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 148.669 \u00b1 0.986 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1327.995 \u00b1 298.392 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 1269.240 \u00b1 143.267 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1746.555 \u00b1 104.489 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1421.184 \u00b1 20.329 ops/ms"},{"location":"documentation/performance170/#fullname","title":"Fullname:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1681.933 \u00b1 25.017 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2144.822 \u00b1 90.151 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2178.651 \u00b1 27.219 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2166.699 \u00b1 106.132 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 81.140 \u00b1 0.570 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 84.408 \u00b1 3.909 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 99.199 \u00b1 2.024 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 104.506 \u00b1 2.861 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 111.744 \u00b1 2.459 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 137.069 \u00b1 1.346 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 147.787 \u00b1 1.270 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 146.856 \u00b1 2.407 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 396.399 \u00b1 3.653 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 522.469 \u00b1 15.708 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 746.832 \u00b1 21.802 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 545.365 \u00b1 23.483 ops/ms"},{"location":"documentation/performance170/#streetaddress","title":"StreetAddress:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1124.835 \u00b1 22.068 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 1260.726 \u00b1 11.418 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1363.289 \u00b1 37.035 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1219.488 \u00b1 9.408 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 42.751 \u00b1 0.440 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 43.101 \u00b1 0.559 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 59.785 \u00b1 3.270 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 57.944 \u00b1 0.415 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 113.553 \u00b1 1.889 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 138.431 \u00b1 1.314 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 146.255 \u00b1 1.918 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 144.412 \u00b1 0.684 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 78.245 \u00b1 1.265 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 97.818 \u00b1 7.926 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 108.132 \u00b1 4.515 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 101.432 \u00b1  1.645 ops/ms"},{"location":"documentation/performance170/#string-template-operations","title":"String template operations","text":"<p>From one side Kotlin Faker and JFairy do not support expressions, from the other side Kotlin Faker supports numerify/bothify/letterify and regexify operations.</p> <p>So, the tests are done based on Kotlin Faker's doc page</p>"},{"location":"documentation/performance170/#numerify","title":"Numerify:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 43284.011 \u00b1 2480.512 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 41784.591 \u00b1 930.326 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 44165.964 \u00b1 906.038 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 43090.660 \u00b1 1431.219 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 26869.455 \u00b1 171.590 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 24186.835 \u00b1 452.751 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 24898.424 \u00b1 910.303 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 25363.478 \u00b1 995.818 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4710.176 \u00b1 63.139 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 6055.504 \u00b1 306.761 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 7172.360 \u00b1 68.914 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 6743.303 \u00b1 88.353 ops/ms"},{"location":"documentation/performance170/#letterify","title":"Letterify:","text":"Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 44238.161 \u00b1 460.133 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 40382.343 \u00b1 169.415 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 44153.720 \u00b1 720.553 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 44967.669 \u00b1 1853.888 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 32327.400 \u00b1 267.620 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 30619.871 \u00b1 534.152 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 21062.038 \u00b1 534.198 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 21367.003 \u00b1 120.525 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 5219.411 \u00b1 73.725 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5716.061 \u00b1 210.304 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 6906.832 \u00b1 136.554 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 6410.062 \u00b1 195.229 ops/ms"},{"location":"documentation/performance170/#bothify","title":"Bothify:","text":"Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 28442.736 \u00b1 1427.555 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 28309.247 \u00b1 408.859 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 25577.048 \u00b1 496.402 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 28418.711 \u00b1 486.121 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 11220.600 \u00b1 255.977 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 9533.013 \u00b1 176.400 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 7527.531 \u00b1 189.662 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 7375.935 \u00b1 78.468 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1741.742 \u00b1 32.551 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2099.828 \u00b1 97.784 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1943.925 \u00b1 115.053 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1906.066 \u00b1 235.425 ops/ms"},{"location":"documentation/performance170/#regexify","title":"Regexify:","text":"Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 2265.164 \u00b1 19.465 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2454.718 \u00b1 24.566 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 3582.163 \u00b1 133.808 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 3530.937 \u00b1 67.913 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 267.510 \u00b1 1.897 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 269.823 \u00b1 5.012 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 315.347 \u00b1 2.404 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 309.691 \u00b1 11.170 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 385.765 \u00b1 3.909 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 391.847 \u00b1 8.465 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 501.743 \u00b1 4.972 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 514.578 \u00b1 9.987 ops/ms"},{"location":"documentation/performance170/#expressions","title":"Expressions","text":"<p>Since both Java Faker and Datafaker provide expression functionality like letterify, bothify, regexify, it would make sense to see the difference. Here, it is also worth mentioning that for different patterns score could be different, however it is impossible to check all.</p> <p><code>net.datafaker.benchmark.templatestrings.DatafakerTemplateStrings</code></p>"},{"location":"documentation/performance170/#bothify-expression","title":"Bothify expression:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4544.086 \u00b1 163.034 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5085.459 \u00b1 313.491 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 5160.930 \u00b1 115.282 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 5077.901 \u00b1 19.463 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 221.838 \u00b1 6.682 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 221.997 \u00b1 2.176 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 318.869 \u00b1 10.933 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 318.498 \u00b1 1.566 ops/ms"},{"location":"documentation/performance170/#letterify-expression","title":"Letterify expression:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4719.075 \u00b1 110.980 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5467.370 \u00b1 415.581 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 5852.925 \u00b1 263.841 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 4897.141 \u00b1 223.026 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 231.018 \u00b1 4.009 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 231.348 \u00b1 1.540 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 339.493 \u00b1 7.604 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 348.010 \u00b1 4.090 ops/ms"},{"location":"documentation/performance170/#numerify-expression","title":"Numerify expression:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4919.219 \u00b1 173.782 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5706.372 \u00b1 200.001 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 6258.169 \u00b1 208.217 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 5916.530 \u00b1 119.690 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 233.994 \u00b1 4.356 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 231.713 \u00b1 1.796 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 334.916 \u00b1 3.537 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 338.545 \u00b1 19.560 ops/ms"},{"location":"documentation/performance170/#regexify-expression","title":"Regexify expression:","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1843.609 \u00b1 25.113 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2012.095 \u00b1 24.405 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2610.217 \u00b1 101.287 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2616.375 \u00b1 39.477 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 126.065 \u00b1 4.649 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 125.829 \u00b1 0.747 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 163.896 \u00b1 0.420 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 164.620 \u00b1 2.021 ops/ms"},{"location":"documentation/performance170/#method-invocations","title":"Method invocations","text":"<p>Method invocations for the case of Datafaker and Javafaker are covered by simple method calls like full name and address since  under the hood there are method invocations. </p> <p>It makes sense to keep in mind that these tests do not cover all possible use cases and could be considered only as a starting point for analysis.</p>"},{"location":"documentation/providers/","title":"Fake Data Providers","text":""},{"location":"documentation/providers/#provider-groups","title":"Provider groups:","text":"<ul> <li>Base (Providers of everyday data)</li> <li>Entertainment (Providers for movies, shows, books)</li> <li>Food (Providers for different types of food)</li> <li>Sport (Providers for different types of sport)</li> <li>Videogame (Video game providers)</li> </ul> <p>Number of providers per Datafaker version</p> Version Number of new providers Total number of providers 0.8.0 94 94 0.9.0 12 106 1.0.0 4 110 1.1.0 2 112 1.2.0 7 119 1.3.0 9 128 1.4.0 15 143 1.5.0 22 165 1.6.0 10 175 1.7.0 21 196 1.8.0 34 230 2.0.0 3 233 2.0.2 1 234 2.0.3 1 235 2.1.0 1 236 2.2.0 2 238 2.3.0 9 247 2.4.0 3 250 2.4.4 2 252 2.5.0 1 253 2.5.3 3 256 <p>Datafaker comes with a total of 256 data providers:</p> Name Description Group Since Address Base 0.8.0 Ancient Base 0.8.0 Animal Base 0.8.0 App Base 0.8.0 Apple Food 2.5.3 Appliance Base 1.0.0 Aqua Teen Hunger Force Entertainment 0.8.0 Artist Base 0.8.0 Australia Base 1.2.0 Avatar Entertainment 0.8.0 Aviation Generates aviation related strings. Base 0.8.0 Aws Base 1.3.0 Azure Generates data for Azure services. This is based on the Azure best practices of naming conventions: Base 1.7.0 Babylon5 Entertainment 0.9.0 Back To The Future Entertainment 0.8.0 Barcode Base 0.9.0 Baseball Generate random components of baseball game, e.g. teams, coaches, positions and players. Sport 1.7.0 Basketball Generate random components of basketball game, e.g. teams, coaches, positions and players. Sport 0.8.0 Battlefield1 Battlefield 1 is a first-person shooter game developed by DICE and published by Electronic Arts. Videogame 1.4.0 Beer Food 0.8.0 Big Bang Theory Entertainment 1.5.0 Blood Type Base 1.4.0 Boardgame Entertainment 2.3.0 Bojack Horseman Generate random parts in BojackHorseman. Entertainment 0.8.0 Book Base 0.8.0 Bool Base 0.8.0 Bossa Nova Bossa nova is a style of samba developed in the late 1950s and early 1960s in Rio de Janeiro, Brazil. Entertainment 1.0.0 Brand Generate random sport wearing brand, car brand or watch brand. Only generate brand by types of products. Base 1.8.0 Breaking Bad Breaking Bad is an American neo-Western crime drama television series. Entertainment 1.0.0 Brooklyn Nine Nine Brooklyn Nine-Nine is an American police procedural comedy television series. Entertainment 1.3.0 Buffy Entertainment 0.8.0 Business Base 0.8.0 CNPJ The Brazil National Registry of Legal Entities number (CNPJ) is a company identification number that must be obtained from the Department of Federal Revenue prior to the start of any business activities. Base 1.1.0 CPF The CPF number (Cadastro de Pessoas F\u00edsicas, [sepe\u02c8\u025bfi]; Portuguese for \"Natural Persons Register\") Base 0.8.0 Camera Base 1.4.0 Cannabis Base 1.5.0 Care Provider Healthcare 2.3.0 Cat Base 0.8.0 Chess Sport 1.8.0 Chiquito Base 1.6.0 Chuck Norris Entertainment 0.8.0 Clash Of Clans Clash of Clans is a 2012 free-to-play mobile strategy video game developed and published by Finnish game developer Supercell. Videogame 1.6.0 Code Generates codes such as ISBN, gin, ean and others. Base 0.8.0 Coffee Food 1.5.0 Coin Base 0.8.0 Color Base 0.8.0 Commerce Base 0.8.0 Community Community is an American television sitcom created by Dan Harmon. Base 1.6.0 Company Base 0.8.0 Compass Base 1.7.0 Computer Generates different attributes related to computers, such as operating systems, types, platforms and brands. Base 1.5.0 Construction Base 1.5.0 Control Control is an action-adventure game developed by Remedy Entertainment and published by 505 Games. Videogame 1.7.0 Cosmere The cosmere is a fictional shared universe where several of Brandon Sanderson's books take place. Base 1.7.0 Country Base 0.8.0 Cowboy Bebop Cowboy Bebop is a Japanese neo-noir science fiction anime television series, which originally ran from 1998 to 1999. Entertainment 1.8.0 Credentials Generates credentials such as usernames, uids and passwords. Base 2.5.0 Cricket Sport 1.7.0 Crypto Coin Base 1.3.0 Culture Series The Culture series is a science fiction series written by Scottish author Iain M. Banks and released from 1987 through to 2012. Base 1.7.0 Currency Base 0.8.0 Dark Souls Dark Souls is a series of action role-playing games created by Hidetaka Miyazaki of FromSoftware and published by Bandai Namco Entertainment. Videogame 1.5.0 Date And Time A generator of random dates. Base 0.8.0 Dc Comics Base 1.5.0 Demographic Base 0.8.0 Departed Entertainment 1.5.0 Dessert Food 0.9.0 Detective Conan Case Closed, also known as Detective Conan, is a Japanese detective manga series written and illustrated by Gosho Aoyama. Entertainment 1.7.0 Device Base 1.4.0 Disease Generate random, different kinds of disease. Healthcare 0.8.0 Doctor Who Entertainment 1.8.0 Dog Base 0.8.0 Domain A domain name generator. Base 0.9.0 Doraemon Entertainment 1.7.0 Dota2 Dota 2 is a multiplayer online battle arena (MOBA) game developed and published by Valve Corporation. Videogame 2.4.0 Dragon Ball Entertainment 0.8.0 Driving License Base 1.5.0 Drone An unmanned aerial vehicle (UAV), commonly known as a drone, is an aircraft without any human pilot, crew, or passengers on board. Base 1.7.0 Dumb And Dumber Entertainment 1.6.0 Dune Entertainment 0.8.0 Dungeons And Dragons Dungeons and Dragons is a fantasy tabletop role-playing game originally designed by Gary Gygax and Dave Arneson. Base 1.7.0 Educator Base 0.8.0 Elden Ring Elden Ring is a 2022 action role-playing game developed by FromSoftware and published by Bandai Namco Entertainment. Videogame 1.4.0 Elder Scrolls The Elder Scrolls is a series of action role-playing video games primarily developed by Bethesda Game Studios and published by Bethesda Softworks. Videogame 0.8.0 Electrical Components Base 1.4.0 Emoji Emojis picked from Emoji 1.0. Base 1.7.0 England Foot Ball Sport 0.9.0 Esports Esports, short for electronic sports, is a form of competition using video games. Videogame 0.8.0 Fake Duration Base 0.8.0 Fallout Fallout: A Post Nuclear Role Playing Game is a 1997 role-playing video game developed and published by Interplay Productions. Videogame 1.6.0 Family Guy Entertainment 1.7.0 Famous Last Words Base 1.5.0 File Base 0.8.0 Final Fantasy XIV Final Fantasy XIV is an MMORPG and features a persistent world in which players can interact with each other and the environment. Videogame 2.0.0 Final Space Final Space is an adult animated space opera comedy drama television series. Entertainment 1.6.0 Finance Base 0.8.0 Financial Terms Provides financial terms. Base 2.4.0 Food Food 0.8.0 Football Sport 1.5.0 Formula1 Sport 1.2.0 Fresh Prince Of Bel Air The Fresh Prince of Bel-Air is an American television sitcom created by Andy and Susan Borowitz for NBC. Entertainment 1.7.0 Friends Entertainment 0.8.0 Fullmetal Alchemist Entertainment 1.7.0 Funny Name Base 0.8.0 Futurama Futurama is an American animated science fiction sitcom created by Matt Groening for the Fox Broadcasting Company. Entertainment 1.8.0 Game Of Thrones Entertainment 0.8.0 Garment Size This class is used to generate garments sizes randomly. Base 1.6.0 Gender This class is used to generate gender randomly. Base 0.8.0 Ghostbusters Entertainment 1.5.0 Grateful Dead The Grateful Dead was an American rock band formed in 1965 in Palo Alto, California. Entertainment 1.4.0 Gravity Falls Gravity Falls is an American animated television series created by Alex Hirsch, and produced by Disney Television Animation for Disney Channel and Disney X Entertainment 2.5.3 Greek Philosopher Base 1.5.0 Hacker Base 0.8.0 Half Life Half-Life is a series of first-person shooter games developed and published by Valve. Videogame 1.8.0 Harry Potter Entertainment 0.8.0 Hashing Base 0.8.0 Hearthstone Hearthstone is a free-to-play online digital collectible card game developed and published by Blizzard Entertainment. Videogame 0.9.0 Heroes Of The Storm Heroes of the Storm is a crossover multiplayer online battle arena video game developed and published by Blizzard Entertainment. Videogame 1.7.0 Hey Arnold Hey Arnold! is an American animated comedy television series created by Craig Bartlett. Entertainment 1.4.0 Hipster Base 0.8.0 Hitchhikers Guide To The Galaxy Entertainment 0.8.0 Hobbit Entertainment 0.8.0 Hobby Base 1.3.0 Hololive Base 1.5.0 Horse Base 1.3.0 House Base 1.5.0 How IMet Your Mother Entertainment 0.8.0 How To Train Your Dragon How to Train Your Dragon is a 2010 American computer-animated action fantasy film loosely based on the 2003 book of the same name by Cressida Cowell. Entertainment 1.8.0 IceCream Food 2.5.3 Id Number Base 0.8.0 Image Generates base64 encoded raster and vector images. Base 2.3.0 Industry Segments Base 1.5.0 Internet Base 0.8.0 Job Base 0.8.0 Joke Entertainment 2.1.0 Kaamelott Entertainment 0.8.0 Kpop K-pop, short for Korean popular music, is a genre of music originating in South Korea as part of South Korean culture. Base 1.3.0 Language Code Base 2.0.3 Large Language Model Providers related to Large Language Models (LLMs) Base 2.3.0 League Of Legends League of Legends is a 2009 multiplayer online battle arena video game developed and published by Riot Games. Videogame 0.8.0 Lebowski Entertainment 0.8.0 Locality Generates random locales in different forms. Base 1.7.0 Location Base 2.3.0 Lord Of The Rings Entertainment 0.8.0 Lorem Base 0.8.0 Marketing Generates marketing buzzwords. Base 1.2.0 Martial Art Custom Faker provider for martial arts. Sport 2.4.4 Marvel Snap Marvel Snap is a digital collectible card game developed by Second Dinner and published by Nuverse for Microsoft Windows, Android and iOS. Videogame 1.8.0 Mass Effect Mass Effect is a military science fiction media franchise. Videogame 1.6.0 Matz Base 0.8.0 Mbti Myers-Briggs Type Indicator Base 1.5.0 Measurement Base 1.5.0 Medical Base 0.8.0 Medical Procedure Healthcare 2.3.0 Medication Healthcare 2.3.0 Military Military ranks. Base 1.2.0 Minecraft Minecraft is a sandbox game developed by Mojang Studios. Videogame 0.9.0 Money Support for different kind of money currencies. Base 1.5.0 Money Heist Entertainment 1.7.0 Mood Base 0.9.0 Mountain A generator for Mountain names and ranges. Base 1.1.0 Mountaineering Mountaineering, or alpinism, is the set of outdoor activities that involves ascending tall mountains. Base 1.4.0 Movie Entertainment 1.5.0 Music Base 0.8.0 Myst Myst is a graphic adventure/puzzle video game designed by the Miller brothers, Robyn and Rand. Videogame 1.8.0 Name Base 0.8.0 Naruto Naruto is a Japanese manga series written and illustrated by Masashi Kishimoto, that tells the story of Naruto Uzumaki. Entertainment 1.8.0 Nation Base 0.8.0 Nato Phonetic Alphabet The NATO phonetic alphabet is the most widely used radiotelephone spelling alphabet. Base 1.2.0 New Girl New Girl is an American television sitcom created by Elizabeth Meriwether. Entertainment 1.8.0 Nigeria Nigeria, officially the Federal Republic of Nigeria, is a country in West Africa. Base 1.2.0 Number Base 0.8.0 Observation Healthcare 2.3.0 Olympic Sport Base 1.8.0 One Piece Entertainment 1.7.0 Options Base 0.8.0 Oscar Movie The Academy Awards, popularly known as the Oscars, are awards for artistic and technical merit in the film industry. Entertainment 1.4.0 Overwatch Overwatch is a free-to-play, team-based action game set in the optimistic future. Videogame 0.8.0 Passport Base 0.9.0 Phone Number Base 0.8.0 Photography Provides photography related strings. Base 0.8.0 Planet Provides planet specific metadata like length of the day, radius, mass etc. Base 2.2.0 Pokemon Entertainment 0.8.0 Princess Bride Entertainment 0.8.0 Programming Language Base 0.8.0 Pronouns This class generates gender neutral pronouns Base 2.2.0 Red Dead Redemption2 Red Dead Redemption 2 is an action-adventure game developed and published by Rockstar Games. Videogame 2.0.0 Relationship Base 0.8.0 Resident Evil A class for generating random value of ResidentEvil series. Entertainment 0.9.0 Restaurant Base 1.2.0 Rick And Morty Entertainment 0.8.0 Robin Base 0.8.0 Rock Band Base 0.8.0 Ru Paul Drag Race RuPaul's Drag Race is a reality competition series produced by World of Wonder for the Logo TV Network. Entertainment 1.0.0 Science Base 0.8.0 Seinfeld Seinfeld is an American sitcom television series created by Larry David and Jerry Seinfeld. Entertainment 1.4.0 Severance Severance is an American science fiction psychological thriller television series Entertainment 2.4.4 Shakespeare Base 0.8.0 Show Entertainment 1.8.0 Silicon Valley Entertainment 1.8.0 Simpsons Entertainment 1.5.0 Sip Faker class for generating Session Initiation Protocol (SIP) related data. Base 0.8.0 Size Base 0.8.0 Slack Emoji Base 0.8.0 Sonic The Hedgehog Sonic the Hedgehog is a Japanese video game series and media franchise created by Sega. Videogame 1.8.0 Soul Knight Soul Knight is a game made by ChillyRoom Inc. Videogame 1.4.0 South Park South Park is an American animated television series created by Trey Parker and Matt Stone. Entertainment 1.8.0 Space Base 0.8.0 Spongebob SpongeBob SquarePants (or simply SpongeBob) is an American animated comedy television series created by marine science educator and animator Stephen Hillenburg for Nickelodeon. Entertainment 1.8.0 Star Craft StarCraft is a 1998 military science fiction real-time strategy game developed and published by Blizzard Entertainment. Videogame 0.8.0 Star Trek Entertainment 0.8.0 Star Wars Entertainment 1.6.0 Stargate Stargate is a military science fiction media franchise. Entertainment 1.8.0 Stock Base 0.8.0 Stranger Things Stranger Things is an American sci-fi television series created by the Duffer Brothers. Entertainment 1.8.0 Street Fighter Street Fighter is a Japanese media franchise centered on a series of fighting video and arcade games developed and published by Capcom. Videogame 1.8.0 Studio Ghibli Entertainment 1.7.0 Subscription Base 1.3.0 Suits Suits is an American legal drama television series created and written by Aaron Korsh. Entertainment 1.8.0 Super Mario Super Mario is a platform game series created by Nintendo starring their mascot, Mario. Videogame 1.3.0 Super Smash Bros Super Smash Bros. is a crossover fighting game series published by Nintendo. Videogame 1.8.0 Superhero Base 0.8.0 Supernatural Supernatural is an American dark fantasy drama television series created by Eric Kripke. Entertainment 1.8.0 Sword Art Online Sword Art Online is a Japanese light novel series written by Reki Kawahara and illustrated by abec. Entertainment 1.8.0 Tea Food 1.4.0 Team Base 0.8.0 Text Generates random text in a flexible way. Base 1.7.0 The Expanse The Expanse is an American science fiction television series developed by Mark Fergus and Hawk Ostby for the Syfy network. Entertainment 1.8.0 The It Crowd Entertainment 0.8.0 The Kingkiller Chronicle The Kingkiller Chronicle is a fantasy trilogy by the American writer Patrick Rothfuss. Entertainment 1.8.0 The Room The Room is a 2003 American drama film written, produced, executive produced and directed by Tommy Wiseau. Entertainment 1.8.0 The Thick Of It Entertainment 1.8.0 The Venture Bros The Venture Bros. is an American adult animated action comedy TV series. Entertainment 1.8.0 Time Base 1.4.0 Time And Date A generator of random times and dates. Base 2.3.0 Tire Sources: Base 2.0.2 Touhou The Touhou Project, also known simply as Touhou, is a bullet hell shoot 'em up video game series created by one-man independent Japanese doujin soft developer Team Shanghai Alice. Videogame 0.9.0 Transport Provides different kind of transport. Base 2.0.0 Tron Tron is a 1982 American science fiction action-adventure film. Entertainment 1.4.0 Twin Peaks Twin Peaks is an American mystery serial drama television series created by Mark Frost and David Lynch. Entertainment 0.8.0 Twitter Creates fake Twitter messages. Base 0.9.0 Unique This class contains methods that ensure uniqueness across separate invocations. Base 1.6.0 University Base 0.8.0 VFor Vendetta V for Vendetta is a 2005 dystopian political action film directed by James McTeigue from a screenplay by the Wachowskis. Entertainment 1.8.0 Vehicle Base 0.8.0 Verb Base 1.5.0 Video Game Video games are electronic games that involve interaction with a user interface or input device. Videogame 1.8.0 Volleyball Sport 1.3.0 Warhammer Fantasy Warhammer Fantasy is a tabletop miniature wargame with a medieval fantasy theme. Videogame 1.8.0 Weather A generator for weather data. Base 0.8.0 Witcher Entertainment 0.8.0 Word Base 2.4.0 World Of Warcraft World of Warcraft is a massively multiplayer online role-playing game released in 2004 by Blizzard Entertainment. Videogame 1.8.0 Yoda Base 0.8.0 Zelda The Legend of Zelda is an action-adventure game franchise created by the Japanese game designers Shigeru Miyamoto and Takashi Tezuka. Videogame 0.8.0 Zodiac This class is used to generate Zodiac signs randomly. Base 1.8.0"},{"location":"documentation/schemas/","title":"Schema and transformers","text":"<p>Since version 1.7.0 of Datafaker it's possible to specify transformation schema.</p> <p>It also provides a set of ready to use transformers:</p> <ul> <li>CSV</li> <li>JSON</li> <li>SQL</li> <li>YAML</li> <li>XML</li> <li>Java Object</li> <li>TOML</li> </ul>"},{"location":"documentation/schemas/#schema","title":"Schema","text":"<p>Schema is a set of rules describing what should be done to transform data from Datafaker representation to one of the supported formats. One of the main advantages of Schema is that the same schema could be used to transform to different formats.</p> <p>Schema can be used in 2 ways: it could be used to generate data from scratch or it could be used to transform existing data.</p> <p>Example of schema definition:</p> JavaKotlin <pre><code>    Schema&lt;String, String&gt; schema =\n        Schema.of(\n            field(\"first_name\", () -&gt; faker.name().firstName()),\n            field(\"last_name\", () -&gt; faker.name().lastName()),\n            field(\"address\", () -&gt; faker.address().streetAddress()));\n</code></pre> <pre><code>    val faker = BaseFaker()\n\n    val schema = Schema.of(\n        field(\"first_name\",\n            Supplier { faker.name().firstName() }),\n        field(\"last_name\",\n            Supplier { faker.name().lastName() }),\n        field&lt;String, String&gt;(\"address\",\n            Supplier { faker.address().streetAddress() })\n    )\n</code></pre> <p>It is also supported nested(composite) fields e.g.:</p> JavaKotlin <pre><code>    Schema.of(\n        compositeField(\"key\", new Field[]{field(\"key\", () -&gt; \"value\")}));\n</code></pre> <pre><code>    Schema.of(compositeField(\"key\", arrayOf(field(\"key\", Supplier { \"value\" }))))\n</code></pre>"},{"location":"documentation/schemas/#csv-transformation","title":"CSV transformation","text":"<p>CSV transformer could be build with help of <code>CsvTransformer.CsvTransformerBuilder</code> e.g.</p> JavaKotlin <pre><code>     CsvTransformer&lt;String&gt; transformer =\n        CsvTransformer.&lt;String&gt;builder().header(true).separator(separator).build();\n</code></pre> <pre><code>    val transformer = CsvTransformer.builder&lt;String&gt;().header(true).separator(separator).build()\n</code></pre> <p>The following can be configured:</p> <ul> <li>the separator and quotes could be specified with <code>separator()</code> and <code>quote()</code></li> <li>with or without header also could be specified with <code>header()</code></li> </ul> <p>To generate data based on a schema just call <code>generate</code> against <code>schema</code>:</p> JavaKotlin <pre><code>     String csv = transformer.generate(schema, limit);\n</code></pre> <pre><code>    val csv = transformer.generate(schema, limit)\n</code></pre> <p>Also it's possible to use schemas to transform existing data. E.g. there is a collection of <code>Name</code> objects  and we are going to build csv of first and last names based on this collection:</p> JavaKotlin <pre><code>     Schema&lt;Name, String&gt; schema =\n        Schema.of(field(\"firstName\", Name::firstName), field(\"lastname\", Name::lastName));\n\n    CsvTransformer&lt;Name&gt; transformer =\n        CsvTransformer.&lt;Name&gt;builder().header(false).separator(\" : \").build();\n    String csv =\n        transformer.generate(\n            faker.&lt;Name&gt;collection().suppliers(faker::name).maxLen(limit).build(),\n            schema);\n</code></pre> <pre><code>    val faker = BaseFaker()\n\n    val schema = Schema.of(field(\"firstName\", Name::firstName), field(\"lastname\", Name::lastName))\n\n    val transformer = CsvTransformer.builder&lt;Name&gt;().header(false).separator(\" : \").build()\n    val csv = transformer.generate(\n        faker.collection&lt;Name&gt;().suppliers(Supplier { faker.name() }).maxLen(limit).build(), schema\n    )\n</code></pre>"},{"location":"documentation/schemas/#json-transformation","title":"JSON transformation","text":"<p>JSON transformation is very similar to CSV. The main difference is that JSON supports nested values which could be handled with help of <code>compositeField</code>.</p> <p>Example of JSON generation:</p> JavaKotlin <pre><code>    Schema&lt;Object, ?&gt; schema = Schema.of(\n        field(\"Text\", () -&gt; faker.name().firstName()),\n        field(\"Bool\", () -&gt; faker.bool().bool())\n    );\n\n    JsonTransformer&lt;Object&gt; transformer = JsonTransformer.builder().build();\n    String json = transformer.generate(schema, 2);\n</code></pre> <pre><code>    val faker = BaseFaker()\n\n    val schema: Schema&lt;String, *&gt; = Schema.of(\n        field(\"Text\", Supplier { faker.name().firstName() }),\n        field(\"Bool\", Supplier { faker.bool().bool() })\n    )\n\n    val transformer = JsonTransformer.builder&lt;String&gt;().build();\n    val json = transformer.generate(schema, 2)\n</code></pre> <p>To use composite fields it should be defined on <code>Schema</code> level and nothing more.</p>"},{"location":"documentation/schemas/#sql-transformation","title":"SQL Transformation","text":"<p>Note: right now only <code>INSERT</code> is supported. </p> <p>It generates a number of <code>INSERT</code> statements. There are 2 modes: batch and non batch generation.</p> <p>Batch generation means that one <code>INSERT</code> statement contains several rows to insert. Since different databases could have different syntax there is initial support for different dialects.  Dialect could be specified during <code>SQLTransformaer</code> build e.g:</p> JavaKotlin <pre><code>    SqlTransformer&lt;String&gt; transformer =\n        new SqlTransformer.SqlTransformerBuilder&lt;String&gt;()\n            .schemaName(tableSchemaName).dialect(SqlDialect.ORACLE).build();\n</code></pre> <pre><code>    val transformer = SqlTransformer.SqlTransformerBuilder&lt;String&gt;()\n        .schemaName(tableSchemaName).dialect(SqlDialect.ORACLE).build()\n</code></pre> <p>Dialect also handles SQL quote identifiers, quotes and other SQL dialect specifics.</p> <p>An example of batch mode:</p> JavaKotlin <pre><code>    Faker faker = new Faker();\n    Schema&lt;String, String&gt; schema =\n        Schema.of(field(\"firstName\", () -&gt; faker.name().firstName()),\n            field(\"lastName\", () -&gt; faker.name().lastName()));\n    SqlTransformer&lt;String&gt; transformer =\n        new SqlTransformer.SqlTransformerBuilder&lt;String&gt;()\n            .batch(5)\n            .tableName(\"MY_TABLE\")\n            .dialect(SqlDialect.POSTGRES)\n            .build();\n    String output = transformer.generate(schema, 10);\n</code></pre> <pre><code>    val faker = Faker()\n    val schema: Schema&lt;String, String&gt; = Schema.of(\n        field(\"firstName\", Supplier { faker.name().firstName() }),\n        field(\"lastName\", Supplier { faker.name().lastName() })\n    )\n    val transformer = SqlTransformer.SqlTransformerBuilder&lt;String&gt;()\n        .batch(5)\n        .tableName(\"MY_TABLE\")\n        .dialect(SqlDialect.POSTGRES)\n        .build()\n    val output = transformer.generate(schema, 10)\n</code></pre> <p>will generate 2 <code>INSERT</code> each containing 5 rows e.g. <pre><code>INSERT INTO MY_TABLE (\"firstName\", \"lastName\")\nVALUES ('Billy', 'Wintheiser'),\n       ('Fernando', 'Sanford'),\n       ('Jamey', 'Torp'),\n       ('Nicolette', 'Wiza'),\n       ('Sherman', 'Miller');\nINSERT INTO MY_TABLE (\"firstName\", \"lastName\")\nVALUES ('Marcell', 'Walsh'),\n       ('Kareen', 'Bode'),\n       ('Jules', 'Homenick'),\n       ('Lashay', 'Gaylord'),\n       ('Tyler', 'Miller');\n</code></pre></p>"},{"location":"documentation/schemas/#advanced-sql-types","title":"Advanced SQL types","text":"<p>It also supports generation of <code>ARRAY</code>, <code>MULTISET</code> and <code>ROW</code> types. Please be aware that not every database engine supports it and datafaker could do it for every dialect. </p> <p>To generate <code>ARRAY</code> schema field supply an array. To generate <code>MULTISET</code> schema field supply a list (SQL <code>MULTISET</code> could contain duplicates). To generate <code>ROW</code> schema field should supply a <code>compositeField</code>.</p> <p>e.g.</p> JavaKotlin <pre><code>    Schema.of(field(\"ints\", () -&gt; new int[]{1, 2, 3}));\n</code></pre> <pre><code>    val schema: Schema&lt;String, IntArray&gt; = Schema.of(field(\"ints\", Supplier { intArrayOf(1, 2, 3) }))\n</code></pre> <p>will lead to</p> <pre><code>INSERT INTO \"MyTable\" (\"ints\") VALUES (ARRAY[1, 2, 3]);\n</code></pre> JavaKotlin <pre><code>    Schema.of(field(\"names_multiset\", () -&gt; Collections.singleton(\"hello\"));\n</code></pre> <pre><code>    val schema: Schema&lt;String, Set&lt;String&gt;&gt; = Schema.of(field(\"names_multiset\", Supplier { Collections.singleton(\"hello\") } ))\n</code></pre> <p>will lead to</p> <pre><code>INSERT INTO \"MyTable\" (\"names_multiset\") VALUES (MULTISET['hello']);\n</code></pre> JavaKotlin <pre><code>    schema.of(compositeField(\"row\", new Field[]{field(\"name\", () -&gt; \"2\")});\n</code></pre> <pre><code>    Schema.of(compositeField(\"row\", arrayOf(field(\"name\", Supplier { \"2\" }))))\n</code></pre> <p>will lead to</p> <pre><code>INSERT INTO \"MyTable\" (\"row\") VALUES (ROW('2'));\n</code></pre>"},{"location":"documentation/schemas/#spark-sql","title":"Spark SQL","text":"<p>Some engines like Spark stand out with support for complex types like <code>STRUCT</code> and <code>MAP</code>. Spark dialect doesn't support batch inserts. The dialect will throw an exception if you attempt to generate batch inserts.</p> <p>The following schema:</p> JavaKotlin <pre><code>    Schema.of(\n        field(\"string\", () -&gt; \"string\"),\n        field(\"array\", () -&gt; new int[]{1, 2, 3}),\n        field(\"map\", () -&gt; Map.of(\"key\", \"value\")),\n        compositeField(\"struct\", new Field[]{field(\"name\", () -&gt; \"2\")})\n    );\n</code></pre> <pre><code>    Schema.of(\n        field(\"string\", Supplier { \"string\" }),\n        field(\"array\", Supplier { intArrayOf(1, 2, 3) }),\n        field(\"map\", Supplier { mapOf(\"key\" to \"value\") }),\n        compositeField(\"struct\", arrayOf(field(\"name\", Supplier { \"2\" })))\n    )\n</code></pre> <p>will lead to:</p> <pre><code>INSERT INTO `MyTable` (`string`, `array`, `map`, `struct`) \nVALUES ('string', ARRAY(1, 2, 3), MAP('key', 'value'), NAMED_STRUCT('name', '2'));\n</code></pre>"},{"location":"documentation/schemas/#yaml-transformation","title":"YAML transformation","text":"<p>YAML transformation is very similar to CSV.</p> <p>The following is an example on how to use it:</p> Java <pre><code>    final BaseFaker faker = new BaseFaker();\n\n    YamlTransformer&lt;Object&gt; transformer = new YamlTransformer&lt;&gt;();\n    Schema&lt;Object, ?&gt; schema = Schema.of(\n        field(\"name\", () -&gt; faker.name().firstName()),\n        field(\"lastname\", () -&gt; faker.name().lastName()),\n        field(\"phones\", () -&gt; Schema.of(\n            field(\"worknumbers\", () -&gt; ((Stream&lt;?&gt;) faker.&lt;String&gt;stream().suppliers(() -&gt; faker.phoneNumber().phoneNumber()).maxLen(2).build().get())\n                .collect(Collectors.toList())),\n            field(\"cellphones\", () -&gt; ((Stream&lt;?&gt;) faker.&lt;String&gt;stream().suppliers(() -&gt; faker.phoneNumber().cellPhone()).maxLen(3).build().get())\n                .collect(Collectors.toList()))\n        )),\n        field(\"address\", () -&gt; Schema.of(\n            field(\"city\", () -&gt; faker.address().city()),\n            field(\"country\", () -&gt; faker.address().country()),\n            field(\"streetAddress\", () -&gt; faker.address().streetAddress())\n        ))\n    );\n\n    System.out.println(transformer.generate(schema, 1));\n</code></pre> <p>will generate yaml with nested fields:</p> <pre><code>name: Mason\nlastname: Bechtelar\nphones:\n  worknumbers:\n    - (520) 205-2587 x2139\n    - (248) 225-6912 x4880\n  cellphones:\n    - 714-269-8609\n    - 1-512-606-8850\n    - 1-386-909-7996\naddress:\n  city: Port Wan\n  country: Trinidad and Tobago\n  streetAddress: 6510 Duncan Landing\n</code></pre>"},{"location":"documentation/schemas/#java-object-transformation","title":"Java Object transformation","text":"<p>Java Object transformer could be built with help of JavaObjectTransformer. </p> <p>When building JavaObjectTransformer you should provide a class to be used as a template for generated objects.</p> JavaKotlin <pre><code>    public static class Person {\n       private String firstName;\n       private String lastName;\n       private Date birthDate;\n       private int id;\n    }\n</code></pre> <pre><code>    data class Person(\n        var firstName: String,\n        var lastName: String,\n        var birthDate: Date,\n        var id: Int\n    )\n</code></pre> <p>Then you should provide a schema for the class.</p> JavaKotlin <pre><code>    JavaObjectTransformer jTransformer = new JavaObjectTransformer();\n    Schema&lt;Object, ?&gt; schema = Schema.of(\n        field(\"firstName\", () -&gt; faker.name().firstName()),\n        field(\"lastName\", () -&gt; faker.name().lastName()),\n        field(\"birthDate\", () -&gt; faker.date().birthday()),\n        field(\"id\", () -&gt; faker.number().positive()));\n\n    System.out.println(jTransformer.apply(Person.class, schema));\n</code></pre> <pre><code>    val jTransformer = JavaObjectTransformer()\n    val schema: Schema&lt;Any, Any&gt; = Schema.of(\n        field(\"firstName\", Supplier { faker.name().firstName() }),\n        field(\"lastName\", Supplier { faker.name().lastName() }),\n        field(\"birthDate\", Supplier { faker.date().birthday() }),\n        field(\"id\", Supplier { faker.number().positive() }))\n\n    println(jTransformer.apply(Person::class.java, schema))\n</code></pre> <p>will generate object with fields populated with random values based on specified suppliers.</p>"},{"location":"documentation/schemas/#populating-java-object-with-predefined-schema","title":"Populating Java Object with predefined Schema","text":"<p>You can use predefined schema to populate Java Object or default schema for the class. Schema should be declared as a static method with return type <code>Schema&lt;Object, ?&gt;</code>.</p> JavaKotlin <pre><code>      public static Schema&lt;Object, ?&gt; defaultSchema() {\n        var faker = new Faker(Locale.forLanguageTag(\"fr-en\"), new RandomService(new Random(1)));\n        return Schema.of(field(\"name\", () -&gt; faker.name().fullName()));\n      }\n</code></pre> <pre><code>    fun defaultSchema(): Schema&lt;Any, Any&gt; {\n        val faker = Faker(Locale.forLanguageTag(\"fr-en\"), RandomService(Random(1)))\n        return Schema.of(field(\"name\", Supplier { faker.name().fullName() }))\n    }\n</code></pre> <p>Then you should provide a class to be used as a template for generated objects. Class should be annotated with <code>@FakeForSchema</code> annotation with path to the schema method as a value.</p> <p>Note: If default schema and class template are in the same class, you can omit full path to the method and use only method name.</p> JavaKotlin <pre><code>    @FakeForSchema(\"net.datafaker.annotations.FakeAnnotationTest#defaultSchema\")\n    public class Person {\n        private String fullName;\n\n        public String getFullName() {\n            return fullName;\n        }\n\n        public void setFullName(String fullName) {\n            this.fullName = fullName;\n        }\n    }\n</code></pre> <pre><code>    @FakeForSchema(\"net.datafaker.annotations.FakeAnnotationTest#defaultSchema\")\n    data class Person(\n        var fullName: String\n    )\n</code></pre> <p>Then you can use <code>net.datafaker.providers.base.BaseFaker.populate(java.lang.Class&lt;T&gt;)</code> to populate object with default predefined schema.</p> JavaKotlin <pre><code>    BaseFaker faker = new BaseFaker();\n    Person person = faker.populate(Person.class);\n</code></pre> <pre><code>    val faker = BaseFaker()\n    val person = faker.populate(Person::class.java)\n</code></pre> <p>Or you can use <code>net.datafaker.providers.base.BaseFaker.populate(java.lang.Class&lt;T&gt;, net.datafaker.schema.Schema&lt;java.lang.Object, ?&gt;)</code> to populate object with custom schema.</p> JavaKotlin <pre><code>    BaseFaker faker = new BaseFaker();\n    Person person = faker.populate(Person.class, Schema.of(field(\"name\", () -&gt; faker.superhero().name())));\n</code></pre> <pre><code>    val faker = BaseFaker()\n    val person = faker.populate(Person::class.java, Schema.of(field(\"name\", Supplier { faker.superhero().name() })))\n</code></pre>"},{"location":"documentation/schemas/#toml-transformation","title":"TOML transformation","text":"<p>TOML transformation is similar to YAML and CSV.</p> <p>The following is an example on how to use it:</p> Java <pre><code>    final BaseFaker faker = new BaseFaker();\n\n    TomlTransformer&lt;Object&gt; transformer = new TomlTransformer&lt;&gt;();\n    Schema&lt;Object, ?&gt; schema = Schema.of(\n        field(\"name\", () -&gt; faker.name().firstName()),\n        field(\"lastname\", () -&gt; faker.name().lastName()),\n        field(\"phones\", () -&gt; Schema.of(\n            field(\"worknumbers\", () -&gt; ((Stream&lt;?&gt;) faker.&lt;String&gt;stream().suppliers(() -&gt; faker.phoneNumber().phoneNumber()).maxLen(2).build().get())\n                .collect(Collectors.toList())),\n            field(\"cellphones\", () -&gt; ((Stream&lt;?&gt;) faker.&lt;String&gt;stream().suppliers(() -&gt; faker.phoneNumber().cellPhone()).maxLen(3).build().get())\n                .collect(Collectors.toList()))\n        )),\n        field(\"address\", () -&gt; Schema.of(\n            field(\"city\", () -&gt; faker.address().city()),\n            field(\"country\", () -&gt; faker.address().country()),\n            field(\"streetAddress\", () -&gt; faker.address().streetAddress())\n        ))\n    );\n\n    System.out.println(transformer.generate(schema, 1));\n</code></pre> <p>will generate toml with nested fields:</p> <pre><code>name = \"Elaine\"\nlastname = \"King\"\n[phones]\nworknumbers = [ \"(806) 207-5920\", \"(505) 640-6195\" ]\ncellphones = [ \"(214) 287-6337\", \"(872) 940-4806\", \"(813) 294-1719\" ]\n[address]\ncity = \"Lake Caitlin\"\ncountry = \"Mongolia\"\nstreetAddress = \"5111 D'Amore Fall\"\n</code></pre>"},{"location":"documentation/sequences/","title":"Sequences","text":"<p>Supported fake sequences:</p> <ul> <li>FakeCollection</li> <li>FakeStream</li> </ul>"},{"location":"documentation/sequences/#fakesequence-api","title":"FakeSequence API","text":"<p>Support of fake collections has been added to Datafaker since version 1.2.0. Support of fake streams/fake sequence has been added to Datafaker since version 1.7.0.</p> <p>For example, the following code will generate a list/stream of first and last names with number of elements in it between 3 and 5:</p> ListStream <pre><code>List&lt;String&gt; names = \n    faker.collection(\n            () -&gt; faker.name().firstName(), \n            () -&gt; faker.name().lastName())\n        .len(3, 5)\n        .generate();\n</code></pre> <pre><code>Stream&lt;String&gt; names = \n    faker.stream(\n            () -&gt; faker.name().firstName(), \n            () -&gt; faker.name().lastName())\n        .len(3, 5)\n        .generate();\n</code></pre> <p>A list/stream can also contain different types:</p> ListStream <pre><code>List&lt;Object&gt; objects =\n    faker.&lt;Object&gt;collection(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .maxLen(5)\n        .generate();\n</code></pre> <pre><code>Stream&lt;Object&gt; objects =\n    faker.&lt;Object&gt;stream(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .maxLen(5)\n        .generate();\n</code></pre> <p>With usage of <code>nullRate</code> it is possible to specify how often it should contain null values. By default, it's value is 0, i.e. no null values will be generated.</p> ListStream <pre><code>List&lt;Object&gt; objects =\n    faker.&lt;Object&gt;collection(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .nullRate(1)\n        .maxLen(5)\n        .generate();\n</code></pre> <pre><code>Stream&lt;Object&gt; objects =\n    faker.&lt;Object&gt;stream(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .nullRate(1)\n        .maxLen(5)\n        .generate();\n</code></pre> <p>The above will generate a collection/stream where every value is null. To generate a collection/stream with only about 30% values of null, <code>nullRate(0.3)</code> will do it.</p> ListStream <pre><code>List&lt;Object&gt; objects =\n    faker.&lt;Object&gt;collection(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .nullRate(0.3)\n        .maxLen(5)\n        .generate();\n</code></pre> <pre><code>Stream&lt;Object&gt; objects =\n    faker.&lt;Object&gt;stream(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .nullRate(0.3)\n        .maxLen(5)\n        .generate();\n</code></pre> <p>FakeSequence also supports generation of an infinite stream:</p> Java <pre><code>Stream&lt;Object&gt; objects =\n    faker.&lt;Object&gt;stream(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .generate();\n</code></pre> <p>It is also possible to distinguish finite and infinite  FakeStreams based on FakeSequence API:</p> Java <pre><code>FakeSequence&lt;Object&gt; fakeSequence = faker.&lt;Object&gt;stream(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .build();\n\nSystem.out.println(fakeSequence.isInfinite()); // true\n</code></pre> <p>For FakeCollection this function will always return false:</p> Java <pre><code>FakeSequence&lt;Object&gt; fakeSequence = faker.&lt;Object&gt;collection(\n            () -&gt; faker.name().firstName(),\n            () -&gt; faker.random().nextInt(100))\n        .build();\n\nSystem.out.println(fakeSequence.isInfinite()); // false\n</code></pre>"},{"location":"documentation/unique-values/","title":"Unique Values","text":""},{"location":"documentation/unique-values/#values-from-yaml-files","title":"Values from YAML files","text":"<p>Unique values can be retrieved from the YAML files by key, if the key references a hard-coded list of values.</p> Java <pre><code>Faker faker = new Faker();\n\n// The values returned in the following lines will never be the same.\nString firstUniqueInstrument = faker.unique().fetchFromYaml(\"music.instruments\"); // \"Flute\"\nString secondUniqueInstrument = faker.unique().fetchFromYaml(\"music.instruments\"); // \"Clarinet\"\n</code></pre> <p>Note: Unique values are based on key and locale, so it's possible to get the same value if the locale is manually changed or if two different keys contain the same value.</p> <p>If all possible values have been returned, an exception will be thrown.</p> Java <pre><code>Faker faker = new Faker();\nString firstUniqueInstrument = faker.unique().fetchFromYaml(\"music.instruments\"); // \"Ukelele\"\n...\nString nthUniqueInstrument = faker.unique().fetchFromYaml(\"music.instruments\"); // throws NoSuchElementException\n</code></pre> <p>Any non-string values will be converted.</p> Java <pre><code>Faker faker = new Faker();\nString successCode = faker.unique().fetchFromYaml(\"sip.response.codes.success\")); // \"200\"\n</code></pre>"},{"location":"documentation/usage/","title":"Usage","text":"<p>The simplest way to use Datafaker to generate fake data is by instantiating the Faker using the default constructor.</p>"},{"location":"documentation/usage/#default-usage","title":"Default usage","text":"JavaKotlin <pre><code>import net.datafaker.Faker;\n\nFaker faker = new Faker();\n\nString name = faker.name().fullName(); // Miss Samanta Schmidt\n</code></pre> <pre><code>import net.datafaker.Faker\n\nval faker = Faker()\n\nval name = faker.name().fullName() // Miss Samanta Schmidt\n</code></pre> <p>This will instantiate a Faker using the English locale. </p>"},{"location":"documentation/usage/#different-locale","title":"Different locale","text":"<p>To use Datafaker with a different locale, you can supply on in the constructor as such:</p> JavaKotlin <pre><code>Faker faker = new Faker(new Locale(\"nl\"));\n\nString name = faker.name().fullName(); // Chelan Klijnsma\n</code></pre> <pre><code>val faker = Faker(Locale(\"nl\"))\n\nval name = faker.name().fullName() // Chelan Klijnsma\n</code></pre>"},{"location":"documentation/usage/#multiple-locales","title":"Multiple locales","text":"<p>In case you want to mix locales, the easiest way to do so is to create a Faker per locale,  and mix between those fakers. For an example, see below, which produce something like the following:</p> <pre><code>8708 \u0634\u0627\u0631\u0639 \u0642\u0637\u0631, \u0645\u062f\u064a\u0646\u0629 \u062e\u0648\u0644\u0629\n\u062c\u0646\u0627\u062d 385 127 \u0634\u0627\u0631\u0639 \u0627\u0644\u0639\u0634\u0631\u064a\u0646, \u0645\u0639\u0628\u0631 \u0639\u0628\u062f\u0627\u0644\u0644\u0647\nSchlangenlaan 461a, Oost Jessamyingen, WV 8234 ZX\n1 hoog Gritlaan 52, Margiesmeer, OK 1083 VE\n</code></pre> JavaKotlin <pre><code>Faker faker1 = new Faker(new Locale(\"nl\"));\nFaker faker2 = new Faker(new Locale(\"ar\"));\n\nList&lt;Faker&gt; fakers = Arrays.asList(faker1, faker2);\n\nfor (int i = 0; i &lt; 10; i++) {\n    Faker randomFaker = new Faker().options().nextElement(fakers);\n    System.out.println(randomFaker.address().fullAddress());\n}\n</code></pre> <pre><code>val faker1 = Faker(Locale(\"nl\"))\nval faker2 = Faker(Locale(\"ar\"))\n\nval fakers = listOf(faker1, faker2)\n\nrepeat(10) {\n    val randomFaker = Faker().options().nextElement(fakers)\n    println(randomFaker.address().fullAddress())\n}\n</code></pre>"},{"location":"documentation/usage/#repeatable-random-results","title":"Repeatable random results","text":"<p>To generate a more predictable random result, it's possible to provide a seed value to the Faker. </p> <p>When providing a seed, the instantiation of Fake objects will always happen in a predictable way, which can be handy for generating results multiple times.</p> JavaKotlin <pre><code>Faker faker = new Faker(new Random(0));\n</code></pre> <pre><code>val faker = Faker(Random(0))\n</code></pre>"},{"location":"documentation/usage/#random-java-enum-values","title":"Random Java enum values","text":"<p>To get a random value from a Java <code>enum</code> you can employ the <code>Options.option()</code> method.</p> <p>The following example assumes you want to retrieve a random value from the <code>Day</code> enum.</p> Java <pre><code>enum Day {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n\nprivate final Options opt = faker.options();\nopt.option(Day.class);\n</code></pre>"},{"location":"in-the-media/links/","title":"Articles and news","text":"<p>February 27, 2025</p> <p>Manfred Moser and Cole Bowden are joined by Jan Wa\u015b in \"Trino Community Broadcast 71: Fake it real good\" to learn about the new Faker connector and the Datafaker library. You can find the episode here: </p> <p>https://trino.io/episodes/71.html</p> <p>July 16, 2024</p> <p>Roman Rybak published an article titled \"Datafaker Gen: Leveraging BigQuery Sink on Google Cloud Platform\". You can find it here: https://dzone.com/articles/datafaker-gen-leveraging-bigquery-sink-on-google</p> <p>May 31, 2024</p> <p>Michael Vitz had a talk at Spring I/O which was a perfect fit for Datafaker, related to Advanced Testing Techniques for Spring Boot applications. The reference to Datafaker can be found 19 minutes into the presentation, but it's recommended to watch the whole presentation, it contains a lot of great content related to testing:</p> <p>https://www.youtube.com/watch?v=vn9P38o03TQ&amp;t=1124s</p> <p>May 15, 2024</p> <p>Elias Nogueira had a talk at Devoxx UK called \"Datafaker: the most powerful fake data generator\". You can find the talk here: </p> <p>https://www.youtube.com/watch?v=S6Z7vB5zc0g</p> <p>Feb 22, 2024</p> <p>Roman Rybak published an article about Flexible Data Generation With Datafaker Gen, which you can find here: https://dzone.com/articles/flexible-data-generation-with-datafake-gen</p> <p>December 4, 2023</p> <p>Datafaker: Simplifying Test Data Generation for Java and Kotlin article by Nexus Blog, which you can find here: </p> <p>https://blog.teamnexus.in/blog/2023/12/04/datafaker-simplifying-test-data-generation-for-java-and-kotlin/ </p> <p>June 15, 2023</p> <p>We published an article on DZone about major release of Datafaker 2.0, which you can find here: https://dzone.com/articles/datafaker-20</p> <p>June 9, 2023</p> <p>Christophe Vaudry started writing a French series about Datafaker, which you can find here: </p> <p>https://medium.com/norsys-octogone/introduction-%C3%A0-datafaker-1-fournisseurs-de-donn%C3%A9es-factices-dad4cd901e97</p> <p>October 20, 2022</p> <p>Eugene Kovko wrote an excellent getting started guide for Baeldung, which you can find here:</p> <p>https://www.baeldung.com/java-datafaker</p> <p>October 11, 2022</p> <p>Jaap Coomans, who also helped contribute data to Datafaker, updated his excellent presentation which now features Datafaker to help in generating real looking test data:</p> <p>https://youtu.be/HZoHzp4Rb3E?t=730</p> <p>July 17, 2022</p> <p>Philip Riecks updated his Javafaker article by using Datafaker instead:</p> <p>https://rieckpil.de/howto-generate-random-data-in-java-using-java-faker/</p> <p>May 22, 2022</p> <p>We published an article on DZone to demonstrate some of the new features of Datafaker:</p> <p>https://dzone.com/articles/datafaker-a-solid-alternative-to-using-production</p> <p>March 5, 2022</p> <p>We were mentioned as featured library of the day, by The Artifact Podcast: </p> <p>The Artifact: Multicloud vs polycloud, Jakarta EE and other news (Ep 3) on Apple Podcasts (24:40)</p> <p>https://podcasts.apple.com/au/podcast/the-artifact/id1609827559?i=1000553024398</p> <p>February 13, 2022</p> <p>Coffee and Tips wrote a tutorial about how to generate random data using Datafaker:</p> <p>https://www.coffeeandtips.com/post/how-to-generate-random-data-using-datafaker-lib</p> <p>February 11, 2022</p> <p>Piotr Minkowski was one of the first people to tweet about Datafaker:  </p> <p>https://twitter.com/piotr_minkowski/status/1491780736847810560/photo/1</p> <p>January 4, 2022</p> <p>The first article by Jworks which is about how to use Datafaker  to be an alternative for using production data.</p> <p>https://jworks.io/datafaker-an-alternative-to-production-data/</p>"},{"location":"releases/0.9.0/","title":"Datafaker 0.9.0 (1 Jan 2022)","text":"<p>This release is a direct fork of Javafaker, with most of the more than 100 open PR's merged,  and several other bugs fixed.  </p>"},{"location":"releases/0.9.0/#changes","title":"Changes","text":"PR Description 692 Add Size (adjective) and Mood (feeling, emotion, tone) feature 685 Add random locale selection/rotation for internationalization/localization testing 603 683 IDEA: random java.time.Duration 677 682 Added cell phone support for the Dutch (NL) language. 680 Fix issue 668 676 I can see ar.yaml, Apparently you seem to support Arabic lang 675 Feature: Issue-666 673 US ZipCode should be specific about 5 or 5+4 digits (591) 672 add MG on state_abbr pt-br 596 659 (658) Fix typo in StarTrek species 656 Improve Travis CI build Performance 655 Shade snakeyml to avoid conflicts on consumers requiring higher versions 653 Removes trailing space in instrument name 650 Add es-PY.yml, based on es-MX.yml 645 Solving problem 414 644 Solve issue 450 643 Add Hearthstone feature 636 issue 571 635 Resident evil feature 633 Fix issue 391 Offer the possibility to generate a top and second level domain for a company 631 Fix issue 629 and issue 458 628 fix issue 626: Typo in the faker.subscription.plans variable inside es.yml 625 Add Minecraft and Touhou fakers 622 Fix bug 598 fake food ingredient has no support to hebrew 619 Fix issue 566 \"en-ZA\" ID number is invalid 617 Remove trailing space from animal name: turtle 616 Fix issue # 584: Internet.password doesn't always return expected value 614 Solve StarCraftTest Failed issue 611# 613 Fixed issue 584 606 Set country_code for NL.yml 604 Adds Portuguese VAT identification number (NIF) 602 Correctly handle generating a password of fixed length 595 Added hr locale support 594 ko.yml Faker Data Update 593 Changing the Turkish adage to its correct usage 583 Update ru.yml 582 Improve de-CH.yml 576 Added Dessert Faker 574 This PR fixes issue 568 (missing quote) 565 Fix russian translations 557 Update the IBAN code based on the latest version of iban_registry 511 Add some lastnames with \u00f1 for \"es\" and \"es-mx\" 509 Add some lastnames with \u00f1 for \"es\" and \"es-mx\" 506 Fiex testHungarianZipCodeByState() 499 Fixed Zh_CN IdNumber invalid issue 495 Added locale sensivity on longitute, latitude. 492 Complied regular expression patterns and applied some other performance suggestions 480 Vehicle Faker 462 Adding proper set of area codes for phone numbers in Canada for both 'ca' and 'en-CA' locales 453 add Science service and elementary particles 449 Add CS yaml 423 Babylon5 408 Fix inability to resolve dota.yml path. Add more dota heroes and items 387 Barcode generator 382 Fix german material names 354 Creates locale for es-AR 333 Update ru.yml 314 Add Singaporean ID numbers 264 Add CPF generation (identification number in Brazil like social security number)"},{"location":"releases/1.0.0/","title":"Datafaker 1.0.0 (3 Jan 2022)","text":"<p>The first 1.x release! This release is backwards incompatible with previous versions since while the structure of the code is still the same, the package names have changed to <code>net.datafaker</code>. </p> <p>To migrate to this version of Datafaker, all you need to do is replace the imports from  <code>com.github.javafaker</code> to <code>net.datafaker</code>. No other changes are needed.</p>"},{"location":"releases/1.0.0/#notable-changes","title":"Notable changes","text":"<ul> <li>Added ICD-10, ICD-10-AM, ICD-10-CM and ICD-10-PCS support to Medical</li> <li>Added Appliance provider</li> <li>Added Breaking Bad provider</li> <li>Added Bossa Nova provider</li> <li>Added RuPaul's Drag Race provider</li> </ul>"},{"location":"releases/1.1.0/","title":"Datafaker 1.1.0 (1 Feb 2022)","text":"<p>Datafaker 1.1.0 reduces the number of external dependencies and provides a few minor bug fixes. </p> <p>It also includes a few internal improvements, mostly related to an improved level of code coverage. See for the full release notes below.</p>"},{"location":"releases/1.1.0/#contributors","title":"Contributors","text":"<p>For this release, we'd like thank Elton Andr\u00e9, Sergey Nuyanzin and Amit Solankurkar for their contributions to Datafaker.</p>"},{"location":"releases/1.1.0/#notable-changes","title":"Notable changes","text":"<ul> <li>Breaking (minor) change: <code>Relationships</code> has been renamed to <code>Relationship</code>.</li> <li>Bugfix: Fixed Russian translation (PR #693 by Sergey Nuyanzin)</li> <li>Improvement: Added mountain ranges (PR #696 by Sergey Nuyanzin)</li> <li>Improvement: Minimised external dependencies. Removed Guava and Apache Commons from production dependencies, and logging from test dependencies.</li> <li>Improvement: New <code>examplify</code> method in Faker, which generates a value by example, with the same pattern as the input value. (See the Javadoc for examples). PR #4 by Amit Solankurkar.</li> <li>Bugfix: Removed 226 area code as reported here Issue #698.</li> <li>Improvement: Now supports valid Swedish (sv_SE) phone numbers based on Telephone Numbers in Sweden.</li> <li>Improvement: Now supports valid Dutch (nl_NL) phone numbers based on Telephone numbers in the Netherlands.</li> <li>Improvement: Now supports (mostly) valid Norwegian (nb_NO) phone numbers based on Telephone numbers in the Norway.</li> <li>Improvement: Now supports valid Czech Republic (cs_SZ) phone numbers based on Telephone numbers in the Czech Republic.</li> <li>Improvement: Now supports (mostly) valid Great Britain (en_UK) phone numbers based on Telephone numbers in the United Kingdom.</li> <li>Improvement: We now support Brazilian CPF and CNPJ numbers (PR #5), thanks to Elton Andr\u00e9.</li> </ul>"},{"location":"releases/1.2.0/","title":"Datafaker 1.2.0 (5 March 2022)","text":""},{"location":"releases/1.2.0/#contributors","title":"Contributors","text":"<p>For this release, we'd like thank the following people:</p> <ul> <li>Sergey Nuyanzin for adding 90% of the features of this release. Sergey added support for file formats, custom fakers, speed improvements, and many, many other items.</li> <li>Alexandre Saudate for adding multi-branch CNPJ generation (PR #71)</li> <li>David Ogar for contributing the Nigeria faker.(PR #70)</li> <li>zolv for adding add PESEL number generator (PR #54)</li> <li>Marius Larsen for adding Formula 1 data (PR #20)</li> <li>Valery Yatsynovich for changing AdoptJDK to Temurin (PR #14)</li> <li>Koen de Bruijn for updating a code example in the usage documentation (PR #6)</li> </ul> <p>To all of the above: we really appreciate all your contributions, and thank you all for making this library the way it is!</p>"},{"location":"releases/1.2.0/#providers-added","title":"Providers added","text":"<p>In this release, more providers have been added:</p> <ul> <li>Australia</li> <li>The IT Crowd</li> <li>Marketing, mostly buzzwords for now</li> <li>Restaurant, with names, types, reviews, etc</li> <li>Nato Phonetic Alphabet</li> <li>Nigeria, thanks to David Ogar</li> </ul> <p>The CNPJ provider has been improved, and now supports multiple branches, thanks to Alexandre Saudate.</p> <p>For a complete list of providers, see the providers overview.</p>"},{"location":"releases/1.2.0/#notable-changes","title":"Notable changes","text":"<ul> <li>Improvement: Support for custom providers!</li> <li>Improvement: Support for CSV, XML, YML and JSON fileformat.</li> <li>Improvement: Support for specifying date formats for dates and timestamps.</li> <li>Improvement: Added <code>nextInt</code> and <code>nextFloat</code> methods to <code>Faker</code> to make the <code>random()</code> method a better <code>Random</code> replacement.</li> <li>Improvement: Added <code>nextDouble</code> and <code>nextLong</code> methods to Faker to generate random numbers between bounds.</li> <li>Add support of methods with varargs and #{options.option ...} (PR #7), thanks to  Sergey Nuyanzin.</li> <li>Fixes and several improvements in Datafaker dependency management (PR #8) and (PR #9), thanks to  Sergey Nuyanzin.</li> <li>Added generation of ISO language and countries based on java Locale#getISOLanguages and Locale#getISOCountries (PR #19)</li> <li>Many fixes and improvements in the build stability, lots of performance improvements and many fixes for flakey tests</li> </ul>"},{"location":"releases/1.3.0/","title":"Datafaker 1.3.0 (2 April 2022)","text":"<p>Another new release of Datafaker. We found out that in some cases, the 1.2.0 version of Datafaker is too aggressive with caching results. This version fixes that, so we'd advise all users to upgrade to 1.3.0. </p> <p>Also, this version contains many new features, such as many new providers, new APIs to work with JSON data, improved caching, and more.</p>"},{"location":"releases/1.3.0/#contributors","title":"Contributors","text":"<p>For this release, we'd like thank the following people:</p> <ul> <li>Sergey Nuyanzin again for adding most of the features of this release, such as nested JSON support, adding a Maven wrapper, enabling JDK 18 support, </li> <li>Alexandre Saudate for contributing the AWS faker! Very handy, thanks!</li> <li>Valery Yatsynovich for making the documentation just a bit better! Thanks!</li> <li>Julio Gutierrez for adding more caching to Datafaker.</li> <li>and Dependabot for keeping our dependencies up to date :)</li> </ul>"},{"location":"releases/1.3.0/#providers-added","title":"Providers added","text":"<ul> <li>AWS</li> <li>Brooklyn Nine Nine</li> <li>Crypto Coin</li> <li>Hobby</li> <li>Horse</li> <li>Kpop</li> <li>Subscription</li> <li>Super Mario</li> <li>Volleyball</li> </ul> <p>Note: The Crypto provider has been renamed to Hashing, since they only contained one way Hashing functions.  It can still be accessed using the <code>crypto</code> method, but this will be removed in one of the upcoming releases.  </p>"},{"location":"releases/1.4.0/","title":"Datafaker 1.4.0 (20 May 2022)","text":"<p>Thanks to the hard work of Sergey Nuyanzin and a lot of contributors, I'm pleased to say we have another  new release of Datafaker. Lots of things have improved in this relase, such as (as usual), a lot of new providers, performance improvements in the generation of data, CSV and JSON generation through expressions, etc.</p> <p>Internally, we've recently migrated from JUnit 4 to JUnit 5, and from Hamcrest to AssertJ.  This is a slightly better approach to testing to making sure our library is without any errors.</p> <p>Fun fact: at the moment, we have close to 30.000 tests, with a code coverage of around 93%.  Despite having this amount of tests, all the tests run in less than 20 seconds! </p>"},{"location":"releases/1.4.0/#contributors","title":"Contributors","text":"<p>A big thanks to our contributes, without who this release wouldn't have been possible!</p> <ul> <li>Thanks to Tahanima for providing more fake data providers (Tea and Camera)</li> <li>Alexander Ilinykh for providing Philippino data</li> <li>Ilya Pantsyr for providing the Electrical Components provider </li> <li>Lance-Azrael for providing the Blood Type provider</li> <li>Izsak for providing the Oscar Movie provider</li> <li>Cooljj for providing the Battlefield 1 provider</li> <li>zhou mintao for providing the Soul Knight provider</li> </ul>"},{"location":"releases/1.4.0/#providers-added","title":"Providers added","text":"<ul> <li>Battlefield 1</li> <li>Blood Types</li> <li>Camera</li> <li>Device</li> <li>EldenRing</li> <li>Electrical Components</li> <li>Grateful Dead</li> <li>Hey Arnold</li> <li>Mountaineering</li> <li>Oscar Movie</li> <li>Seinfeld</li> <li>Soul Knight</li> <li>Tea</li> <li>Time</li> <li>Tron</li> </ul>"},{"location":"releases/1.5.0/","title":"Datafaker 1.5.0 (25 July 2022)","text":"<p>A little later than expected, but well worth the wait: another release of Datafaker, improved generation of phone numbers, 20(!) new providers, and many small improvements. Thanks everyone for supporting this library!</p>"},{"location":"releases/1.5.0/#contributors","title":"Contributors","text":"<p>A big thanks to our contributes, without who this release wouldn't have been possible!</p> <p>Big shouts out to:</p> <ul> <li>Sergejs Visockis</li> <li>Ilya Pantsyr</li> <li>Iago Saito</li> <li>Tahanima Chowdhury</li> </ul> <p>A special shoutout to Ilya, who did so many PR's that we had no other choice to make him part of the team! Welcome Ilya!</p>"},{"location":"releases/1.5.0/#providers-added","title":"Providers added","text":"<ul> <li>Big Bang Theory</li> <li>Cannabis</li> <li>Coffee</li> <li>Dark Soul</li> <li>DC Comics</li> <li>Departed</li> <li>Driving License</li> <li>Famous Last Words</li> <li>Ghost Busters</li> <li>Greek Philosopher</li> <li>Hololive</li> <li>House</li> <li>Football</li> <li>Industry Segments</li> <li>MBTI (Myers-Briggs Type Indicator)</li> <li>Measurement</li> <li>Money</li> <li>Movie</li> <li>Simpsons</li> <li>Verb</li> </ul>"},{"location":"releases/1.6.0/","title":"Datafaker 1.6.0 (11 Sept 2022)","text":"<p>Another release of Datafaker. In this release, 'we', but mostly @panilya, have improved the generation of valid phone numbers. While in older version of Datafaker every locale generates a phone number, more often than not they're invalid. With this release, for many locales this issue has been fixed, so our thanks to @panilya for addressing this!</p> <p>Also @panilya fixed the documentation using a generator, so now our list of providers is finally up to date! </p> <p>We've also received contributions from 5 new contributors! We appreciate all contributions, thank you all!</p>"},{"location":"releases/1.6.0/#new-contributors","title":"New Contributors","text":"<ul> <li>@andrinmeier made their first contribution in https://github.com/datafaker-net/datafaker/pull/286</li> <li>@p4pupro made their first contribution in https://github.com/datafaker-net/datafaker/pull/289</li> <li>@MEGarrusVakarian made their first contribution in https://github.com/datafaker-net/datafaker/pull/301</li> <li>@redhell made their first contribution in https://github.com/datafaker-net/datafaker/pull/307</li> <li>@yuokada made their first contribution in https://github.com/datafaker-net/datafaker/pull/328</li> </ul>"},{"location":"releases/1.6.0/#whats-changed","title":"What's Changed","text":""},{"location":"releases/1.6.0/#phone-number-fixes","title":"Phone number fixes","text":"<ul> <li>Fix phone number formats for hu_HU by @panilya in https://github.com/datafaker-net/datafaker/pull/290</li> <li>Fix phone number formats for lv_LV by @panilya in https://github.com/datafaker-net/datafaker/pull/291</li> <li>Fix phone number formats for pt-BR by @panilya in https://github.com/datafaker-net/datafaker/pull/248</li> <li>Fix phone number formats for fr-CH by @panilya in https://github.com/datafaker-net/datafaker/pull/249</li> <li>Fix phone number formats for sk_SK by @panilya in https://github.com/datafaker-net/datafaker/pull/293</li> <li>Fix phone number formats for fi_FI by @panilya in https://github.com/datafaker-net/datafaker/pull/294</li> <li>Fix phone number formats for en_IND locale by @panilya in https://github.com/datafaker-net/datafaker/pull/311</li> <li>Fix phone number formats for 'de_AT' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/312</li> <li>Fix phone number formats for 'th_TH' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/313</li> <li>Fix phone number formats for hr_HR locale by @panilya in https://github.com/datafaker-net/datafaker/pull/306</li> <li>Fix phone number formats for en-GB by @panilya in https://github.com/datafaker-net/datafaker/pull/274</li> <li>Fix phone number formats for tr_TR by @panilya in https://github.com/datafaker-net/datafaker/pull/284</li> <li>Fix phone number formats for by-BY by @panilya in https://github.com/datafaker-net/datafaker/pull/259</li> </ul>"},{"location":"releases/1.6.0/#other-fixes-and-improvements","title":"Other fixes and improvements","text":"<ul> <li>Fix broken 'Address.streetName' faker for 'bg' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/253</li> <li>Make delimiter for latLon and lonLat configurable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/258</li> <li>Use faker's locale to generate decimal separator for lon/lat address \u2026 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/260</li> <li>Add 'Computer' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/261</li> <li>Add space between providers' names by @panilya in https://github.com/datafaker-net/datafaker/pull/264</li> <li>Introduce AbstractProvider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/262</li> <li>Allow configure required and optional symbols for password generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/251</li> <li>Add possibility to pass seed to FakeValuesService by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/222</li> <li>Allow tests running concurrently by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/267</li> <li>Renamed IT test to Test. There's no need for integration tests. Relat\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/270</li> <li>Revert of #253 by @bodiam in https://github.com/datafaker-net/datafaker/pull/271</li> <li>Better usage of java.util.Locale. See #266 by @bodiam in https://github.com/datafaker-net/datafaker/pull/272</li> <li>Make concurrent tests more stable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/273</li> <li>Add 'Fallout' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/279</li> <li>Partial fix for #268, few supported countries, and got rid of the bro\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/269</li> <li>Add 'en_CA' passport number by @panilya in https://github.com/datafaker-net/datafaker/pull/280</li> <li>Error when generation passport without specifying locale by @panilya in https://github.com/datafaker-net/datafaker/pull/282</li> <li>Issue 285: Add internet().uuidv3() by @andrinmeier in https://github.com/datafaker-net/datafaker/pull/286</li> <li>Add CSV format example using a fake collection builder by @andrinmeier in https://github.com/datafaker-net/datafaker/pull/287</li> <li>Fix incorrect phone number formats in phone_number.yml by @panilya in https://github.com/datafaker-net/datafaker/pull/281</li> <li>Add 'Community' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/292</li> <li>Feature/garments sizes by @p4pupro in https://github.com/datafaker-net/datafaker/pull/289</li> <li>Change error count threshold value in PhoneNumberValidityFinderTest.testAllPhoneNumber by @panilya in https://github.com/datafaker-net/datafaker/pull/295</li> <li>Add Chiquito provider, and fixed the provider generator. by @bodiam in https://github.com/datafaker-net/datafaker/pull/298</li> <li>Add 'Clash of Clans' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/304</li> <li>Add \"Mass Effect\" faker by @MEGarrusVakarian in https://github.com/datafaker-net/datafaker/pull/301</li> <li>Add JShell example by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/303</li> <li>Add 'Dumb and Dumber' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/305</li> <li>Stabilize build for the case of concurrent tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/275</li> <li>Correction of Country in de.yml by @redhell in https://github.com/datafaker-net/datafaker/pull/307</li> <li>Add german license plates by @redhell in https://github.com/datafaker-net/datafaker/pull/308</li> <li>Vehicle update in german by @redhell in https://github.com/datafaker-net/datafaker/pull/309</li> <li>Add 'Final Space' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/310</li> <li>Add faker for pulling unique values from files by @giunto in https://github.com/datafaker-net/datafaker/pull/296</li> <li>Utility for generating 'providers.md' by @panilya in https://github.com/datafaker-net/datafaker/pull/297</li> <li>Bring back StarWars by @redhell in https://github.com/datafaker-net/datafaker/pull/314</li> <li>Add passport number format for en_GB locale by @panilya in https://github.com/datafaker-net/datafaker/pull/316</li> <li>Add markdown documentation for unique faker by @giunto in https://github.com/datafaker-net/datafaker/pull/321</li> <li>Improved documentation and slightly improved documentation generator \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/315</li> <li>Starwars by @bodiam in https://github.com/datafaker-net/datafaker/pull/323</li> <li>Support japan passport number by @yuokada in https://github.com/datafaker-net/datafaker/pull/328</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/datafaker-1.5.0...v1.6.0</p>"},{"location":"releases/1.6.0/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/1.7.0/","title":"Datafaker 1.7.0 (27 Nov 2022)","text":"<p>One of the biggest releases has just been created, with the help of no less than 12(!) new contributors.  Absolutely amazing, we couldn't have done it without you! </p> <p>Thanks to everyone involved, Datafaker now has more than a 100.000 monthly downloads,  and is used by projects at Netflix, Alibaba, Bytedance and many others! It's great to see that this library is being used, and again, thanks!</p> <p>In this release, you'll find many new features, such as:</p> <ul> <li>21 new providers</li> <li>Many performance improvements</li> <li>Far better SQL, XML, CSV and JSON generation</li> <li>Far better phone number generation. Almost all generated phone numbers are now valid numbers!</li> <li>Several bugfixes, mostly in the data generation.</li> </ul> <p>Have fun with this release!</p>"},{"location":"releases/1.7.0/#whats-changed","title":"What's Changed","text":"<ul> <li>Apply renaming master to main by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/343</li> <li>Enrich ja.yml by @yuokada in https://github.com/datafaker-net/datafaker/pull/345</li> <li>Refactor barcode by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/344</li> <li>Improve naming of ci jobs by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/348</li> <li>Add missing state (Flevoland) for Netherlands. by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/352</li> <li>Added Tesla make and models.  by @bodiam in https://github.com/datafaker-net/datafaker/pull/351</li> <li>Add new JSON generation example in file formats docs by @panilya in https://github.com/datafaker-net/datafaker/pull/354</li> <li>Add upholstery fabrics and colors to Vehicle provider by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/355</li> <li>Fix flaky test by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/358</li> <li>Make sure that padding is used in Hashing by @CucumisSativus in https://github.com/datafaker-net/datafaker/pull/360</li> <li>Fix for #359: Future and past is no longer 1 second into the future, \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/361</li> <li>Issue #268: More realistic passport generators for several countries. by @bodiam in https://github.com/datafaker-net/datafaker/pull/362</li> <li>Add 'es' passport number, add tests for uncoveraged passport numbers by @panilya in https://github.com/datafaker-net/datafaker/pull/363</li> <li>Move all provider registration to a separate interface by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/365</li> <li>Put open mocks in try catch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/366</li> <li>Introduce SportFaker and move all sport related fakers under it by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/369</li> <li>Move providers to base package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/371</li> <li>Extract food providers into a separate package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/372</li> <li>Extract video games into a separate provider type by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/373</li> <li>Extract movie to a separate package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/375</li> <li>Rename IProviders to BaseProviders by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/376</li> <li>Move id number objects to final fields to decrease number of object creations by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/379</li> <li>Add more European makes and models for the Vehicle provider by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/380</li> <li>Typos in BaseFaker by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/382</li> <li>Added Mazda as a car make and simplified BaseFakerTest. by @bodiam in https://github.com/datafaker-net/datafaker/pull/383</li> <li>Added links section by @bodiam in https://github.com/datafaker-net/datafaker/pull/385</li> <li>Datafaker wasn't 100% identical when repeating with the same seed, no\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/384</li> <li>Added Nio and Xpeng cars by @bodiam in https://github.com/datafaker-net/datafaker/pull/386</li> <li>Added Detective Conan and cleaned up integration test. by @bodiam in https://github.com/datafaker-net/datafaker/pull/387</li> <li>Added Dungeons and Dragons for Bart by @bodiam in https://github.com/datafaker-net/datafaker/pull/388</li> <li>Add FakerContext info to error log by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/390</li> <li>Support Bot User Agent by @yuokada in https://github.com/datafaker-net/datafaker/pull/392</li> <li>Added more Cities, State, State code, free email provider, area codes\u2026 by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/393</li> <li>Changed user agent any to slightly better name. by @bodiam in https://github.com/datafaker-net/datafaker/pull/394</li> <li>Move 'Overwatch' faker to videogame group by @panilya in https://github.com/datafaker-net/datafaker/pull/397</li> <li>Update 'CONTRIBUTING.md' by @panilya in https://github.com/datafaker-net/datafaker/pull/396</li> <li>Add 'Heroes of the Storm' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/395</li> <li>Move 'MassEffect' faker to videogames group by @panilya in https://github.com/datafaker-net/datafaker/pull/398</li> <li>Harden templates for getProvider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/400</li> <li>Reorganised provider documentation by @bodiam in https://github.com/datafaker-net/datafaker/pull/402</li> <li>Add 'Locality' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/401</li> <li>Fix ProvidersDocsGenerator by @panilya in https://github.com/datafaker-net/datafaker/pull/405</li> <li>Fix typo in class name by @panilya in https://github.com/datafaker-net/datafaker/pull/407</li> <li>Add science unit provider by @panilya in https://github.com/datafaker-net/datafaker/pull/408</li> <li>Add http method provider by @panilya in https://github.com/datafaker-net/datafaker/pull/406</li> <li>Implemented LoremPicsum by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/410</li> <li>Add port provider by @panilya in https://github.com/datafaker-net/datafaker/pull/409</li> <li>Improved Credit card utility by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/414</li> <li>Added Cricket Provider by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/417</li> <li>Made all test methods non-public to be more consistent. by @bodiam in https://github.com/datafaker-net/datafaker/pull/418</li> <li>Added MoneyHeist Provider by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/419</li> <li>Remove redundant 'blood.yml' file by @panilya in https://github.com/datafaker-net/datafaker/pull/420</li> <li>Add 'Family Guy' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/421</li> <li>Add 'Fullmetal Alchemist: Brotherhood' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/422</li> <li>Add missing <code>@since</code> tags, add description of <code>Locality</code> provider by @panilya in https://github.com/datafaker-net/datafaker/pull/423</li> <li>Add jdk19 to ci by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/426</li> <li>Move providers under their own package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/427</li> <li>feat/build_without_gpg by @TGITS in https://github.com/datafaker-net/datafaker/pull/431</li> <li>zh-CN.yml\u589e\u52a0\u6a21\u62df\u6570\u636e by @LiuHao0606 in https://github.com/datafaker-net/datafaker/pull/432</li> <li>Use getParameterCount rather than getParameterTypes where possible by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/436</li> <li>Reorder method calls in FakeValuesService#resolveExpression by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/437</li> <li>Extract retrieveMethodAccessor method, optimize javaNameToYamlName by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/438</li> <li>Updated the news section by @bodiam in https://github.com/datafaker-net/datafaker/pull/439</li> <li>Replace isAssignableFrom with == for final classes, refactor retrieveMethodAccessor by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/440</li> <li>Introduce transformation schemas by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/430</li> <li>Make DateAndTime#between taking both date and timestamp by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/441</li> <li>FakeStream implementation by @NarekDW in https://github.com/datafaker-net/datafaker/pull/435</li> <li>Correct main branch name by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/442</li> <li>add documentation for FakeSequence/FakeStream by @NarekDW in https://github.com/datafaker-net/datafaker/pull/443</li> <li>Add support of sql dialect while sql generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/445</li> <li>fix/pokemon_fr_localization by @TGITS in https://github.com/datafaker-net/datafaker/pull/446</li> <li>feat(adding_moves_to_pokemon_provider) by @TGITS in https://github.com/datafaker-net/datafaker/pull/448</li> <li>Correct typo by @carehart in https://github.com/datafaker-net/datafaker/pull/449</li> <li>Credit card fix for Visa, Mastercard, Discover and Diners Club. Fixes\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/451</li> <li>Fixed edit url in documentation. Fixes #450 by @bodiam in https://github.com/datafaker-net/datafaker/pull/452</li> <li>Add support of groups to 'ProvidersDocsGenerator' by @panilya in https://github.com/datafaker-net/datafaker/pull/433</li> <li>Colorize Maven output in GitHub Actions by @timtebeek in https://github.com/datafaker-net/datafaker/pull/453</li> <li>Run AssertJ best practices OpenRewrite recipe by @timtebeek in https://github.com/datafaker-net/datafaker/pull/456</li> <li>Changed casing of Australian animals to lowercase where needed. by @bodiam in https://github.com/datafaker-net/datafaker/pull/457</li> <li>Added support for nonzero number generation using \u00d8 in numerify. by @bodiam in https://github.com/datafaker-net/datafaker/pull/458</li> <li>Small refactoring to make number generation more clear. by @bodiam in https://github.com/datafaker-net/datafaker/pull/460</li> <li>Rework Generics of Transformer interface by @NarekDW in https://github.com/datafaker-net/datafaker/pull/447</li> <li>Fix sql quote identifier for mysql by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/461</li> <li>feat/adding_type_to_pokemon_provider by @TGITS in https://github.com/datafaker-net/datafaker/pull/464</li> <li>Fix formatting by @bodiam in https://github.com/datafaker-net/datafaker/pull/465</li> <li>Add issue navigator link for idea by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/466</li> <li>Introduce international and national phone number formats by @panilya in https://github.com/datafaker-net/datafaker/pull/425</li> <li>Add more constellations by @panilya in https://github.com/datafaker-net/datafaker/pull/467</li> <li>Add MariaDB sql dialect by @panilya in https://github.com/datafaker-net/datafaker/pull/470</li> <li>Use name to get length to prevent IndexOutOfBoundException by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/471</li> <li>Add support for table schema in sql transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/472</li> <li>Update JShell csv example in readme by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/473</li> <li>Add csv as header by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/474</li> <li>Add batch support and keyword case support for sql by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/475</li> <li>Move batch flag on dialect level by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/476</li> <li>Add support for batch insert for Oracle by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/477</li> <li>Use array and switch for numerify by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/478</li> <li>Add icon for Intellijidea toolbox by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/468</li> <li>Make FakeSequence Iterable by @NarekDW in https://github.com/datafaker-net/datafaker/pull/479</li> <li>Added Baeldung link by @bodiam in https://github.com/datafaker-net/datafaker/pull/482</li> <li>Fixed for flaky phone numbers. by @bodiam in https://github.com/datafaker-net/datafaker/pull/484</li> <li>[bug-fix] generate separated SQL statements by @NarekDW in https://github.com/datafaker-net/datafaker/pull/483</li> <li>Small cleanup in tests by @bodiam in https://github.com/datafaker-net/datafaker/pull/485</li> <li>fix(small_misprint_in_the_doc) by @TGITS in https://github.com/datafaker-net/datafaker/pull/487</li> <li>Add support for force usage of sql quote identifiers by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/488</li> <li>Add support for array and multiset by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/489</li> <li>Add possibility to specify size of batch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/490</li> <li>SQL arrays and multisets could be nested by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/492</li> <li>Multiset could contain duplicates by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/493</li> <li>Move sql transformer in it's own package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/494</li> <li>Use sql quote identifier if schema or table or field name contain catalog separator by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/495</li> <li>Add tests for sql row by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/497</li> <li>Remove redundant bank.yml file by @panilya in https://github.com/datafaker-net/datafaker/pull/496</li> <li>Add compass provider by @panilya in https://github.com/datafaker-net/datafaker/pull/486</li> <li>Update javaparser dependency by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/502</li> <li>Use line separator by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/503</li> <li>Add StudioGhibli provider by @panilya in https://github.com/datafaker-net/datafaker/pull/501</li> <li>Generate from FakeSequence instead of List + bug fix in sql generator by @NarekDW in https://github.com/datafaker-net/datafaker/pull/499</li> <li>Add Control provider by @panilya in https://github.com/datafaker-net/datafaker/pull/504</li> <li>Add Doraemon provider by @panilya in https://github.com/datafaker-net/datafaker/pull/505</li> <li>CNPJ test was flaky, fixed now. by @bodiam in https://github.com/datafaker-net/datafaker/pull/507</li> <li>Speed up hex by using getRandomByteArray by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/510</li> <li>Speed up digit generation by using random byte array by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/508</li> <li>Added text generator, made Password generator deprecated. by @bodiam in https://github.com/datafaker-net/datafaker/pull/509</li> <li>Speed up bothify by making it via one run by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/511</li> <li>Add Doctor Who provider by @panilya in https://github.com/datafaker-net/datafaker/pull/514</li> <li>Add tests for uncovered method in Time provider by @panilya in https://github.com/datafaker-net/datafaker/pull/515</li> <li>Cosmere by @bodiam in https://github.com/datafaker-net/datafaker/pull/516</li> <li>Added Drone support by @bodiam in https://github.com/datafaker-net/datafaker/pull/518</li> <li>Added Culture Series support by @bodiam in https://github.com/datafaker-net/datafaker/pull/519</li> <li>Add test for period method by @panilya in https://github.com/datafaker-net/datafaker/pull/517</li> <li>Added Fresh Prince of Bel Air support by @bodiam in https://github.com/datafaker-net/datafaker/pull/520</li> <li>Add test for characters method with fixed length, uppercase and digit\u2026 by @panilya in https://github.com/datafaker-net/datafaker/pull/521</li> <li>Adds Microsoft Azure provider by @agoncal in https://github.com/datafaker-net/datafaker/pull/524</li> <li>Small fix for Azure Javadoc. by @bodiam in https://github.com/datafaker-net/datafaker/pull/525</li> <li>10x times speed up Code#isbnGroup and Code#isbnGs1 by usage of Options by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/526</li> <li>Support transformation schema for YAML by @RVRhub in https://github.com/datafaker-net/datafaker/pull/512</li> <li>Add hex upper/lower case by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/527</li> <li>20x times speed up Aws and Azure by using hex by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/528</li> <li>Add One Piece provider by @panilya in https://github.com/datafaker-net/datafaker/pull/529</li> <li>Use getRandomBytes and specific hashcode to speed up text generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/530</li> <li>Use cast to char instead of Math.abs, use value of first symbols for hashcode by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/531</li> <li>3x times speed up Aws#route53ZoneId by moving textConfig in Aws to class field by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/532</li> <li>Add documentation for schemas by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/533</li> <li>Speed up text generation, remove faker from text config builder by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/534</li> <li>Format table by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/536</li> <li>Add more tests by @panilya in https://github.com/datafaker-net/datafaker/pull/523</li> <li>Use fork instead of port by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/538</li> <li>Small typo fix by @bodiam in https://github.com/datafaker-net/datafaker/pull/539</li> <li>Speed up text generation by removal map by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/540</li> <li>Add caching of remove underscore result by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/545</li> <li>Use already found dot index by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/546</li> <li>Updated documentation for sequences. by @bodiam in https://github.com/datafaker-net/datafaker/pull/550</li> <li>Add Baseball provider by @Blackcows in https://github.com/datafaker-net/datafaker/pull/548</li> <li>Support transformation schema for XML by @RVRhub in https://github.com/datafaker-net/datafaker/pull/549</li> <li>Disabled checkout by @bodiam in https://github.com/datafaker-net/datafaker/pull/553</li> <li>Release test by @bodiam in https://github.com/datafaker-net/datafaker/pull/554</li> <li>Release test by @bodiam in https://github.com/datafaker-net/datafaker/pull/555</li> <li>Add Emoji provider by @ghusta in https://github.com/datafaker-net/datafaker/pull/556</li> <li>Update Emoji provider with cats by @ghusta in https://github.com/datafaker-net/datafaker/pull/558</li> <li>Restaurant names were generated incorrectly. Drone attributes were ge\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/559</li> </ul>"},{"location":"releases/1.7.0/#new-contributors","title":"New Contributors","text":"<ul> <li>@jaapcoomans made their first contribution in https://github.com/datafaker-net/datafaker/pull/352</li> <li>@CucumisSativus made their first contribution in https://github.com/datafaker-net/datafaker/pull/360</li> <li>@ChiragMangukia made their first contribution in https://github.com/datafaker-net/datafaker/pull/393</li> <li>@TGITS made their first contribution in https://github.com/datafaker-net/datafaker/pull/431</li> <li>@LiuHao0606 made their first contribution in https://github.com/datafaker-net/datafaker/pull/432</li> <li>@NarekDW made their first contribution in https://github.com/datafaker-net/datafaker/pull/435</li> <li>@carehart made their first contribution in https://github.com/datafaker-net/datafaker/pull/449</li> <li>@timtebeek made their first contribution in https://github.com/datafaker-net/datafaker/pull/453</li> <li>@agoncal made their first contribution in https://github.com/datafaker-net/datafaker/pull/524</li> <li>@RVRhub made their first contribution in https://github.com/datafaker-net/datafaker/pull/512</li> <li>@Blackcows made their first contribution in https://github.com/datafaker-net/datafaker/pull/548</li> <li>@ghusta made their first contribution in https://github.com/datafaker-net/datafaker/pull/556</li> </ul>"},{"location":"releases/1.7.0/#providers-added","title":"Providers added","text":"<ul> <li>Azure</li> <li>Compass</li> <li>Cosmere</li> <li>Culture Series</li> <li>Drone</li> <li>Dungeons And Dragons</li> <li>Emoji</li> <li>Fresh Prince Of BelAir</li> <li>Locality</li> <li>Text</li> <li>Detective Conan</li> <li>Doraemon</li> <li>Family Guy</li> <li>Fullmetal Alchemist</li> <li>Money Heist</li> <li>One Piece</li> <li>Baseball</li> <li>Cricket</li> <li>Control</li> <li>Heroes Of The Storm</li> <li>Studio Ghibli</li> </ul> <p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/1.8.0/","title":"Datafaker 1.8.0 (11 Feb 2023)","text":"<p>The first release of 2023 of Datafaker has been created. After one year of Datafaker, this marks the release of the last version compatible with Java 1.8. After this, Datafaker 2.x will have Java 17 as a minimum baseline. </p> <p>Why 17, and not migrate from 8 to 11? Well, we think that Java 11 hardly has any benefits for Datafaker, while Java 17 might have some more interesting features, such as records, compact number formatting, and who knows, maybe some other features. Just to be clear: our 1.x branch will no longer be supported  or maintained.</p>"},{"location":"releases/1.8.0/#new-contributors","title":"New Contributors","text":"<p>A special shout out to @kingthorin, who has contributed numerous improvements in Datafaker, and  who is now a co-maintainer of Datafaker. Rick, welcome to the team, and absolutely appreciate  your amazing work!</p> <ul> <li>@isvora made their first contribution in https://github.com/datafaker-net/datafaker/pull/557</li> <li>@danilopiazza made their first contribution in https://github.com/datafaker-net/datafaker/pull/565</li> <li>@NULL0xFF made their first contribution in https://github.com/datafaker-net/datafaker/pull/569</li> <li>@benelog made their first contribution in https://github.com/datafaker-net/datafaker/pull/585</li> <li>@alx-mag made their first contribution in https://github.com/datafaker-net/datafaker/pull/598</li> <li>@robosoul made their first contribution in https://github.com/datafaker-net/datafaker/pull/638</li> <li>@HattoriHenzo made their first contribution in https://github.com/datafaker-net/datafaker/pull/654</li> <li>@mesketh made their first contribution in https://github.com/datafaker-net/datafaker/pull/653</li> <li>@kingthorin made their first contribution in https://github.com/datafaker-net/datafaker/pull/657</li> <li>@AlexJFerreira made their first contribution in https://github.com/datafaker-net/datafaker/pull/661</li> </ul>"},{"location":"releases/1.8.0/#whats-changed","title":"What's Changed","text":"<ul> <li>Documentation update by @bodiam in https://github.com/datafaker-net/datafaker/pull/560</li> <li>Update spotless-maven-plugin to 2.28.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/563</li> <li>Do not call Random for singletone lists by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/564</li> <li>Add Marvel Snap Provider by @isvora in https://github.com/datafaker-net/datafaker/pull/557</li> <li>Documentation update: rename IProviders to BaseProviders by @danilopiazza in https://github.com/datafaker-net/datafaker/pull/565</li> <li>Add Korean resident registration number by @NULL0xFF in https://github.com/datafaker-net/datafaker/pull/569</li> <li>Use builder for csv and sql transformers by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/573</li> <li>Update dependencies by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/576</li> <li>Make call to FakeValues#loadValues once by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/575</li> <li>Speed up javaNameToYamlName by usage of array by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/578</li> <li>Speed up FakeValues#toJavaNames by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/579</li> <li>Add Silicon Valley faker by @panilya in https://github.com/datafaker-net/datafaker/pull/580</li> <li>Create map only if it is required by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/581</li> <li>Remove deprecated Password provider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/582</li> <li>Remove useless class var by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/583</li> <li>Fix wrong names in ko.yml by @benelog in https://github.com/datafaker-net/datafaker/pull/585</li> <li>Fix generation of invalid links in ProvidersDocsGenerator by @panilya in https://github.com/datafaker-net/datafaker/pull/588</li> <li>Reduce number of internal failures because of empty filename by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/590</li> <li>Precollect buzzwords by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/591</li> <li>Refactor: extract some vars by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/592</li> <li>Return supported locales by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/589</li> <li>Log error instead of throwing and catching by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/594</li> <li>Preload classes and methods while parsing yaml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/597</li> <li>Add .yml files for 'be' and 'en-PK' locales by @alx-mag in https://github.com/datafaker-net/datafaker/pull/598</li> <li>Add Naruto provider by @panilya in https://github.com/datafaker-net/datafaker/pull/601</li> <li>Add Futurama provider by @panilya in https://github.com/datafaker-net/datafaker/pull/602</li> <li>Update spotless maven plugin by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/604</li> <li>Update junit to 5.9.2 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/605</li> <li>Set version 1.4.0 for perf doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/606</li> <li>Alphabetical order of provider names in the README by @panilya in https://github.com/datafaker-net/datafaker/pull/603</li> <li>Show by @bodiam in https://github.com/datafaker-net/datafaker/pull/608</li> <li>More tv shows by @bodiam in https://github.com/datafaker-net/datafaker/pull/609</li> <li>Count generators by @bodiam in https://github.com/datafaker-net/datafaker/pull/610</li> <li>More shows by @bodiam in https://github.com/datafaker-net/datafaker/pull/611</li> <li>Bump year in docs copyright by @valfirst in https://github.com/datafaker-net/datafaker/pull/612</li> <li>Add perf tests for 1.7.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/613</li> <li>Add java object transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/513</li> <li>More video games by @bodiam in https://github.com/datafaker-net/datafaker/pull/614</li> <li>Clarify providers section in the README by @panilya in https://github.com/datafaker-net/datafaker/pull/616</li> <li>Ruby faker fixes by @bodiam in https://github.com/datafaker-net/datafaker/pull/615</li> <li>More shows 2 by @bodiam in https://github.com/datafaker-net/datafaker/pull/617</li> <li>Cache calculated locale chains by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/618</li> <li>Reformat table in perf doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/619</li> <li>Misprint in tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/620</li> <li>Add missing break in switch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/621</li> <li>Fix concurrent modification exception by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/622</li> <li>Move toLower to cache by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/625</li> <li>Use Locale#forLanguageTag by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/626</li> <li>Update maven to 3.8.7 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/627</li> <li>Update spotless to 2.30.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/628</li> <li>Add Kotlin examples for formats in schemas.md (docs) by @panilya in https://github.com/datafaker-net/datafaker/pull/633</li> <li>Fix broken link in the docs by @panilya in https://github.com/datafaker-net/datafaker/pull/630</li> <li>Introduce singletone Locale to use identity hash maps by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/631</li> <li>Issue #635 - Expand SV local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/638</li> <li>Issue #637 - Expand DK local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/640</li> <li>Issue #636 - Expand NO local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/639</li> <li>Docu fix by @bodiam in https://github.com/datafaker-net/datafaker/pull/634</li> <li>Enhance NL local company name and suffix by @robosoul in https://github.com/datafaker-net/datafaker/pull/641</li> <li>Issue #642 - Language code for Denmark is 'da' by @robosoul in https://github.com/datafaker-net/datafaker/pull/643</li> <li>Issue #644 - reusable merge of male/female names in the first_name collection by @robosoul in https://github.com/datafaker-net/datafaker/pull/645</li> <li>Use https for schemaLocation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/650</li> <li>Provider groups description and new providers per version table in DOCS by @panilya in https://github.com/datafaker-net/datafaker/pull/649</li> <li>Computer brands feature request by @HattoriHenzo in https://github.com/datafaker-net/datafaker/pull/654</li> <li>:technologist: JsonTransformer enhancement to support import scenarios by @mesketh in https://github.com/datafaker-net/datafaker/pull/653</li> <li>Make properties ordered by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/655</li> <li>Add configuration for comma in json, refactor jsontransformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/656</li> <li>Garment Size Test Tweak by @kingthorin in https://github.com/datafaker-net/datafaker/pull/657</li> <li>Add Zodiac Signs provider by @kingthorin in https://github.com/datafaker-net/datafaker/pull/658</li> <li>Rename 'Show' group to 'Entertainment' and add new provider by @panilya in https://github.com/datafaker-net/datafaker/pull/647</li> <li>Enforce EOL=LF by @kingthorin in https://github.com/datafaker-net/datafaker/pull/659</li> <li>Correct custom provider example by @AlexJFerreira in https://github.com/datafaker-net/datafaker/pull/661</li> <li>Improve unit testing by @kingthorin in https://github.com/datafaker-net/datafaker/pull/660</li> <li>Remove usage Format Json from BaseFaker by @RVRhub in https://github.com/datafaker-net/datafaker/pull/663</li> <li>Include XML files in .gitattributes as text by @kingthorin in https://github.com/datafaker-net/datafaker/pull/664</li> <li>Add computer brands by @kingthorin in https://github.com/datafaker-net/datafaker/pull/665</li> <li>Add Brand faker by @HattoriHenzo in https://github.com/datafaker-net/datafaker/pull/668</li> <li>Add static builder method for json transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/669</li> <li>Use CsvTransformer#builder in doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/671</li> <li>Use Csv transformer instead of format csv in FakeValuesService by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/672</li> <li>Adjust copyright to 2023 by @kingthorin in https://github.com/datafaker-net/datafaker/pull/674</li> <li>Add Chess faker by @panilya in https://github.com/datafaker-net/datafaker/pull/676</li> <li>Apply comparison against yaml file content for tests within entertainment package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/677</li> <li>Fix Dermatology typo by @kingthorin in https://github.com/datafaker-net/datafaker/pull/680</li> <li>Make arg for generate Transformer Iterable rather than FakeSequence by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/683</li> <li>Remove deprecated csv by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/684</li> <li>Remove deprecated Yaml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/685</li> <li>Entertainment Fixes by @kingthorin in https://github.com/datafaker-net/datafaker/pull/686</li> </ul>"},{"location":"releases/1.8.0/#providers-added","title":"Providers added","text":"<p>A total of 34 new providers were added, brining the total now to 230 different data providers!</p> <p>See https://www.datafaker.net/documentation/providers/ for the full overview of providers.</p>"},{"location":"releases/1.9.0/","title":"Datafaker 1.9.0 (18 April 2023)","text":"<p>A small maintenance release for Java 1.8 with some fixes and updated dependendencies. </p>"},{"location":"releases/1.9.0/#whats-changed","title":"What's Changed","text":"<ul> <li>Update dependencies for 1.x by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/771</li> <li>Add annotation support for data classes based on JavaObjectTransformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/773</li> <li>Backport of determenistic methods issue and add url issue to 1.x by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/776</li> </ul>"},{"location":"releases/2.0.0/","title":"Datafaker 2.0.0 (11 June 2023)","text":"<p>Today, we're pleased to announce a new milestone for the Datafaker project:</p> <p>Datafaker 2.0 has been released!</p> <p>The biggest change in Datafaker 2.0 is that the minimum Java version is now version 17.  After Spring Boot moved to Java 17, we thought that moving to Java 11 wouldn't have much benefit,  so we decided to jump a version and support Java 17+ instead.  This allows us to support newer Java features such as Java Records.  Please checkout the documentation for more info.  </p> <p>Besides that, there are numerous small improvements, which you can find in the release notes below.</p> <p>As always, and while we changed the major version, we aim to keep upgrades smooth,  and besides the change in Java version, no (or not many...) breaking changes should have been introduced.</p> <p>Thanks to all our users for the great support; it's been a great journey so far,  and here's to many more Datafaker releases!</p>"},{"location":"releases/2.0.0/#breaking-change","title":"Breaking Change","text":"<p><code>internet().url()</code> will now return a web URL. The previous implementation returned just a domain name.</p> <p>Here's a sample of the new generation: <pre><code>https://www.garry-damore.co/iure/recusandaesint\nhttps://www.bertha-jacobson.biz/?animi=sed&amp;aspernatur=voluptatem\nhttps://www.arlene-mclaughlin.info:40819/iusto/id?repudiandae=dignissimos&amp;voluptatem=atque#ab\nhttps://www.fred-ledner.name/beatae/voluptatemreiciendis?ab=deleniti&amp;repudiandae=atque#voluptate\nhttps://www.melissa-tromp.info:43154/\nhttps://www.un-langosh.co:52266/in?numquam=ipsa&amp;ut=blanditiis#voluptatem\nhttps://www.robbin-hamill.biz:24492/deleniti/utveniam\nhttps://www.una-luettgen.info/?ab=ea&amp;quis=soluta#voluptas\nhttps://www.wilber-harber.net/dolor/praesentiumquas#numquam\nhttps://www.santana-stiedemann.com/tempore?ad=repellat&amp;atque=odit#ex\nhttps://www.logan-yundt.org/fuga?quaerat=voluptas&amp;est=ipsa\n</code></pre></p> <p>For further details see: https://github.com/datafaker-net/datafaker/issues/840.</p>"},{"location":"releases/2.0.0/#new-contributors","title":"New Contributors","text":"<p>A big shout to our new contributors, without who Datafaker wouldn't be the project which it is today.</p> <ul> <li>@jamievasales made their first contribution in https://github.com/datafaker-net/datafaker/pull/717</li> <li>@ColinShorts made their first contribution in https://github.com/datafaker-net/datafaker/pull/723</li> <li>@tcttk made their first contribution in https://github.com/datafaker-net/datafaker/pull/727</li> <li>@almasfiza made their first contribution in https://github.com/datafaker-net/datafaker/pull/744</li> <li>@Majid-J made their first contribution in https://github.com/datafaker-net/datafaker/pull/755</li> <li>@novozhilov35 made their first contribution in https://github.com/datafaker-net/datafaker/pull/756</li> <li>@L-Evg made their first contribution in https://github.com/datafaker-net/datafaker/pull/758</li> <li>@bowen5 made their first contribution in https://github.com/datafaker-net/datafaker/pull/834</li> </ul> <p>Thank you all for helping out, your contributions are appreciated!</p>"},{"location":"releases/2.0.0/#whats-changed","title":"What's Changed","text":"<ul> <li>Documentation 1.8/2.0 update. by @bodiam in https://github.com/datafaker-net/datafaker/pull/688</li> <li>Java 17 by @bodiam in https://github.com/datafaker-net/datafaker/pull/689</li> <li>More unit test improvements by @kingthorin in https://github.com/datafaker-net/datafaker/pull/682</li> <li>Formatting fix for release notes. by @bodiam in https://github.com/datafaker-net/datafaker/pull/691</li> <li>Migrated Java 8 code to Java 17 syntax improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/696</li> <li>Support list of objects for JSON by @RVRhub in https://github.com/datafaker-net/datafaker/pull/693</li> <li>Rewrite nested json tests for stream and remove deprecated json by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/699</li> <li>Few more Java 17 syntax improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/697</li> <li>Removal of deprecated code. by @bodiam in https://github.com/datafaker-net/datafaker/pull/706</li> <li>Fix non-capturing groups by @kingthorin in https://github.com/datafaker-net/datafaker/pull/707</li> <li>Reformat and Enrich device.yml by @yuokada in https://github.com/datafaker-net/datafaker/pull/715</li> <li>Add first time contributor guide by @jamievasales in https://github.com/datafaker-net/datafaker/pull/717</li> <li>Added Qodana support (experiment) by @bodiam in https://github.com/datafaker-net/datafaker/pull/703</li> <li>Do not cache methods of expressions with args by @valfirst in https://github.com/datafaker-net/datafaker/pull/719</li> <li>Add allergens in Food provider by @panilya in https://github.com/datafaker-net/datafaker/pull/724</li> <li>Fix Kotlin examples in Transformers documentation by @panilya in https://github.com/datafaker-net/datafaker/pull/725</li> <li>Improve aviation provider by @panilya in https://github.com/datafaker-net/datafaker/pull/726</li> <li>Update Australia resource typo and add places and animals by @jamievasales in https://github.com/datafaker-net/datafaker/pull/728</li> <li>Update README for latest release by @kingthorin in https://github.com/datafaker-net/datafaker/pull/732</li> <li>Enable jdk20 in ci by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/736</li> <li>Added 'addUrl' method by @tcttk in https://github.com/datafaker-net/datafaker/pull/727</li> <li>OscarMovie should store rules to access data but not the actual field names by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/742</li> <li>Add test of deterministic and non deterministic provider's methods by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/743</li> <li>Increase numberOfTestsPerMethod to 100 for testDeterministicAndNonDeterministicProvidersReturnValues by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/745</li> <li>Refactor1 : Worked on the failed build for previous PR #739 by @almasfiza in https://github.com/datafaker-net/datafaker/pull/744</li> <li>Extract common part from FakerContext#localeChain by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/748</li> <li>Update spotless and refactor WordUtils by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/749</li> <li>Return input value instead of intantiating a new one by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/750</li> <li>Remove from doc removed formats, update example in readme by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/753</li> <li>Feature/hacker localization nb no by @Majid-J in https://github.com/datafaker-net/datafaker/pull/755</li> <li>Update expressions.md by @novozhilov35 in https://github.com/datafaker-net/datafaker/pull/756</li> <li>Aviation provider: Added general and cargo airplanes. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/758</li> <li>fix csv expression example in expressions.md by @novozhilov35 in https://github.com/datafaker-net/datafaker/pull/757</li> <li>Aviation provider: Added more aircraft. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/761</li> <li>Fix aviation empty entry and formatting. by @bodiam in https://github.com/datafaker-net/datafaker/pull/762</li> <li>Add annotation support for data classes based on JavaObjectTransformer by @RVRhub in https://github.com/datafaker-net/datafaker/pull/754</li> <li>Red Dead Redemption 2 Provider by @Majid-J in https://github.com/datafaker-net/datafaker/pull/766</li> <li>BaseFakerTest - Assert that provider lists should not have blank entries by @kingthorin in https://github.com/datafaker-net/datafaker/pull/769</li> <li>Introduce FakeValuesContext and FAKE_VALUES_MAP by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/767</li> <li>Remove unused package private method and tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/772</li> <li>Aviation provider: added more airlines. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/765</li> <li>Add Norwegian localization for olympic sports by @Majid-J in https://github.com/datafaker-net/datafaker/pull/775</li> <li>Aviation provider: Airport names and more ICAO airport codes. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/774</li> <li>Add Final Fantasy XIV faker by @panilya in https://github.com/datafaker-net/datafaker/pull/783</li> <li>Moved CreditCardType to an internal class. Cleaned up a few Qodana wa\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/786</li> <li>Add degree in University faker by @panilya in https://github.com/datafaker-net/datafaker/pull/785</li> <li>Use spotless to enforce format of en yaml files by @kingthorin in https://github.com/datafaker-net/datafaker/pull/781</li> <li>Vehicle provider: Added more Italian cars. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/789</li> <li>Different types of transport fake data by @sergejsvisockis in https://github.com/datafaker-net/datafaker/pull/791</li> <li>Introduce cache of suppliers and remove usage of Objects.hash to speed up by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/792</li> <li>Add call for super constructors by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/795</li> <li>Replace deprecated class#newInstance by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/796</li> <li>Keep abc order in BaseProviders by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/798</li> <li>Remove unused class and methods by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/801</li> <li>Add shading for generex and automaton by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/797</li> <li>Configured Maven to create a MANIFEST file. Renamed Data Faker to Datafaker by @bodiam in https://github.com/datafaker-net/datafaker/pull/802</li> <li>Update dependabot.yml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/804</li> <li>Various Dutch address and name improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/805</li> <li>Improved Australian addresses and general secondary addresses. by @bodiam in https://github.com/datafaker-net/datafaker/pull/808</li> <li>Add support populate Java Object with custom schema without FakeForSc\u2026 by @RVRhub in https://github.com/datafaker-net/datafaker/pull/787</li> <li>Introduce cache of default schemas to FakeResolver by @RVRhub in https://github.com/datafaker-net/datafaker/pull/809</li> <li>Cache suppliers for java transformers, improve hashing by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/810</li> <li>Use consumer"},{"location":"releases/2.0.0/#providers-added","title":"2.0.0","text":""},{"location":"releases/2.0.1/","title":"Datafaker 2.0.1 (18 June 2023)","text":""},{"location":"releases/2.0.1/#whats-changed","title":"What's Changed","text":"<p>This is a bugfix release. It was no longer possible to specify the type of credit card and the type of compass due to  a missing <code>public</code> keyword. Also, there was a small typo in the list of IATA airlines. Both items have been fixed now.</p> <p>Thank you SaraMahdy for reporting this issue here https://github.com/datafaker-net/datafaker/issues/860</p>"},{"location":"releases/2.0.1/#providers-added","title":"Providers added","text":"<p>No new providers were added.</p> <p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.0.2/","title":"Datafaker 2.0.2 (3 October 2023)","text":""},{"location":"releases/2.0.2/#whats-changed","title":"What's Changed","text":"<p>Various bugfixes and performance enhancements.</p>"},{"location":"releases/2.0.2/#providers-added","title":"Providers added","text":"<p>No new providers were added.</p> <p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.1.0/","title":"Datafaker 2.1.0 (22 February 2024)","text":""},{"location":"releases/2.1.0/#whats-changed","title":"What's Changed","text":"<p>Various bugfixes and performance enhancements.</p>"},{"location":"releases/2.1.0/#providers-added","title":"Providers added","text":"<ul> <li>Joke</li> </ul> <p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.2.0/","title":"Datafaker 2.2.0 (23 April 2024)","text":"<p>After reaching our 1000 star milestone, we figured it was time for another release, we lots of small and bigger improvements. With a new Pronoun faker, language updates, and lots of smaller fixes under the hood, we hope this release will fall in good hands and we'd love to hear what you use Datafaker for!</p>"},{"location":"releases/2.2.0/#whats-changed","title":"What's Changed","text":"<ul> <li>Use initial capacity for map if possible by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1057</li> <li>Use bitwise operations by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1062</li> <li>provide planet specific data by @sergejsvisockis in https://github.com/datafaker-net/datafaker/pull/1052</li> <li>Remove duplicates from yaml values by @TamasSzigeti in https://github.com/datafaker-net/datafaker/pull/1066</li> <li>Add medical professions in Medical faker by @panilya in https://github.com/datafaker-net/datafaker/pull/1073</li> <li>AWS vpc/subnet/securitygroup IDs now 17char by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1079</li> <li>Added Georgian language configuration by @mikheil-aisitec in https://github.com/datafaker-net/datafaker/pull/1088</li> <li>Fix #1085 - Docs by @eliasnogueira in https://github.com/datafaker-net/datafaker/pull/1086</li> <li>Use RgxGen to cope with StackOverFlow by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1092</li> <li>Use LocalDateTime in birthday tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1100</li> <li>Parent file could be null if resource is in jar by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1101</li> <li>Shading for rgxgen doesn't work by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1107</li> <li>Cannot use datafaker in a project that use module (module-info.java) by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1108</li> <li>Add ISO 4217 numeric currency code faker in Currency faker group by @panilya in https://github.com/datafaker-net/datafaker/pull/1111</li> <li>Use java.util.Currency in currency related fakers by @panilya in https://github.com/datafaker-net/datafaker/pull/1118</li> <li>Update doc to fit the latest source code version by @benallard in https://github.com/datafaker-net/datafaker/pull/1124</li> <li>Added pronouns provider by @eliasnogueira in https://github.com/datafaker-net/datafaker/pull/1106</li> <li>Added Ticker datasets for NSE and LSE exchanges by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/1128</li> <li>Deprecate fin tickers from Finace provider by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/1129</li> <li>Update for tr.yml by @CengizhanAral in https://github.com/datafaker-net/datafaker/pull/1141</li> <li>Upgrade to Java 22 build matrix. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1143</li> <li>Changes in the Json Transform by @eliasnogueira in https://github.com/datafaker-net/datafaker/pull/1134</li> <li>Added new link to article about Datafaker in the Articles and news do\u2026 by @panilya in https://github.com/datafaker-net/datafaker/pull/1151</li> <li>Fix address for en-NZ locale by @k1w1dev in https://github.com/datafaker-net/datafaker/pull/1154</li> <li>Add Greek translations for job provider by @gvrettos in https://github.com/datafaker-net/datafaker/pull/1156</li> <li>Adding a regexify test case for metacharacters inside a character set by @eduhoribe in https://github.com/datafaker-net/datafaker/pull/1159</li> <li>Disabling wildcard imports on Intellij IDE by @eduhoribe in https://github.com/datafaker-net/datafaker/pull/1160</li> <li>Proper Apache 2.0 LICENSE by @bodiam in https://github.com/datafaker-net/datafaker/pull/1166</li> </ul>"},{"location":"releases/2.2.0/#new-contributors","title":"New Contributors","text":"<p>Big shout out to our existing and new contributors, we thank you for your efforts!</p> <ul> <li>@TamasSzigeti made their first contribution in https://github.com/datafaker-net/datafaker/pull/1066</li> <li>@mikheil-aisitec made their first contribution in https://github.com/datafaker-net/datafaker/pull/1088</li> <li>@eliasnogueira made their first contribution in https://github.com/datafaker-net/datafaker/pull/1086</li> <li>@benallard made their first contribution in https://github.com/datafaker-net/datafaker/pull/1124</li> <li>@k1w1dev made their first contribution in https://github.com/datafaker-net/datafaker/pull/1154</li> <li>@gvrettos made their first contribution in https://github.com/datafaker-net/datafaker/pull/1156</li> <li>@eduhoribe made their first contribution in https://github.com/datafaker-net/datafaker/pull/1159</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/v2.1.0...v2.2.0</p>"},{"location":"releases/2.2.0/#providers-added","title":"Providers added","text":"<ul> <li>Planet</li> <li>Pronouns</li> </ul> <p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.2.1/","title":"Datafaker 2.2.1 (24 April 2024)","text":""},{"location":"releases/2.2.1/#whats-changed","title":"What's Changed","text":"<p>Bugfix release to address an issue related to the shadowing of our regular expresion library.</p> <p>See https://github.com/datafaker-net/datafaker/issues/1168 for info.</p> <p>Big shout out to @bpicode for reporting this issue! </p>"},{"location":"releases/2.2.2/","title":"Datafaker 2.2.2 (25 April 2024)","text":""},{"location":"releases/2.2.2/#whats-changed","title":"What's Changed","text":"<p>A fix was applied to address issue #1170: - Parent filename could be null for resources in jar #1172</p> <p>See https://github.com/datafaker-net/datafaker/issues/1170 for more info.</p> <p>Thanks to f-cramer for reporting this, and snuyanzin for the quick fix!</p>"},{"location":"releases/2.2.2/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.3.0/","title":"Datafaker 2.3.0 (1 July 2024)","text":"<p>A new version of Datafaker has been released, which further enhances Datafaker. We've added new features, such as an option to generate small images, added more locale data,  fixed some open issues,  and added much more data to Datafaker. Also, lots of internal improvements have been done to make maintaining Datafaker a bit easier.</p> <p>The most notable contributions are done this release by Andrei Solntsev, who not only did his first contribution  this release, but is now also a maintainer for Datafaker. Welcome to the team Andrei, your contribution is amazing!</p>"},{"location":"releases/2.3.0/#new-contributors","title":"New Contributors","text":"<ul> <li>@filipowm made their first contribution in https://github.com/datafaker-net/datafaker/pull/1179</li> <li>@marcelofilipov made their first contribution in https://github.com/datafaker-net/datafaker/pull/1186</li> <li>@asolntsev made their first contribution in https://github.com/datafaker-net/datafaker/pull/1196</li> <li>@jensGiehl made their first contribution in https://github.com/datafaker-net/datafaker/pull/1251</li> <li>@gatear made their first contribution in https://github.com/datafaker-net/datafaker/pull/1261</li> </ul>"},{"location":"releases/2.3.0/#new-features","title":"New features","text":"<ul> <li>Remove outdated jdk11 profile by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1174</li> <li>Add tests against downstream project (datafaker-gen) by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1171</li> <li>Initial support for streams in transformers by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1177</li> <li>feat: migrate part of existing medical provider under specific healthcare providers (#1137) by @filipowm in https://github.com/datafaker-net/datafaker/pull/1179</li> <li>Nationalities translated into pt-BR by @marcelofilipov in https://github.com/datafaker-net/datafaker/pull/1186</li> <li>POC for 1178 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1180</li> <li>Added locations. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1189</li> <li>Add further locations by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1192</li> <li>show actual values in error message by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1196</li> <li>add Estonian id number generator by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1197</li> <li>Modify the enrichment provider classes map in BaseFaker  by @RVRhub in https://github.com/datafaker-net/datafaker/pull/1198</li> <li>catch only specific exceptions by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1205</li> <li>merge files \"et.yml\" and \"ee.yml\" by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1206</li> <li>Rename <code>COWMap</code> to <code>CopyOnWriteMap</code> and add javadoc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1207</li> <li>add Albanian id number generator by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1208</li> <li>add Moldova id number generator by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1211</li> <li>Migrated DateAndTime to TimeAndDate to support Java8 Time, and depreca\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/1210</li> <li>Add Bulgarian id number by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1213</li> <li>Allow country level defaults by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1219</li> <li>add support for North Macedonia (names + ID numbers) by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1218</li> <li>Minor tweaks and cleanup by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1224</li> <li>Reduce visibility of TimeAndDate constants by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1226</li> <li>Added support for random image generation, such as PNG, JPG, GIF and \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/1227</li> <li>load country-specific ID number providers by country code by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1229</li> <li>extract phone numbers configuration to country-specific files by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1233</li> <li>update \"language vs country\" details in README by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1236</li> <li>Add AWS services in AWS data provider by @panilya in https://github.com/datafaker-net/datafaker/pull/1228</li> <li>Another attempt to get automated releases working. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1240</li> <li>Add Large Language Model provider by @panilya in https://github.com/datafaker-net/datafaker/pull/1237</li> <li>Migrate disease provider under healthcare providers (#1137) by @filipowm in https://github.com/datafaker-net/datafaker/pull/1188</li> <li>Mark Internet#pass deprecated by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1245</li> <li>Skip BigQuery tests while testing against datafaker_gen by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1247</li> <li>Drop deprecated Xml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1244</li> <li>Add doc about advanced char sequence generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1246</li> <li>Add boardgame provider by @jensGiehl in https://github.com/datafaker-net/datafaker/pull/1251</li> <li>Attempt to publish documentation automatically by @bodiam in https://github.com/datafaker-net/datafaker/pull/1252</li> <li>generate phone numbers using Google library \"libphonenumber\" by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1249</li> <li>Add dependency info to CONTRIBUTING by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1253</li> <li>Add Spark SQL dialect by @gatear in https://github.com/datafaker-net/datafaker/pull/1261</li> <li>Skip void or methods coming from Object or AbstractProvider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1267</li> <li>Implement generate stream for SQL transformer by @gatear in https://github.com/datafaker-net/datafaker/pull/1264</li> <li>Refactoring: improve code by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1277</li> <li>Document Spark SQL by @gatear in https://github.com/datafaker-net/datafaker/pull/1270</li> </ul>"},{"location":"releases/2.3.0/#fixes","title":"Fixes","text":"<ul> <li>fix: Aviation Test by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1241</li> <li>Fixed airport code. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1243</li> <li>fix: expressions resolution by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1275</li> <li>fix flaky test: remove leasing \"0\" from generated phone number by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1256</li> <li>Fix memory leak by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1271</li> <li>Fix flaky test <code>TimeAndDateTest.testPastDate</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1216</li> <li>Fix another flaky test <code>TimeAndDateTest.testFutureDate</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1217</li> <li>fix generation of phone numbers (domestic/international/mobile) by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1225</li> <li>Fix inception version of <code>Pronouns</code> data provider by @valfirst in https://github.com/datafaker-net/datafaker/pull/1182</li> <li>Fix flaky tests by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1204</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/v2.2.2...datafaker-2.3.0</p>"},{"location":"releases/2.3.0/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.3.1/","title":"Datafaker 2.3.1 (14 July 2024)","text":"<p>A few small bugs, mostly related to performance and JPMS, sneaked into our 2.3.0 release, and this release should address most of them.</p>"},{"location":"releases/2.3.1/#new-contributors","title":"New Contributors","text":"<ul> <li>@vitaly-ivanov made their first contribution in https://github.com/datafaker-net/datafaker/pull/1286</li> </ul>"},{"location":"releases/2.3.1/#whats-changed","title":"What's Changed","text":"<ul> <li>Unify <code>TimeAndDate</code> provider API by @valfirst in https://github.com/datafaker-net/datafaker/pull/1282</li> <li>Improve performance when generating with a specific locale by @vitaly-ivanov in https://github.com/datafaker-net/datafaker/pull/1286</li> <li>Use cache for fetchObject by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1288</li> <li>Undeprecated password generation methods. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1287</li> <li>Add multi-row/batch insert for Spark SQL by @gatear in https://github.com/datafaker-net/datafaker/pull/1284</li> <li>Added support for UUID v7. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1289</li> <li>Remove formats package since it was removed from src as well by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1292</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/datafaker-2.3.0...v2.3.1</p>"},{"location":"releases/2.3.1/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.4.0/","title":"Datafaker 2.4.0 (30 September 2024)","text":"<p>We've now reached the milestone of 250 different data providers! General words, financial terms and Dota2 are some of the new additions to our list.</p> <p>Did you know it's even possible to generate fake images (JPG, PNG, SVG and more) using Datafaker?</p>"},{"location":"releases/2.4.0/#new-contributors","title":"New Contributors","text":"<p>Thank you all for your contributions, we couldn't have done it without you. A special shout out to our new contributors:</p> <ul> <li>@panic08 made their first contribution in https://github.com/datafaker-net/datafaker/pull/1315</li> <li>@ly1012 made their first contribution in https://github.com/datafaker-net/datafaker/pull/1354</li> <li>@ksy-ke made their first contribution in https://github.com/datafaker-net/datafaker/pull/1357</li> </ul>"},{"location":"releases/2.4.0/#whats-changed","title":"What's Changed","text":"<ul> <li>2.3.1 Release documentation by @bodiam in https://github.com/datafaker-net/datafaker/pull/1299</li> <li>Cleaned up some unused configuration, and added some initial support \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/1300</li> <li>Fixed JPG MIME. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1302</li> <li>Added Codecov token by @bodiam in https://github.com/datafaker-net/datafaker/pull/1304</li> <li>Added more customization options for generating different types of im\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/1305</li> <li>Add article about BigQuery Sink in Datafaker Gen by @RVRhub in https://github.com/datafaker-net/datafaker/pull/1308</li> <li>Add Dota 2 VideoGameProvider by @panic08 in https://github.com/datafaker-net/datafaker/pull/1315</li> <li>Removed unused fields and method. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1318</li> <li>Added support for adjectives, adverbs, conjunctions, interjections, n\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/1317</li> <li>Provides financial terms. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1319</li> <li>Support stream generation with JavaObjectTransformer by @gatear in https://github.com/datafaker-net/datafaker/pull/1313</li> <li>generate ID Number together with birthday and gender by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1316</li> <li>Add support for Romanian ID numbers by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1323</li> <li>Refactoring: Relationship.any() by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1331</li> <li>convert class Interval to record by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1333</li> <li>simplify EnFile: don't collect a static list that is needed only once by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1332</li> <li>improve error handling and logging by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1311</li> <li>Refactor FakeValues by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1335</li> <li>extract duplicate methods \"toJavaNames\" to a single place by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1336</li> <li>fix IDEA warnings by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1337</li> <li>Add tier() and neutralItem() methods in Dota2 VideoGameProvider and update data by @panic08 in https://github.com/datafaker-net/datafaker/pull/1342</li> <li> </li> <li> </li> <li>Feature/greek philosophers el gr by @gvrettos in https://github.com/datafaker-net/datafaker/pull/1352</li> <li>fix: the last digit of ChineseIdNumber by @ly1012 in https://github.com/datafaker-net/datafaker/pull/1354</li> <li>Ukrainian id number generator by @ksy-ke in https://github.com/datafaker-net/datafaker/pull/1357</li> <li>translated MD cities to RU by @ksy-ke in https://github.com/datafaker-net/datafaker/pull/1359</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/v2.3.1...v2.4.0</p>"},{"location":"releases/2.4.0/#1343-search-locales-in-all-jar-files-not-only-in-datafakerjar-by-asolntsev-in-httpsgithubcomdatafaker-netdatafakerpull1349","title":"1343 search locales in all JAR files, not only in \"datafaker*.jar\" by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1349","text":""},{"location":"releases/2.4.0/#1343-simplify-code-for-returning-all-available-locales-by-asolntsev-in-httpsgithubcomdatafaker-netdatafakerpull1350","title":"1343 simplify code for returning all available locales by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1350","text":""},{"location":"releases/2.4.0/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.4.1/","title":"Datafaker 2.4.1 (2 November 2024)","text":"<p>\"Bug fixes and various stability improvements\"</p>"},{"location":"releases/2.4.1/#new-contributors","title":"New Contributors","text":"<ul> <li>@badoken made their first contribution in https://github.com/datafaker-net/datafaker/pull/1375</li> <li>@sann3 made their first contribution in https://github.com/datafaker-net/datafaker/pull/1378</li> <li>@senocak made their first contribution in https://github.com/datafaker-net/datafaker/pull/1389</li> <li>@shanjuren made their first contribution in https://github.com/datafaker-net/datafaker/pull/1402</li> </ul>"},{"location":"releases/2.4.1/#whats-changed","title":"What's Changed","text":"<ul> <li>2.4.0 Documentation by @bodiam in https://github.com/datafaker-net/datafaker/pull/1363</li> <li> </li> <li>Fix for K-pop artist lists: H.O.T., Fin.K.L, Sunmi, Stray Kids by @badoken in https://github.com/datafaker-net/datafaker/pull/1375</li> <li>Added initial support for GraalVM Native images. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1376</li> <li>move India country-specific settings to file \"_IN.yml\" by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1379</li> <li>update usage of deprecated method in Kotlin test by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1382</li> <li>describe principles of languages/countries to CONTRIBUTING guide by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1383</li> <li>CONTRIBUTING address review comments by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1384</li> <li> </li> <li>Adding support for Tamil language by @sann3 in https://github.com/datafaker-net/datafaker/pull/1378</li> <li>Fixup for Tamil language by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1385</li> <li>Extended emoji provider with vehicles by @badoken in https://github.com/datafaker-net/datafaker/pull/1391</li> <li>Turkish fields refactored by @senocak in https://github.com/datafaker-net/datafaker/pull/1389</li> <li>University name extension with places + testNoDuplications improvement by @badoken in https://github.com/datafaker-net/datafaker/pull/1394</li> <li> </li> <li> </li> <li>add missing @Override annotations by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1397</li> <li>Add places from Greece for University provider by @gvrettos in https://github.com/datafaker-net/datafaker/pull/1399</li> <li>Add greek translations for Ancient provider by @gvrettos in https://github.com/datafaker-net/datafaker/pull/1404</li> <li>Added input validation to prevent mistakes in version number. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1406</li> <li>Removed base64 decoding of GPG signing key. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1407</li> <li>fix generate sql will be truncate when quote char in word by @shanjuren in https://github.com/datafaker-net/datafaker/pull/1402</li> <li>Fix text in version validation. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1408</li> </ul>"},{"location":"releases/2.4.1/#1368-fix-duplicate-key-error-when-a-custom-faker-has-multiple-methods-with-the-same-return-type-by-asolntsev-in-httpsgithubcomdatafaker-netdatafakerpull1369","title":"1368 fix \"Duplicate key error\" when a custom faker has multiple methods with the same return type. by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1369","text":""},{"location":"releases/2.4.1/#1306-fix-non-thread-safe-usages-of-copyonwritemap-by-asolntsev-in-httpsgithubcomdatafaker-netdatafakerpull1381","title":"1306 fix non-thread-safe usages of CopyOnWriteMap by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1381","text":""},{"location":"releases/2.4.1/#1394-add-estonian-and-latvian-universities-by-asolntsev-in-httpsgithubcomdatafaker-netdatafakerpull1396","title":"1394 add Estonian and Latvian universities by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1396","text":""},{"location":"releases/2.4.1/#1386-fix-nextint-and-nextlong-with-extreme-boundaries-by-asolntsev-in-httpsgithubcomdatafaker-netdatafakerpull1388","title":"1386 fix nextInt and nextLong with extreme boundaries by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1388","text":""},{"location":"releases/2.4.1/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.4.2/","title":"Datafaker 2.4.2 (19 November 2024)","text":"<p>\"More bug fixes and various stability improvements\"</p>"},{"location":"releases/2.4.2/#new-contributors","title":"New Contributors","text":"<ul> <li>@TrueJacobG made their first contribution in https://github.com/datafaker-net/datafaker/pull/1434</li> </ul>"},{"location":"releases/2.4.2/#whats-changed","title":"What's Changed","text":"<ul> <li>Add greek translations for Measurement provider &amp; other Greek tests by @gvrettos in https://github.com/datafaker-net/datafaker/pull/1410</li> <li>fix: University tests by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1411</li> <li>Feature/name el gr by @gvrettos in https://github.com/datafaker-net/datafaker/pull/1415</li> <li>fix flaky test <code>NameTest.java</code> with Greek names by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1417</li> <li>Refactor few tests by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1418</li> <li>Feature: new methods <code>nextInt(Range)</code> and <code>nextLong(Range)</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1416</li> <li>fix flaky UniversityTest by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1420</li> <li> </li> <li>Added numberBetween for doubles. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1392</li> <li>Experimenting with Renovate to bundle all renovate PRs once a week. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1427</li> <li>Add greek values for Football provider by @gvrettos in https://github.com/datafaker-net/datafaker/pull/1428</li> <li>Update snapshot version in pom.xml by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1429</li> <li>swedish ssn cannot have format like XXXXXX-000X by @TrueJacobG in https://github.com/datafaker-net/datafaker/pull/1434</li> <li>Update Dota2Provider dota2.yml by @panic08 in https://github.com/datafaker-net/datafaker/pull/1435</li> <li>Finance provider extension with a new card type UNIONPAY and card number generator for it by @badoken in https://github.com/datafaker-net/datafaker/pull/1436</li> <li>Brazil passport number by @badoken in https://github.com/datafaker-net/datafaker/pull/1437</li> <li>feature: add movie name to movie provider by @hardikSinghBehl in https://github.com/datafaker-net/datafaker/pull/1442</li> <li>Automate rolling of SNAPSHOT version in pom by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1438</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/v2.4.1...2.4.2</p>"},{"location":"releases/2.4.2/#1412-fix-concurrency-issue-in-copyonwritemap-by-asolntsev-in-httpsgithubcomdatafaker-netdatafakerpull1419","title":"1412 fix concurrency issue in <code>CopyOnWriteMap</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1419","text":""},{"location":"releases/2.4.2/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.4.3/","title":"Datafaker 2.4.3 (13-07-2025)","text":""},{"location":"releases/2.4.3/#whats-changed","title":"What's Changed","text":"<ul> <li>Cleanup release process. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1533</li> <li>Update docs for date faking by @n-0 in https://github.com/datafaker-net/datafaker/pull/1534</li> <li>Bump com.diffplug.spotless:spotless-maven-plugin from 2.44.3 to 2.44.4 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1536</li> <li>[refactor] extract picking a random enum value to method <code>RandomService.nextEnum()</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1530</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.2 to 9.0.3 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1538</li> <li>Update README.md to include the updated version 2.4.3 by @JammyJims in https://github.com/datafaker-net/datafaker/pull/1540</li> <li>Bump org.apache.commons:commons-text from 1.13.0 to 1.13.1 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1541</li> <li>Updated snapshot version by @bodiam in https://github.com/datafaker-net/datafaker/pull/1542</li> <li>Bump junit.version from 5.12.1 to 5.12.2 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1543</li> <li>Do not use deprecated DateAndTime by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1544</li> <li>Descrease amount of calls to nextInt for numerify by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1545</li> <li>Bump codecov/codecov-action from 5.4.0 to 5.4.2 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1546</li> <li>Finish Release Workflow by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1547</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.3 to 9.0.4 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1548</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.4 to 9.0.5 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1550</li> <li>feat: add MartialArt provider with names by @paulofranklins2 in https://github.com/datafaker-net/datafaker/pull/1549</li> <li>add Severance characters by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1552</li> <li>Bump kotlin.version from 2.1.20 to 2.1.21 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1553</li> <li>Bump codecov/codecov-action from 5.4.2 to 5.4.3 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1554</li> <li>add Hungarian id number generator by @cbxp in https://github.com/datafaker-net/datafaker/pull/1555</li> <li>jsontransformer: All numbers as numbers by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1557</li> <li>Bump org.mockito:mockito-core from 5.17.0 to 5.18.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1558</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.5 to 9.0.6 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1560</li> <li>Bump com.diffplug.spotless:spotless-maven-plugin from 2.44.4 to 2.44.5 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1561</li> <li>Bump junit.version from 5.12.2 to 5.13.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1563</li> <li>Support custom Random Generators by @zyclonite in https://github.com/datafaker-net/datafaker/pull/1562</li> <li>Irish PPSN ID Number by @89snake89 in https://github.com/datafaker-net/datafaker/pull/1559</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.6 to 9.0.7 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1564</li> <li>Update all non-major dependencies by @renovate[bot] in https://github.com/datafaker-net/datafaker/pull/1565</li> <li>Update dependency com.github.javaparser:javaparser-symbol-solver-core to v3.27.0 by @renovate[bot] in https://github.com/datafaker-net/datafaker/pull/1567</li> <li>Refactoring by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1569</li> <li>remove old commented out test in FakeValuesTest by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1570</li> <li>Tiny improvements by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1571</li> <li>Bump kotlin.version from 2.1.21 to 2.2.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1574</li> <li>TomlTransformer implementation by @badoken in https://github.com/datafaker-net/datafaker/pull/1572</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.7 to 9.0.8 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1577</li> <li>Bump junit.version from 5.13.1 to 5.13.2 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1576</li> <li>Irish vehicle license plates by @89snake89 in https://github.com/datafaker-net/datafaker/pull/1578</li> <li>Bump org.apache.maven.plugins:maven-gpg-plugin from 3.2.7 to 3.2.8 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1579</li> <li>Bump org.apache.maven.plugins:maven-enforcer-plugin from 3.5.0 to 3.6.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1580</li> <li>Bump junit.version from 5.13.2 to 5.13.3 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1581</li> <li>Attempt to fix maven deploy using Maven Central by @bodiam in https://github.com/datafaker-net/datafaker/pull/1582</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.8 to 9.0.9 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1583</li> <li>Bump com.diffplug.spotless:spotless-maven-plugin from 2.44.5 to 2.45.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1584</li> <li>Bump commons-validator:commons-validator from 1.9.0 to 1.10.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1585</li> <li>Bump org.apache.commons:commons-lang3 from 3.17.0 to 3.18.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1586</li> </ul>"},{"location":"releases/2.4.3/#new-contributors","title":"New Contributors","text":"<ul> <li>@n-0 made their first contribution in https://github.com/datafaker-net/datafaker/pull/1534</li> <li>@JammyJims made their first contribution in https://github.com/datafaker-net/datafaker/pull/1540</li> <li>@paulofranklins2 made their first contribution in https://github.com/datafaker-net/datafaker/pull/1549</li> <li>@zyclonite made their first contribution in https://github.com/datafaker-net/datafaker/pull/1562</li> </ul> <p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.4.3/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.4.4/","title":"Datafaker 2.4.4 (13-07-2025)","text":""},{"location":"releases/2.4.4/#whats-changed","title":"What's Changed","text":"<ul> <li>Cleanup release process. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1533</li> <li>Update docs for date faking by @n-0 in https://github.com/datafaker-net/datafaker/pull/1534</li> <li>Bump com.diffplug.spotless:spotless-maven-plugin from 2.44.3 to 2.44.4 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1536</li> <li>[refactor] extract picking a random enum value to method <code>RandomService.nextEnum()</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1530</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.2 to 9.0.3 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1538</li> <li>Update README.md to include the updated version 2.4.3 by @JammyJims in https://github.com/datafaker-net/datafaker/pull/1540</li> <li>Bump org.apache.commons:commons-text from 1.13.0 to 1.13.1 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1541</li> <li>Updated snapshot version by @bodiam in https://github.com/datafaker-net/datafaker/pull/1542</li> <li>Bump junit.version from 5.12.1 to 5.12.2 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1543</li> <li>Do not use deprecated DateAndTime by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1544</li> <li>Descrease amount of calls to nextInt for numerify by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1545</li> <li>Bump codecov/codecov-action from 5.4.0 to 5.4.2 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1546</li> <li>Finish Release Workflow by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1547</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.3 to 9.0.4 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1548</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.4 to 9.0.5 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1550</li> <li>feat: add MartialArt provider with names by @paulofranklins2 in https://github.com/datafaker-net/datafaker/pull/1549</li> <li>add Severance characters by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1552</li> <li>Bump kotlin.version from 2.1.20 to 2.1.21 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1553</li> <li>Bump codecov/codecov-action from 5.4.2 to 5.4.3 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1554</li> <li>add Hungarian id number generator by @cbxp in https://github.com/datafaker-net/datafaker/pull/1555</li> <li>jsontransformer: All numbers as numbers by @kingthorin in https://github.com/datafaker-net/datafaker/pull/1557</li> <li>Bump org.mockito:mockito-core from 5.17.0 to 5.18.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1558</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.5 to 9.0.6 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1560</li> <li>Bump com.diffplug.spotless:spotless-maven-plugin from 2.44.4 to 2.44.5 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1561</li> <li>Bump junit.version from 5.12.2 to 5.13.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1563</li> <li>Support custom Random Generators by @zyclonite in https://github.com/datafaker-net/datafaker/pull/1562</li> <li>Irish PPSN ID Number by @89snake89 in https://github.com/datafaker-net/datafaker/pull/1559</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.6 to 9.0.7 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1564</li> <li>Update all non-major dependencies by @renovate[bot] in https://github.com/datafaker-net/datafaker/pull/1565</li> <li>Update dependency com.github.javaparser:javaparser-symbol-solver-core to v3.27.0 by @renovate[bot] in https://github.com/datafaker-net/datafaker/pull/1567</li> <li>Refactoring by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1569</li> <li>remove old commented out test in FakeValuesTest by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1570</li> <li>Tiny improvements by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1571</li> <li>Bump kotlin.version from 2.1.21 to 2.2.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1574</li> <li>TomlTransformer implementation by @badoken in https://github.com/datafaker-net/datafaker/pull/1572</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.7 to 9.0.8 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1577</li> <li>Bump junit.version from 5.13.1 to 5.13.2 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1576</li> <li>Irish vehicle license plates by @89snake89 in https://github.com/datafaker-net/datafaker/pull/1578</li> <li>Bump org.apache.maven.plugins:maven-gpg-plugin from 3.2.7 to 3.2.8 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1579</li> <li>Bump org.apache.maven.plugins:maven-enforcer-plugin from 3.5.0 to 3.6.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1580</li> <li>Bump junit.version from 5.13.2 to 5.13.3 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1581</li> <li>Attempt to fix maven deploy using Maven Central by @bodiam in https://github.com/datafaker-net/datafaker/pull/1582</li> <li>Bump com.googlecode.libphonenumber:libphonenumber from 9.0.8 to 9.0.9 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1583</li> <li>Bump com.diffplug.spotless:spotless-maven-plugin from 2.44.5 to 2.45.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1584</li> <li>Bump commons-validator:commons-validator from 1.9.0 to 1.10.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1585</li> <li>Bump org.apache.commons:commons-lang3 from 3.17.0 to 3.18.0 by @dependabot[bot] in https://github.com/datafaker-net/datafaker/pull/1586</li> </ul>"},{"location":"releases/2.4.4/#new-contributors","title":"New Contributors","text":"<ul> <li>@n-0 made their first contribution in https://github.com/datafaker-net/datafaker/pull/1534</li> <li>@JammyJims made their first contribution in https://github.com/datafaker-net/datafaker/pull/1540</li> <li>@paulofranklins2 made their first contribution in https://github.com/datafaker-net/datafaker/pull/1549</li> <li>@zyclonite made their first contribution in https://github.com/datafaker-net/datafaker/pull/1562</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/2.4.3...2.4.4</p>"},{"location":"releases/2.4.4/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.5.0/","title":"Datafaker 2.5.0 (16-09-2025)","text":""},{"location":"releases/2.5.0/#whats-changed","title":"What's Changed","text":"<ul> <li>Updated release documentation and set autopublish while publishing to\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/1588</li> <li>Add some new titles to the Zelda game list by @yuokada in https://github.com/datafaker-net/datafaker/pull/1589</li> <li>Fix Singapore ID number generation by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1594</li> <li>Removing parent, not sure if still needed. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1600</li> <li>[build] Use jdk25-ea in CI by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/1601</li> <li>Refactor tests extending <code>BaseFakerTest</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1606</li> <li>Refactor BaseFakerTest (provider list test) by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1607</li> <li>Fix csv generate by limit by @abudevich in https://github.com/datafaker-net/datafaker/pull/1615</li> <li>Avoid useless <code>NoSuchMethodRuntimeException</code> in logs by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1620</li> <li>Remove duplicates in \"*.yml\" files by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1608</li> <li>Fix flaky test WeightedRandomSelectorTest by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1626</li> <li>Fixed toLocalPart; Fixed tests; Fixed formatting by @rcriosbr in https://github.com/datafaker-net/datafaker/pull/1624</li> <li>Creates new Credential provider; Deprecated Internet provider methods by @rcriosbr in https://github.com/datafaker-net/datafaker/pull/1628</li> <li>Renamed Credential to Credentials by @bodiam in https://github.com/datafaker-net/datafaker/pull/1630</li> <li>make Brazilian ID Number accessible via <code>faker.idNumber()</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1631</li> <li>Removed System.out.printlns and other useless bits. by @bodiam in https://github.com/datafaker-net/datafaker/pull/1632</li> <li>Fix Correct typo in kpop.boy_bands key in ko.yml by @Chanwon-Seo in https://github.com/datafaker-net/datafaker/pull/1635</li> <li>Feat Improve Korean name data in ko.yml by @Chanwon-Seo in https://github.com/datafaker-net/datafaker/pull/1636</li> <li>Update CreditCard formats in Finance provider by @Fishbowler in https://github.com/datafaker-net/datafaker/pull/1637</li> <li>Finance Provider - update Swift IBAN data standard from v87 to v99 by @Fishbowler in https://github.com/datafaker-net/datafaker/pull/1641</li> <li>Add missing javadoc for the Finance provider by @Fishbowler in https://github.com/datafaker-net/datafaker/pull/1640</li> <li>Add Starships to the Star Trek provider by @Fishbowler in https://github.com/datafaker-net/datafaker/pull/1642</li> <li>Make Finance provider's UnionPay test more readable, especially on failure by @Fishbowler in https://github.com/datafaker-net/datafaker/pull/1643</li> <li>Make \"as\" message more informative in few tests by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1644</li> <li>Fewer logs in tests by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1646</li> <li>Corrected typos in ko.yml by @momoysm in https://github.com/datafaker-net/datafaker/pull/1645</li> <li>Add methods to generate random port within given range by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1651</li> <li>Remove unneeded test <code>testNoDuplications</code> by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1652</li> <li>Refactoring: eliminate recursive provider calls by @asolntsev in https://github.com/datafaker-net/datafaker/pull/1650</li> </ul>"},{"location":"releases/2.5.0/#new-contributors","title":"New Contributors","text":"<ul> <li>@abudevich made their first contribution in https://github.com/datafaker-net/datafaker/pull/1615</li> <li>@rcriosbr made their first contribution in https://github.com/datafaker-net/datafaker/pull/1624</li> <li>@Chanwon-Seo made their first contribution in https://github.com/datafaker-net/datafaker/pull/1635</li> <li>@Fishbowler made their first contribution in https://github.com/datafaker-net/datafaker/pull/1637</li> <li>@momoysm made their first contribution in https://github.com/datafaker-net/datafaker/pull/1645</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/2.4.4...2.5.0</p>"},{"location":"releases/2.5.0/#providers-added","title":"Providers added","text":"<p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.5.1/","title":"Datafaker 2.5.1 (24-09-2025)","text":""},{"location":"releases/2.5.1/#whats-changed","title":"What's Changed","text":"<ul> <li>Add ability to use whitelist conditions by @snuyanzin</li> <li>Update <code>_PL.yml</code> with country phone code by @kopernic-pl</li> <li>fix method <code>faker.text().text(1, 64, ...)</code> by @asolntsev (#1659)</li> <li>Added missing link for deprecation warning by @bodiam (#1658)</li> <li>Fix possible issue with \"tr\" locale in <code>testUsernameWithSpaces</code> by @snuyanzin</li> <li>Stop using <code>Internet#username()</code> internally by @kingthorin</li> </ul>"},{"location":"releases/2.5.1/#new-contributors","title":"New Contributors","text":"<ul> <li>@maxandersen made their first contribution</li> <li>@kopernic-pl made their first contribution</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/2.5.0...2.5.1</p>"},{"location":"releases/2.5.2/","title":"Datafaker 2.5.2 (11-10-2025)","text":""},{"location":"releases/2.5.2/#whats-changed","title":"What's Changed","text":"<ul> <li>Retrieve the no-argument constructor by @mt657-jpg</li> <li>Add Personal Identification Number generator for Norway (NO) #1681</li> <li>refactoring: remove unused setting \"country_by_code\" by @asolntsev</li> <li>Bump libphonenumber 9.0.14 -&gt; 9.0.16</li> </ul>"},{"location":"releases/2.5.2/#new-contributors","title":"New Contributors","text":"<ul> <li>@mt657-jpg made their first contribution</li> </ul> <p>Full Changelog: https://github.com/datafaker-net/datafaker/compare/2.5.1...2.5.2</p>"},{"location":"releases/2.5.3/","title":"Datafaker 2.5.3 (26-10-2025)","text":""},{"location":"releases/2.5.3/#whats-changed","title":"What's Changed","text":"<ul> <li>Add Apple types and colours by Sergejs Visockis</li> <li>Add an ice-cream specification by Sergejs Visockis</li> <li>Add \"Gravity Falls\" provider by Victoria Ivanova</li> <li>Ukrainian Locale Enhancements by Victoria Ivanova</li> </ul>"},{"location":"releases/2.5.3/#new-contributors","title":"New Contributors","text":"<ul> <li>@sergejsvisockis made their first contribution</li> <li>@vicky-iv made their first contribution</li> </ul>"},{"location":"releases/2.5.3/#providers-added","title":"Providers added","text":"<ul> <li>Apple</li> <li>IceCream</li> <li>GravityFalls</li> </ul> <p>See https://www.datafaker.net/documentation/providers/</p>"},{"location":"releases/2.6.0-SNAPSHOT/","title":"Datafaker 2.5.4-SNAPSHOT (dd-mm-yyyy)","text":""},{"location":"releases/2.6.0-SNAPSHOT/#whats-changed","title":"What's Changed","text":"<ul> <li>TBD </li> </ul>"},{"location":"releases/2.6.0-SNAPSHOT/#new-contributors","title":"New Contributors","text":"<ul> <li>TBD</li> </ul>"},{"location":"releases/2.6.0-SNAPSHOT/#providers-added","title":"Providers added","text":"<ul> <li>TBD</li> </ul> <p>See https://www.datafaker.net/documentation/providers/</p>"}]}